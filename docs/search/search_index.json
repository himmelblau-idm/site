{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Quickstart Himmelblau is an open-source authentication framework that brings Microsoft Entra ID login, policy enforcement, and Hello PIN support to Linux systems. This documentation will guide you through installation, configuration, and best practices for integrating Himmelblau into your environment. Get Started \ud83d\udce5 Installation Guide \u2699\ufe0f Configuration Reference \ud83d\udd10 NSS and PAM Setup \ud83e\udde0 Understanding Enrollment TL;DR Himmelblau is designed with sensible defaults to make initial setup fast and simple. If you're eager to get started without reading all the details, follow these basic steps: \ud83d\udce6 Download and install the packages (Choose the appropriate DEB or RPM for your system and install them.) \u270f\ufe0f Edit your config: Set the primary domain of your Entra ID tenant in /etc/himmelblau/himmelblau.conf : [global] domains = example.onmicrosoft.com \ud83d\udd10 Configure PAM On Debian based distros, pam configuration happened automatically when you installed Himmelblau. On openSUSE or SUSE Linux Enterprise: sudo pam-config --add --himmelblau On all other distros, you can run the manual config utility bundled with Himmelblau: sudo aad-tool configure-pam \ud83d\udc65 Configure NSS Add himmelblau to your /etc/nsswitch.conf to resolve Entra ID users and groups. passwd: files himmelblau group: files himmelblau \ud83d\ude80 Start the daemons: sudo systemctl enable himmelblaud himmelblaud-tasks sudo systemctl restart himmelblaud himmelblaud-tasks You\u2019re now ready to log in with your Entra ID credentials!","title":"Quickstart"},{"location":"#quickstart","text":"Himmelblau is an open-source authentication framework that brings Microsoft Entra ID login, policy enforcement, and Hello PIN support to Linux systems. This documentation will guide you through installation, configuration, and best practices for integrating Himmelblau into your environment.","title":"Quickstart"},{"location":"#get-started","text":"\ud83d\udce5 Installation Guide \u2699\ufe0f Configuration Reference \ud83d\udd10 NSS and PAM Setup \ud83e\udde0 Understanding Enrollment","title":"Get Started"},{"location":"#tldr","text":"Himmelblau is designed with sensible defaults to make initial setup fast and simple. If you're eager to get started without reading all the details, follow these basic steps: \ud83d\udce6 Download and install the packages (Choose the appropriate DEB or RPM for your system and install them.) \u270f\ufe0f Edit your config: Set the primary domain of your Entra ID tenant in /etc/himmelblau/himmelblau.conf : [global] domains = example.onmicrosoft.com \ud83d\udd10 Configure PAM On Debian based distros, pam configuration happened automatically when you installed Himmelblau. On openSUSE or SUSE Linux Enterprise: sudo pam-config --add --himmelblau On all other distros, you can run the manual config utility bundled with Himmelblau: sudo aad-tool configure-pam \ud83d\udc65 Configure NSS Add himmelblau to your /etc/nsswitch.conf to resolve Entra ID users and groups. passwd: files himmelblau group: files himmelblau \ud83d\ude80 Start the daemons: sudo systemctl enable himmelblaud himmelblaud-tasks sudo systemctl restart himmelblaud himmelblaud-tasks You\u2019re now ready to log in with your Entra ID credentials!","title":"TL;DR"},{"location":"about/","text":"About Himmelblau Himmelblau is an open-source authentication framework for Linux that integrates securely with Microsoft Entra ID (formerly Azure Active Directory). It bridges the long-standing gap between modern cloud identity and traditional Unix authentication (PAM/NSS), bringing MFA, device compliance, and policy enforcement to Linux \u2014 without proprietary agents or extra infrastructure. Himmelblau is German for \u201csky blue\u201d \u2014 a nod to Microsoft\u2019s Azure cloud and our mission to bring seamless cloud identity to Linux. Origins & Mission Himmelblau was conceived to address the growing need for seamless integration between Linux environments and Microsoft Entra ID . Originating as a fork of the Kanidm OAuth2 client led by William Brown (SUSE), Himmelblau tailors Kanidm\u2019s proven, security-focused foundations to the specifics of Entra ID, while pushing deeper into Intune policy enforcement, compliance reporting, and Hello for Business flows . Our mission is simple: Parity with Windows for authentication security and ease. First-class cloud identity on Linux \u2014 with open code, auditable flows, and a modern Rust codebase. Pragmatic interoperability with existing enterprise tooling. Key Features Microsoft Entra ID integration Native support for interactive and brokered OAuth 2.0 / OIDC flows, MFA, SSO, secure token management, and modern enterprise identity standards. (Optional / hybrid) Kerberos compatibility Extends Entra ID scenarios to Kerberos-backed environments for cloud and on-premises hybrid use cases. Intune policy & compliance Apply and report Linux Intune compliance results; cache and enforce password/PIN policies locally. Passwordless & FIDO2 Early support for passwordless authentication paths. Rust-first, modular architecture A systemd daemon ( himmelblaud ) plus PAM/NSS modules and CLI tooling \u2014 designed for reliability, memory safety, and maintainability. Open source & community-driven Built in the open, with transparent design, rigorous logging, and well-defined extension points. Supported Platforms Himmelblau targets a wide range of enterprise and community Linux distributions, including: SUSE / SLES Rocky Linux / RHEL Fedora Ubuntu Debian NixOS (We actively maintain cross-distro build pipelines and packaging; contributions for additional platforms are welcome.) Who\u2019s Behind It? Himmelblau is created and primarily maintained by David Mulder , with key contributions from William Brown and support from SUSE engineers and a growing community of open-source contributors. Get Involved We welcome contributors of all kinds \u2014 code, docs, packaging, testing, and real-world deployment feedback: Source & issues : Github Discuss / report bugs / request features : Open a GitHub issue or PR Sponsorship / support : Reach out to discuss enterprise needs, or sponsor the project . License Himmelblau is released under the GPLv3 (or later) \u2014 ensuring the code remains free, auditable, and community-owned.","title":"About"},{"location":"about/#about-himmelblau","text":"Himmelblau is an open-source authentication framework for Linux that integrates securely with Microsoft Entra ID (formerly Azure Active Directory). It bridges the long-standing gap between modern cloud identity and traditional Unix authentication (PAM/NSS), bringing MFA, device compliance, and policy enforcement to Linux \u2014 without proprietary agents or extra infrastructure. Himmelblau is German for \u201csky blue\u201d \u2014 a nod to Microsoft\u2019s Azure cloud and our mission to bring seamless cloud identity to Linux.","title":"About Himmelblau"},{"location":"about/#origins-mission","text":"Himmelblau was conceived to address the growing need for seamless integration between Linux environments and Microsoft Entra ID . Originating as a fork of the Kanidm OAuth2 client led by William Brown (SUSE), Himmelblau tailors Kanidm\u2019s proven, security-focused foundations to the specifics of Entra ID, while pushing deeper into Intune policy enforcement, compliance reporting, and Hello for Business flows . Our mission is simple: Parity with Windows for authentication security and ease. First-class cloud identity on Linux \u2014 with open code, auditable flows, and a modern Rust codebase. Pragmatic interoperability with existing enterprise tooling.","title":"Origins &amp; Mission"},{"location":"about/#key-features","text":"Microsoft Entra ID integration Native support for interactive and brokered OAuth 2.0 / OIDC flows, MFA, SSO, secure token management, and modern enterprise identity standards. (Optional / hybrid) Kerberos compatibility Extends Entra ID scenarios to Kerberos-backed environments for cloud and on-premises hybrid use cases. Intune policy & compliance Apply and report Linux Intune compliance results; cache and enforce password/PIN policies locally. Passwordless & FIDO2 Early support for passwordless authentication paths. Rust-first, modular architecture A systemd daemon ( himmelblaud ) plus PAM/NSS modules and CLI tooling \u2014 designed for reliability, memory safety, and maintainability. Open source & community-driven Built in the open, with transparent design, rigorous logging, and well-defined extension points.","title":"Key Features"},{"location":"about/#supported-platforms","text":"Himmelblau targets a wide range of enterprise and community Linux distributions, including: SUSE / SLES Rocky Linux / RHEL Fedora Ubuntu Debian NixOS (We actively maintain cross-distro build pipelines and packaging; contributions for additional platforms are welcome.)","title":"Supported Platforms"},{"location":"about/#whos-behind-it","text":"Himmelblau is created and primarily maintained by David Mulder , with key contributions from William Brown and support from SUSE engineers and a growing community of open-source contributors.","title":"Who\u2019s Behind It?"},{"location":"about/#get-involved","text":"We welcome contributors of all kinds \u2014 code, docs, packaging, testing, and real-world deployment feedback: Source & issues : Github Discuss / report bugs / request features : Open a GitHub issue or PR Sponsorship / support : Reach out to discuss enterprise needs, or sponsor the project .","title":"Get Involved"},{"location":"about/#license","text":"Himmelblau is released under the GPLv3 (or later) \u2014 ensuring the code remains free, auditable, and community-owned.","title":"License"},{"location":"architecture/","text":"Understanding Himmelblau Architecture Overview Himmelblau\u2019s architecture is modular, scalable, and designed to integrate deeply with both Linux system services and Microsoft Azure Entra ID. Its core components work together to authenticate users, manage tokens, provide session services, and bridge cloud-based identity with traditional POSIX environments. Key Components himmelblaud : Authentication Daemon The central daemon responsible for: Initiating and processing Entra Id authentication flows Requesting Primary Refresh Tokens (PRTs) and access tokens Managing token lifecycles: storage, renewal, expiration Securely communicating with other services via UNIX sockets Integrating with: PAM (authentication/account/session/password stacks) NSS (for user/group resolution) All authentication events funnel through himmelblaud , whether invoked via login, SSH, or user switching. himmelblau-broker : SSO Interface A DBus-based service that: Exposes authentication tokens to applications and browser plugins Supports automatic token refresh for SSO continuity Bridges the gap between system-level login and application-level authentication Used primarily in desktop environments or with SSO-capable CLI tools. himmelblaud-tasks : Background Worker This helper service performs actions that are triggered post-authentication: Requests cloud-based Kerberos TGTs and stores them in krb5cc caches Creates and initializes user home directories Enforces Intune policies (if enabled). It runs as a system service alongside himmelblaud . /etc/himmelblau/himmelblau.conf : Configuration File Defines the global and per-domain settings used by Himmelblau: Entra ID domains (automatically associated with tenants) Logging and debugging options POSIX mapping preferences Allowed groups for login authorization Session environment behavior Example: [global] domains = example.com pam_allow_groups = 00000000-1111-2222-3333-444444444444 home_attr = CN use_etc_skel = true \ud83d\udcd8 See Also: The himmelblau.conf man page for detailed configuration options The aad-tool man page for command-line configuration and diagnostics","title":"Architecture"},{"location":"architecture/#understanding-himmelblau-architecture","text":"","title":"Understanding Himmelblau Architecture"},{"location":"architecture/#overview","text":"Himmelblau\u2019s architecture is modular, scalable, and designed to integrate deeply with both Linux system services and Microsoft Azure Entra ID. Its core components work together to authenticate users, manage tokens, provide session services, and bridge cloud-based identity with traditional POSIX environments.","title":"Overview"},{"location":"architecture/#key-components","text":"","title":"Key Components"},{"location":"architecture/#himmelblaud-authentication-daemon","text":"The central daemon responsible for: Initiating and processing Entra Id authentication flows Requesting Primary Refresh Tokens (PRTs) and access tokens Managing token lifecycles: storage, renewal, expiration Securely communicating with other services via UNIX sockets Integrating with: PAM (authentication/account/session/password stacks) NSS (for user/group resolution) All authentication events funnel through himmelblaud , whether invoked via login, SSH, or user switching.","title":"himmelblaud: Authentication Daemon"},{"location":"architecture/#himmelblau-broker-sso-interface","text":"A DBus-based service that: Exposes authentication tokens to applications and browser plugins Supports automatic token refresh for SSO continuity Bridges the gap between system-level login and application-level authentication Used primarily in desktop environments or with SSO-capable CLI tools.","title":"himmelblau-broker: SSO Interface"},{"location":"architecture/#himmelblaud-tasks-background-worker","text":"This helper service performs actions that are triggered post-authentication: Requests cloud-based Kerberos TGTs and stores them in krb5cc caches Creates and initializes user home directories Enforces Intune policies (if enabled). It runs as a system service alongside himmelblaud .","title":"himmelblaud-tasks: Background Worker"},{"location":"architecture/#etchimmelblauhimmelblauconf-configuration-file","text":"Defines the global and per-domain settings used by Himmelblau: Entra ID domains (automatically associated with tenants) Logging and debugging options POSIX mapping preferences Allowed groups for login authorization Session environment behavior Example: [global] domains = example.com pam_allow_groups = 00000000-1111-2222-3333-444444444444 home_attr = CN use_etc_skel = true \ud83d\udcd8 See Also: The himmelblau.conf man page for detailed configuration options The aad-tool man page for command-line configuration and diagnostics","title":"/etc/himmelblau/himmelblau.conf: Configuration File"},{"location":"configuration/","text":"Configuration Overview Himmelblau is configured primarily through a single file: /etc/himmelblau/himmelblau.conf . This file controls authentication behavior, domain bindings, environment setup, policy enforcement, and more. This page also describes required system integration steps, including PAM and NSS configuration. Config File: /etc/himmelblau/himmelblau.conf To enable authentication, you must configure the domains option in the /etc/himmelblau/himmelblau.conf file. This setting determines which domains are permitted to authenticate to the host. You MUST only specify the primary domain from each tenant. All other configuration options are optional. Format The file uses an INI-like syntax with support for [global] and per-domain sections: [global] domains = example.com [example.com] app_id = 00000000-1111-2222-3333-444444444444 Key Options Key Description domains Comma-separated list of allowed Entra ID domains pam_allow_groups Group object IDs and user UPNs allowed to authenticate enable_hello Enables Linux Hello PIN support Note: Leaving the pam_allow_groups option unset in the /etc/himmelblau/himmelblau.conf file permits all users to authenticate . Note: On Ubuntu, you should additionally set use_etc_skel to true and configure home_attr and home_alias to match (I recommend using the CN or SPN attributes). These parameters are necessary, otherwise Ubuntu's snaps will fail to execute. These settings are set by default using the Himmelblau project Debian/Ubuntu packages. [global] home_attr = CN home_alias = CN use_etc_skel = true Refer to the himmelblau.conf man page for a full list of options. PAM Configuration To allow users to authenticate with Azure Entra ID, Himmelblau must be integrated into your system\u2019s PAM (Pluggable Authentication Module) stack. This directs authentication requests to the pam_himmelblau.so module. Preferred Configuration Methods Use one of the following automated tools to insert Himmelblau into the appropriate PAM files. Ubuntu / Debian: sudo pam-auth-update Then check the box labeled Azure authentication . openSUSE / Tumbleweed: sudo pam-config --add --himmelblau All systems (manual file editing): sudo aad-tool configure-pam This directly modifies PAM config files such as: /etc/pam.d/common-auth (Debian/Ubuntu) /etc/pam.d/system-auth (RHEL/SUSE) \u2139\ufe0f This tool is safe to use as a starting point, and allows fine-grained control later if needed. Manual Configuration (Advanced) If the above tools don\u2019t produce the desired result or you require precise control over module ordering and behavior, you may manually edit your PAM stack. Guidelines: Place pam_himmelblau.so after pam_localuser.so If using Linux Hello or Passwordless, place Himmelblau before pam_unix.so to avoid password prompts Always include ignore_unknown_user Ensure pam_deny.so is placed last Example: /etc/pam.d/common-auth auth required pam_env.so auth [default=1 ignore=ignore success=ok] pam_localuser.so auth sufficient pam_unix.so nullok try_first_pass auth sufficient pam_himmelblau.so ignore_unknown_user auth required pam_deny.so \ud83d\udca1 For Passwordless login, move Himmelblau above pam_unix.so to avoid fallback password prompts. Example: /etc/pam.d/common-account account [default=1 ignore=ignore success=ok] pam_localuser.so account sufficient pam_unix.so account sufficient pam_himmelblau.so ignore_unknown_user account required pam_deny.so Example: /etc/pam.d/common-session session optional pam_systemd.so session required pam_limits.so session optional pam_unix.so try_first_pass session optional pam_umask.so session optional pam_himmelblau.so session optional pam_env.so Example: /etc/pam.d/common-password password sufficient pam_himmelblau.so ignore_unknown_user password optional pam_gnome_keyring.so use_authtok password sufficient pam_unix.so use_authtok nullok shadow try_first_pass password required pam_deny.so NSS Configuration To ensure system tools can resolve Entra ID users and groups: Edit /etc/nsswitch.conf Find the passwd and group lines and modify them to include himmelblau , for example: passwd: files himmelblau group: files himmelblau Using Multiple Tenants You can support multiple Azure Entra ID tenants by listing their primary domain names in the global domains key: [global] domains = example.com,contoso.com [example.com] home_attr = CN [contoso.com] app_id = 1111-2222-3333-4444 Only the primary domain need be listed in the domains key. Other domains associated with the same tenant will be configured automatically. Each domain block may override options like app_id , idmap_range , or shell . Refer to the himmelblau.conf man page for a full list of options. Disabling Linux Hello PIN Linux Hello authentication is enabled by default. To disable it: [global] enable_hello = false Debug Logging Enable debug logs for troubleshooting: [global] debug = true Logs are written to: journalctl -u himmelblaud -u himmelblaud-tasks","title":"Configuration"},{"location":"configuration/#configuration","text":"","title":"Configuration"},{"location":"configuration/#overview","text":"Himmelblau is configured primarily through a single file: /etc/himmelblau/himmelblau.conf . This file controls authentication behavior, domain bindings, environment setup, policy enforcement, and more. This page also describes required system integration steps, including PAM and NSS configuration.","title":"Overview"},{"location":"configuration/#config-file-etchimmelblauhimmelblauconf","text":"To enable authentication, you must configure the domains option in the /etc/himmelblau/himmelblau.conf file. This setting determines which domains are permitted to authenticate to the host. You MUST only specify the primary domain from each tenant. All other configuration options are optional.","title":"Config File: /etc/himmelblau/himmelblau.conf"},{"location":"configuration/#format","text":"The file uses an INI-like syntax with support for [global] and per-domain sections: [global] domains = example.com [example.com] app_id = 00000000-1111-2222-3333-444444444444","title":"Format"},{"location":"configuration/#key-options","text":"Key Description domains Comma-separated list of allowed Entra ID domains pam_allow_groups Group object IDs and user UPNs allowed to authenticate enable_hello Enables Linux Hello PIN support Note: Leaving the pam_allow_groups option unset in the /etc/himmelblau/himmelblau.conf file permits all users to authenticate . Note: On Ubuntu, you should additionally set use_etc_skel to true and configure home_attr and home_alias to match (I recommend using the CN or SPN attributes). These parameters are necessary, otherwise Ubuntu's snaps will fail to execute. These settings are set by default using the Himmelblau project Debian/Ubuntu packages. [global] home_attr = CN home_alias = CN use_etc_skel = true Refer to the himmelblau.conf man page for a full list of options.","title":"Key Options"},{"location":"configuration/#pam-configuration","text":"To allow users to authenticate with Azure Entra ID, Himmelblau must be integrated into your system\u2019s PAM (Pluggable Authentication Module) stack. This directs authentication requests to the pam_himmelblau.so module.","title":"PAM Configuration"},{"location":"configuration/#preferred-configuration-methods","text":"Use one of the following automated tools to insert Himmelblau into the appropriate PAM files. Ubuntu / Debian: sudo pam-auth-update Then check the box labeled Azure authentication . openSUSE / Tumbleweed: sudo pam-config --add --himmelblau All systems (manual file editing): sudo aad-tool configure-pam This directly modifies PAM config files such as: /etc/pam.d/common-auth (Debian/Ubuntu) /etc/pam.d/system-auth (RHEL/SUSE) \u2139\ufe0f This tool is safe to use as a starting point, and allows fine-grained control later if needed.","title":"Preferred Configuration Methods"},{"location":"configuration/#manual-configuration-advanced","text":"If the above tools don\u2019t produce the desired result or you require precise control over module ordering and behavior, you may manually edit your PAM stack. Guidelines: Place pam_himmelblau.so after pam_localuser.so If using Linux Hello or Passwordless, place Himmelblau before pam_unix.so to avoid password prompts Always include ignore_unknown_user Ensure pam_deny.so is placed last","title":"Manual Configuration (Advanced)"},{"location":"configuration/#example-etcpamdcommon-auth","text":"auth required pam_env.so auth [default=1 ignore=ignore success=ok] pam_localuser.so auth sufficient pam_unix.so nullok try_first_pass auth sufficient pam_himmelblau.so ignore_unknown_user auth required pam_deny.so \ud83d\udca1 For Passwordless login, move Himmelblau above pam_unix.so to avoid fallback password prompts.","title":"Example: /etc/pam.d/common-auth"},{"location":"configuration/#example-etcpamdcommon-account","text":"account [default=1 ignore=ignore success=ok] pam_localuser.so account sufficient pam_unix.so account sufficient pam_himmelblau.so ignore_unknown_user account required pam_deny.so","title":"Example: /etc/pam.d/common-account"},{"location":"configuration/#example-etcpamdcommon-session","text":"session optional pam_systemd.so session required pam_limits.so session optional pam_unix.so try_first_pass session optional pam_umask.so session optional pam_himmelblau.so session optional pam_env.so","title":"Example: /etc/pam.d/common-session"},{"location":"configuration/#example-etcpamdcommon-password","text":"password sufficient pam_himmelblau.so ignore_unknown_user password optional pam_gnome_keyring.so use_authtok password sufficient pam_unix.so use_authtok nullok shadow try_first_pass password required pam_deny.so","title":"Example: /etc/pam.d/common-password"},{"location":"configuration/#nss-configuration","text":"To ensure system tools can resolve Entra ID users and groups: Edit /etc/nsswitch.conf Find the passwd and group lines and modify them to include himmelblau , for example: passwd: files himmelblau group: files himmelblau","title":"NSS Configuration"},{"location":"configuration/#using-multiple-tenants","text":"You can support multiple Azure Entra ID tenants by listing their primary domain names in the global domains key: [global] domains = example.com,contoso.com [example.com] home_attr = CN [contoso.com] app_id = 1111-2222-3333-4444 Only the primary domain need be listed in the domains key. Other domains associated with the same tenant will be configured automatically. Each domain block may override options like app_id , idmap_range , or shell . Refer to the himmelblau.conf man page for a full list of options.","title":"Using Multiple Tenants"},{"location":"configuration/#disabling-linux-hello-pin","text":"Linux Hello authentication is enabled by default. To disable it: [global] enable_hello = false","title":"Disabling Linux Hello PIN"},{"location":"configuration/#debug-logging","text":"Enable debug logs for troubleshooting: [global] debug = true Logs are written to: journalctl -u himmelblaud -u himmelblaud-tasks","title":"Debug Logging"},{"location":"ecosystem/","text":"The Himmelblau Ecosystem Overview Himmelblau is more than just a login module \u2014 it\u2019s a full ecosystem for managing identity integration between Azure Entra ID and Linux systems. Core Features and Benefits Azure Entra ID Integration Himmelblau supports modern Azure Entra ID authentication flows: OAuth2 authorization with MS-OAPX and OAPXBC extensions Primary Refresh Token (PRT) issuance and renewal Support for multi-factor authentication (MFA), including: Microsoft Authenticator FIDO2 hardware keys One-time passwords via SMS Temporary Access Pass Secure Token Storage and Device Registration All credentials and issued tokens are stored in encrypted, machine-bound storage SoftHSM and TPM backends are supported Seamless device registration with Azure Entra ID during first login Kerberos Support Himmelblau retrieves and caches Ticket Granting Tickets (TGTs) from Azure\u2019s cloud KDC, enabling: Secure SSO access to Kerberos-based applications Hybrid workflows that combine cloud and on-prem AD Kerberos services Single Sign-On (SSO) Via integration with Siemens' linux-entra-sso , Himmelblau enables: Firefox/Chrome Browser SSO for Microsoft 365 and Entra ID\u2013protected apps Secure, refreshable token storage for long-lived sessions Supported Linux Distributions Himmelblau supports a broad range of Linux distributions, including: Enterprise-focused: SUSE Linux Enterprise (SLE) Red Hat Enterprise Linux (RHEL) Rocky Linux Community-driven: Ubuntu Debian Fedora openSUSE NixOS Interoperability with Microsoft Services By emulating Windows authentication flows and integrating directly with Microsoft APIs, Himmelblau enables Linux clients to: Authenticate to Microsoft 365 services (Exchange, SharePoint, Teams) Access Azure-based applications protected by Entra ID Conditional Access Report device state and compliance to Microsoft Intune (optional) Function in hybrid environments with both on-prem and cloud resources","title":"Ecosystem"},{"location":"ecosystem/#the-himmelblau-ecosystem","text":"","title":"The Himmelblau Ecosystem"},{"location":"ecosystem/#overview","text":"Himmelblau is more than just a login module \u2014 it\u2019s a full ecosystem for managing identity integration between Azure Entra ID and Linux systems.","title":"Overview"},{"location":"ecosystem/#core-features-and-benefits","text":"","title":"Core Features and Benefits"},{"location":"ecosystem/#azure-entra-id-integration","text":"Himmelblau supports modern Azure Entra ID authentication flows: OAuth2 authorization with MS-OAPX and OAPXBC extensions Primary Refresh Token (PRT) issuance and renewal Support for multi-factor authentication (MFA), including: Microsoft Authenticator FIDO2 hardware keys One-time passwords via SMS Temporary Access Pass","title":"Azure Entra ID Integration"},{"location":"ecosystem/#secure-token-storage-and-device-registration","text":"All credentials and issued tokens are stored in encrypted, machine-bound storage SoftHSM and TPM backends are supported Seamless device registration with Azure Entra ID during first login","title":"Secure Token Storage and Device Registration"},{"location":"ecosystem/#kerberos-support","text":"Himmelblau retrieves and caches Ticket Granting Tickets (TGTs) from Azure\u2019s cloud KDC, enabling: Secure SSO access to Kerberos-based applications Hybrid workflows that combine cloud and on-prem AD Kerberos services","title":"Kerberos Support"},{"location":"ecosystem/#single-sign-on-sso","text":"Via integration with Siemens' linux-entra-sso , Himmelblau enables: Firefox/Chrome Browser SSO for Microsoft 365 and Entra ID\u2013protected apps Secure, refreshable token storage for long-lived sessions","title":"Single Sign-On (SSO)"},{"location":"ecosystem/#supported-linux-distributions","text":"Himmelblau supports a broad range of Linux distributions, including: Enterprise-focused: SUSE Linux Enterprise (SLE) Red Hat Enterprise Linux (RHEL) Rocky Linux Community-driven: Ubuntu Debian Fedora openSUSE NixOS","title":"Supported Linux Distributions"},{"location":"ecosystem/#interoperability-with-microsoft-services","text":"By emulating Windows authentication flows and integrating directly with Microsoft APIs, Himmelblau enables Linux clients to: Authenticate to Microsoft 365 services (Exchange, SharePoint, Teams) Access Azure-based applications protected by Entra ID Conditional Access Report device state and compliance to Microsoft Intune (optional) Function in hybrid environments with both on-prem and cloud resources","title":"Interoperability with Microsoft Services"},{"location":"installation/","text":"Installing Himmelblau Overview Himmelblau is packaged for a wide range of Linux distributions and supports multiple installation methods, including .deb and .rpm packages, container builds, and manual source compilation. This page covers how to install Himmelblau on Ubuntu, Debian, RHEL, Rocky, SUSE, and other distributions. Supported Distributions Loading supported distributions... Installation from Prebuilt Packages Download the packages for your distribution , and install them using your flavor of package manager: Debian & Ubuntu Download the .deb packages. Install: sudo apt install -y ./himmelblau_<version>-<distro>_amd64.deb ./himmelblau-sshd-config_<version>-<distro>_amd64.deb ./himmelblau-sso_<version>-<distro>_amd64.deb ./nss-himmelblau_<version>-<distro>_amd64.deb ./pam-himmelblau_<version>-<distro>_amd64.deb ./himmelblau-qr-greeter_<version>-<distro>_amd64.deb Optional Debian repositories You can optionally install the latest package from the Himmelblau debian repositories, as described on the downloads page. RHEL, Rocky, Fedora Download the .rpm packages. Install: sudo rpm --import https://himmelblau-idm.org/himmelblau.asc sudo dnf install ./himmelblau-<version>-1.x86_64-<distro>.rpm ./himmelblau-sshd-config-<version>-1.x86_64-<distro>.rpm ./himmelblau-sso-<version>-1.x86_64-<distro>.rpm ./nss-himmelblau-<version>-1.x86_64-<distro>.rpm ./pam-himmelblau-<version>-1.x86_64-<distro>.rpm ./himmelblau-qr-greeter-<version>-1.x86_64-<distro>.rpm SUSE Linux Enterprise (SLE) / openSUSE Download the .rpm packages. Install: sudo rpm --import https://himmelblau-idm.org/himmelblau.asc sudo zypper install ./himmelblau-<version>-1.x86_64-<distro>.rpm ./himmelblau-sshd-config-<version>-1.x86_64-<distro>.rpm ./himmelblau-sso-<version>-1.x86_64-<distro>.rpm ./nss-himmelblau-<version>-1.x86_64-<distro>.rpm ./pam-himmelblau-<version>-1.x86_64-<distro>.rpm ./himmelblau-qr-greeter-<version>-1.x86_64-<distro>.rpm From Source If you prefer to build Himmelblau from source, you can use the provided Makefile to produce native packages for your target distribution. Steps: Clone the repository: git clone https://github.com/himmelblau-idm/himmelblau cd himmelblau Build packages for your distro: make ubuntu24.04 # Replace with your target distro Available distro targets: ubuntu22.04 ubuntu24.04 debian12 rocky8 rocky9 rocky10 sle15sp6 sle15sp7 tumbleweed fedora41 fedora42 rawhide Find the resulting .deb or .rpm packages in: ./packages/ You can then install the generated package as normal using your system's package manager (e.g., dpkg , dnf , or zypper ). \ud83d\udca1 This method ensures proper packaging with dependencies and systemd service files \u2014 ideal for testing or contributing to Himmelblau.","title":"Installation"},{"location":"installation/#installing-himmelblau","text":"","title":"Installing Himmelblau"},{"location":"installation/#overview","text":"Himmelblau is packaged for a wide range of Linux distributions and supports multiple installation methods, including .deb and .rpm packages, container builds, and manual source compilation. This page covers how to install Himmelblau on Ubuntu, Debian, RHEL, Rocky, SUSE, and other distributions.","title":"Overview"},{"location":"installation/#supported-distributions","text":"Loading supported distributions...","title":"Supported Distributions"},{"location":"installation/#installation-from-prebuilt-packages","text":"Download the packages for your distribution , and install them using your flavor of package manager:","title":"Installation from Prebuilt Packages"},{"location":"installation/#debian-ubuntu","text":"Download the .deb packages. Install: sudo apt install -y ./himmelblau_<version>-<distro>_amd64.deb ./himmelblau-sshd-config_<version>-<distro>_amd64.deb ./himmelblau-sso_<version>-<distro>_amd64.deb ./nss-himmelblau_<version>-<distro>_amd64.deb ./pam-himmelblau_<version>-<distro>_amd64.deb ./himmelblau-qr-greeter_<version>-<distro>_amd64.deb","title":"Debian &amp; Ubuntu"},{"location":"installation/#optional-debian-repositories","text":"You can optionally install the latest package from the Himmelblau debian repositories, as described on the downloads page.","title":"Optional Debian repositories"},{"location":"installation/#rhel-rocky-fedora","text":"Download the .rpm packages. Install: sudo rpm --import https://himmelblau-idm.org/himmelblau.asc sudo dnf install ./himmelblau-<version>-1.x86_64-<distro>.rpm ./himmelblau-sshd-config-<version>-1.x86_64-<distro>.rpm ./himmelblau-sso-<version>-1.x86_64-<distro>.rpm ./nss-himmelblau-<version>-1.x86_64-<distro>.rpm ./pam-himmelblau-<version>-1.x86_64-<distro>.rpm ./himmelblau-qr-greeter-<version>-1.x86_64-<distro>.rpm","title":"RHEL, Rocky, Fedora"},{"location":"installation/#suse-linux-enterprise-sle-opensuse","text":"Download the .rpm packages. Install: sudo rpm --import https://himmelblau-idm.org/himmelblau.asc sudo zypper install ./himmelblau-<version>-1.x86_64-<distro>.rpm ./himmelblau-sshd-config-<version>-1.x86_64-<distro>.rpm ./himmelblau-sso-<version>-1.x86_64-<distro>.rpm ./nss-himmelblau-<version>-1.x86_64-<distro>.rpm ./pam-himmelblau-<version>-1.x86_64-<distro>.rpm ./himmelblau-qr-greeter-<version>-1.x86_64-<distro>.rpm","title":"SUSE Linux Enterprise (SLE) / openSUSE"},{"location":"installation/#from-source","text":"If you prefer to build Himmelblau from source, you can use the provided Makefile to produce native packages for your target distribution.","title":"From Source"},{"location":"installation/#steps","text":"Clone the repository: git clone https://github.com/himmelblau-idm/himmelblau cd himmelblau Build packages for your distro: make ubuntu24.04 # Replace with your target distro Available distro targets: ubuntu22.04 ubuntu24.04 debian12 rocky8 rocky9 rocky10 sle15sp6 sle15sp7 tumbleweed fedora41 fedora42 rawhide Find the resulting .deb or .rpm packages in: ./packages/ You can then install the generated package as normal using your system's package manager (e.g., dpkg , dnf , or zypper ). \ud83d\udca1 This method ensures proper packaging with dependencies and systemd service files \u2014 ideal for testing or contributing to Himmelblau.","title":"Steps:"},{"location":"integration/","text":"Transitioning from On-Prem AD to Azure Entra ID When migrating from traditional Active Directory (AD) to Azure Entra ID, preserving existing UID and GID values is crucial for Linux systems. Himmelblau 1.0 and newer provides support for POSIX attribute migration and identity mapping via the aad-tool utility. Migration Paths for UID/GID Preservation Himmelblau offers two strategies for UID/GID migration, depending on whether you want globally consistent attributes or host-specific mappings. 1. Sync POSIX Attributes to Entra ID (Recommended) Use aad-tool user set-posix-attrs and aad-tool group set-posix-attrs to store UID/GID values directly on Entra ID objects via directory schema extensions. These values are then consistently available across all Entra ID\u2013joined Linux systems. You have two options for getting POSIX attributes into Entra ID: Option A: If your users already have uidNumber , gidNumber , or unixHomeDirectory values in on-prem Active Directory, you can sync them to Entra ID using Entra Connect Sync . Option B: Manually register schema extensions and assign POSIX attributes using aad-tool . To manually register and assign: Add the schema extensions: aad-tool application add-schema-extensions \\ --client-id <SCHEMA_CLIENT_ID> \\ --schema-app-object-id <APPLICATION_OBJECT_ID> Set attributes on users or groups: aad-tool user set-posix-attrs \\ --schema-client-id <SCHEMA_CLIENT_ID> \\ --user-id <USER_OBJECT_ID> \\ --uid <UID> \\ --gid <GID> \\ --home /home/example \\ --shell /bin/bash \ud83d\udca1 POSIX attributes stored in Entra ID can be retrieved at login time, even before authentication completes \u2014 if Himmelblau is configured with Confidential Client Credentials. Using Confidential Client Credentials To enable early attribute lookup (e.g., uidNumber , gidNumber ) before login: Use aad-tool cred secret or aad-tool cred cert to configure confidential client authentication: # Using a client secret aad-tool cred secret \\ --client-id <APP_ID> \\ --domain <YOUR_DOMAIN> \\ --secret <SECRET_VALUE> # Or using a self-signed client certificate aad-tool cred cert \\ --client-id <APP_ID> \\ --domain <YOUR_DOMAIN> \\ --valid-days 365 \\ --cert-out /tmp/my-cert.pem These credentials allow Himmelblau to authenticate securely and perform Graph API lookups before any user logs in. Pre-Caching POSIX Attributes (Optional) If you haven\u2019t configured confidential client credentials, UID/GID attributes won\u2019t be available until after login. To avoid this, you can pre-cache attribute mappings using: aad-tool enumerate This command fetches all users and groups with POSIX attributes from Entra ID and stores them locally for use during authentication. \u26a0\ufe0f aad-tool enumerate only works on devices that are already Entra ID\u2013joined, and where the calling user has delegated Graph API access. 2. Use Static ID Mapping (Host-Specific) If UID/GID mappings vary by system or cannot be stored in Entra ID, use the static ID map cache instead: aad-tool idmap user-add --name user@domain --uid 10001 --gid 100 aad-tool idmap group-add --name group@domain --gid 100 These mappings are stored locally and applied consistently on the host during lookup. \u26a0\ufe0f This approach is best used when global consistency is not feasible.","title":"Migration from On-Prem"},{"location":"integration/#transitioning-from-on-prem-ad-to-azure-entra-id","text":"When migrating from traditional Active Directory (AD) to Azure Entra ID, preserving existing UID and GID values is crucial for Linux systems. Himmelblau 1.0 and newer provides support for POSIX attribute migration and identity mapping via the aad-tool utility.","title":"Transitioning from On-Prem AD to Azure Entra ID"},{"location":"integration/#migration-paths-for-uidgid-preservation","text":"Himmelblau offers two strategies for UID/GID migration, depending on whether you want globally consistent attributes or host-specific mappings.","title":"Migration Paths for UID/GID Preservation"},{"location":"integration/#1-sync-posix-attributes-to-entra-id-recommended","text":"Use aad-tool user set-posix-attrs and aad-tool group set-posix-attrs to store UID/GID values directly on Entra ID objects via directory schema extensions. These values are then consistently available across all Entra ID\u2013joined Linux systems. You have two options for getting POSIX attributes into Entra ID: Option A: If your users already have uidNumber , gidNumber , or unixHomeDirectory values in on-prem Active Directory, you can sync them to Entra ID using Entra Connect Sync . Option B: Manually register schema extensions and assign POSIX attributes using aad-tool . To manually register and assign: Add the schema extensions: aad-tool application add-schema-extensions \\ --client-id <SCHEMA_CLIENT_ID> \\ --schema-app-object-id <APPLICATION_OBJECT_ID> Set attributes on users or groups: aad-tool user set-posix-attrs \\ --schema-client-id <SCHEMA_CLIENT_ID> \\ --user-id <USER_OBJECT_ID> \\ --uid <UID> \\ --gid <GID> \\ --home /home/example \\ --shell /bin/bash \ud83d\udca1 POSIX attributes stored in Entra ID can be retrieved at login time, even before authentication completes \u2014 if Himmelblau is configured with Confidential Client Credentials.","title":"1. Sync POSIX Attributes to Entra ID (Recommended)"},{"location":"integration/#using-confidential-client-credentials","text":"To enable early attribute lookup (e.g., uidNumber , gidNumber ) before login: Use aad-tool cred secret or aad-tool cred cert to configure confidential client authentication: # Using a client secret aad-tool cred secret \\ --client-id <APP_ID> \\ --domain <YOUR_DOMAIN> \\ --secret <SECRET_VALUE> # Or using a self-signed client certificate aad-tool cred cert \\ --client-id <APP_ID> \\ --domain <YOUR_DOMAIN> \\ --valid-days 365 \\ --cert-out /tmp/my-cert.pem These credentials allow Himmelblau to authenticate securely and perform Graph API lookups before any user logs in.","title":"Using Confidential Client Credentials"},{"location":"integration/#pre-caching-posix-attributes-optional","text":"If you haven\u2019t configured confidential client credentials, UID/GID attributes won\u2019t be available until after login. To avoid this, you can pre-cache attribute mappings using: aad-tool enumerate This command fetches all users and groups with POSIX attributes from Entra ID and stores them locally for use during authentication. \u26a0\ufe0f aad-tool enumerate only works on devices that are already Entra ID\u2013joined, and where the calling user has delegated Graph API access.","title":"Pre-Caching POSIX Attributes (Optional)"},{"location":"integration/#2-use-static-id-mapping-host-specific","text":"If UID/GID mappings vary by system or cannot be stored in Entra ID, use the static ID map cache instead: aad-tool idmap user-add --name user@domain --uid 10001 --gid 100 aad-tool idmap group-add --name group@domain --gid 100 These mappings are stored locally and applied consistently on the host during lookup. \u26a0\ufe0f This approach is best used when global consistency is not feasible.","title":"2. Use Static ID Mapping (Host-Specific)"},{"location":"introduction/","text":"Introduction to Himmelblau What is Himmelblau? Himmelblau is an open-source project that brings Azure Entra ID (formerly Azure Active Directory) authentication to Linux systems. It enables: Single Sign-On (SSO) Multi-Factor Authentication (MFA) Secure token handling The project bridges the gap between Microsoft\u2019s identity solutions and Linux environments through modular components for authentication, registration, and identity management. \ud83d\udca1 Himmelblau means \"sky blue\" in German \u2014 a nod to Microsoft Azure. Why Integrate Azure Entra ID with Linux? Hybrid IT environments are increasingly common, and Entra ID is central to identity and access management in Microsoft ecosystems. Linux systems often lack first-class support. Himmelblau addresses this by: Providing unified credentials across Windows and Linux Enabling Azure MFA (FIDO2, SMS, Authenticator app) Supporting browser SSO (via Siemens\u2019 linux-entra-sso ) Meeting compliance requirements Scaling across small and large deployments Open Source Advantage As an open-source solution, Himmelblau offers: Customizable workflows Community-driven development No vendor lock-in","title":"Introduction to Himmelblau"},{"location":"introduction/#introduction-to-himmelblau","text":"","title":"Introduction to Himmelblau"},{"location":"introduction/#what-is-himmelblau","text":"Himmelblau is an open-source project that brings Azure Entra ID (formerly Azure Active Directory) authentication to Linux systems. It enables: Single Sign-On (SSO) Multi-Factor Authentication (MFA) Secure token handling The project bridges the gap between Microsoft\u2019s identity solutions and Linux environments through modular components for authentication, registration, and identity management. \ud83d\udca1 Himmelblau means \"sky blue\" in German \u2014 a nod to Microsoft Azure.","title":"What is Himmelblau?"},{"location":"introduction/#why-integrate-azure-entra-id-with-linux","text":"Hybrid IT environments are increasingly common, and Entra ID is central to identity and access management in Microsoft ecosystems. Linux systems often lack first-class support. Himmelblau addresses this by: Providing unified credentials across Windows and Linux Enabling Azure MFA (FIDO2, SMS, Authenticator app) Supporting browser SSO (via Siemens\u2019 linux-entra-sso ) Meeting compliance requirements Scaling across small and large deployments","title":"Why Integrate Azure Entra ID with Linux?"},{"location":"introduction/#open-source-advantage","text":"As an open-source solution, Himmelblau offers: Customizable workflows Community-driven development No vendor lock-in","title":"Open Source Advantage"},{"location":"registration/","text":"Device Registration with Azure Entra ID Overview Himmelblau supports automatic device registration with Azure Entra ID as part of its first-login flow. This enables conditional access, device-based compliance enforcement, and visibility in the Microsoft Entra admin center. Device registration is mandatory for: Intune integration Device-scoped Conditional Access policies When Registration Occurs Device registration is initiated automatically when: A user authenticates with a domain configured in himmelblau.conf The device has no cached registration or device identity This typically happens during the first successful login for each Entra ID\u2013enabled domain. You can enforce registration immediately by running aad-tool auth-test . Registration Workflow Step-by-Step Check for Existing Identity Himmelblau checks whether the device is already registered. This is done by: Looking for sealed credentials in the himmelblau cache. Checking configuration for a device_id Enroll Device If not already registered: Himmelblau contacts the Entra Id /device endpoint Uses device credentials (TPM-backed or SoftHSM-backed key) For more details, view the enrollment documentation . Store Device Identity Upon successful registration: The device ID and related certificate are stored securely Future token requests include device context Intune Enroll Device (Optional) Registering the device with Intune is a separate process: Himmelblau contacts the Intune /enroll endpoint Uses device credentials from Entra Id enrollment to authenticate For more details, view the Intune enrollment documentation . Store Intune Device Identity Upon successful registration: The device ID and related certificate are stored securely Intune and Conditional Access can now recognize the device Security Considerations Registration keys are sealed to the TPM when available Device identity is bound to the machine and cannot be reused elsewhere Managing Registered Devices Once registered, the device can be managed through the Entra admin portal or Microsoft Intune: View device metadata, compliance status, and last check-in Enforce policies Remove stale entries manually if a device is decommissioned","title":"Device Registration"},{"location":"registration/#device-registration-with-azure-entra-id","text":"","title":"Device Registration with Azure Entra ID"},{"location":"registration/#overview","text":"Himmelblau supports automatic device registration with Azure Entra ID as part of its first-login flow. This enables conditional access, device-based compliance enforcement, and visibility in the Microsoft Entra admin center. Device registration is mandatory for: Intune integration Device-scoped Conditional Access policies","title":"Overview"},{"location":"registration/#when-registration-occurs","text":"Device registration is initiated automatically when: A user authenticates with a domain configured in himmelblau.conf The device has no cached registration or device identity This typically happens during the first successful login for each Entra ID\u2013enabled domain. You can enforce registration immediately by running aad-tool auth-test .","title":"When Registration Occurs"},{"location":"registration/#registration-workflow","text":"","title":"Registration Workflow"},{"location":"registration/#step-by-step","text":"Check for Existing Identity Himmelblau checks whether the device is already registered. This is done by: Looking for sealed credentials in the himmelblau cache. Checking configuration for a device_id Enroll Device If not already registered: Himmelblau contacts the Entra Id /device endpoint Uses device credentials (TPM-backed or SoftHSM-backed key) For more details, view the enrollment documentation . Store Device Identity Upon successful registration: The device ID and related certificate are stored securely Future token requests include device context Intune Enroll Device (Optional) Registering the device with Intune is a separate process: Himmelblau contacts the Intune /enroll endpoint Uses device credentials from Entra Id enrollment to authenticate For more details, view the Intune enrollment documentation . Store Intune Device Identity Upon successful registration: The device ID and related certificate are stored securely Intune and Conditional Access can now recognize the device","title":"Step-by-Step"},{"location":"registration/#security-considerations","text":"Registration keys are sealed to the TPM when available Device identity is bound to the machine and cannot be reused elsewhere","title":"Security Considerations"},{"location":"registration/#managing-registered-devices","text":"Once registered, the device can be managed through the Entra admin portal or Microsoft Intune: View device metadata, compliance status, and last check-in Enforce policies Remove stale entries manually if a device is decommissioned","title":"Managing Registered Devices"},{"location":"advanced/Cloud-Kerberos-Trust-for-Linux/","text":"\u26a0\ufe0f Warning: This document is a work in progress. Cloud Kerberos Trust for Linux is also a work in progress and likely requires additional configuration and bug fixes to Himmelblau. Cloud Kerberos Trust Setup for Entra ID Joined Linux Devices This guide outlines the steps to configure Cloud Kerberos Trust between Microsoft Entra ID (formerly Azure AD) and an on-premises Active Directory (AD) for Linux devices joined to Entra ID using Himmelblau. Prerequisites Microsoft Entra ID is configured. On-premises Active Directory is operational. Entra Id Connect is installed and synchronizing users from on-premises AD to Entra ID. Linux client is joined to Entra ID via Himmelblau. Kerberos utilities (e.g., mit-krb5 ) are installed on the Linux client. Network connectivity between the Linux client and on-prem AD domain controllers. Administrative privileges in both on-prem AD and Entra ID. Step 1: Configure Microsoft Entra Kerberos Server Object Install the AzureADHybridAuthenticationManagement PowerShell module on a Windows machine with AD access: Install-Module -Name AzureADHybridAuthenticationManagement -AllowClobber Create the Kerberos server object: # Specify the on-premises Active Directory domain. A new Azure AD # Kerberos Server object will be created in this Active Directory domain. $domain = $env:USERDNSDOMAIN # Enter a UPN of an Azure Active Directory global administrator $userPrincipalName = \"administrator@contoso.onmicrosoft.com\" # Enter a domain administrator username and password. $domainCred = Get-Credential # Create the new Azure AD Kerberos Server object in Active Directory # and then publish it to Azure Active Directory. # Open an interactive sign-in prompt with given username to access the Azure AD. Set-AzureADKerberosServer -Domain $domain -UserPrincipalName $userPrincipalName -DomainCredential $domainCred Verify that the Kerberos server RODC object was created successfully. Get-AzureADKerberosServer -Domain $domain -UserPrincipalName $userPrincipalName Step 2: Configure Kerberos on the Linux Client Edit the Kerberos configuration file ( /etc/krb5.conf ): [libdefaults] default_realm = EXAMPLE.COM dns_lookup_realm = false dns_lookup_kdc = false [realms] EXAMPLE.COM = { kdc = dc1.example.com kdc = dc2.example.com admin_server = dc1.example.com } [domain_realm] .example.com = EXAMPLE.COM example.com = EXAMPLE.COM Replace EXAMPLE.COM with your AD domain in uppercase. Replace example.com with your AD domain in lowercase. Replace dc1.example.com and dc2.example.com with FQDNs of your domain controllers. Verify that time synchronization between the Linux client and the domain controllers is accurate. Step 3: Validate the Configuration on Linux Devices After configuring the policies, validate that Linux devices can obtain Kerberos tickets: Log Out and Log In : On the Linux device, log out and then log back in to initiate the authentication process. Check Kerberos Tickets : Open a terminal and run: klist You should see a valid Kerberos ticket listed, indicating successful authentication.","title":"Cloud Kerberos Trust for Linux"},{"location":"advanced/Cloud-Kerberos-Trust-for-Linux/#cloud-kerberos-trust-setup-for-entra-id-joined-linux-devices","text":"This guide outlines the steps to configure Cloud Kerberos Trust between Microsoft Entra ID (formerly Azure AD) and an on-premises Active Directory (AD) for Linux devices joined to Entra ID using Himmelblau.","title":"Cloud Kerberos Trust Setup for Entra ID Joined Linux Devices"},{"location":"advanced/Cloud-Kerberos-Trust-for-Linux/#prerequisites","text":"Microsoft Entra ID is configured. On-premises Active Directory is operational. Entra Id Connect is installed and synchronizing users from on-premises AD to Entra ID. Linux client is joined to Entra ID via Himmelblau. Kerberos utilities (e.g., mit-krb5 ) are installed on the Linux client. Network connectivity between the Linux client and on-prem AD domain controllers. Administrative privileges in both on-prem AD and Entra ID.","title":"Prerequisites"},{"location":"advanced/Cloud-Kerberos-Trust-for-Linux/#step-1-configure-microsoft-entra-kerberos-server-object","text":"Install the AzureADHybridAuthenticationManagement PowerShell module on a Windows machine with AD access: Install-Module -Name AzureADHybridAuthenticationManagement -AllowClobber Create the Kerberos server object: # Specify the on-premises Active Directory domain. A new Azure AD # Kerberos Server object will be created in this Active Directory domain. $domain = $env:USERDNSDOMAIN # Enter a UPN of an Azure Active Directory global administrator $userPrincipalName = \"administrator@contoso.onmicrosoft.com\" # Enter a domain administrator username and password. $domainCred = Get-Credential # Create the new Azure AD Kerberos Server object in Active Directory # and then publish it to Azure Active Directory. # Open an interactive sign-in prompt with given username to access the Azure AD. Set-AzureADKerberosServer -Domain $domain -UserPrincipalName $userPrincipalName -DomainCredential $domainCred Verify that the Kerberos server RODC object was created successfully. Get-AzureADKerberosServer -Domain $domain -UserPrincipalName $userPrincipalName","title":"Step 1: Configure Microsoft Entra Kerberos Server Object"},{"location":"advanced/Cloud-Kerberos-Trust-for-Linux/#step-2-configure-kerberos-on-the-linux-client","text":"Edit the Kerberos configuration file ( /etc/krb5.conf ): [libdefaults] default_realm = EXAMPLE.COM dns_lookup_realm = false dns_lookup_kdc = false [realms] EXAMPLE.COM = { kdc = dc1.example.com kdc = dc2.example.com admin_server = dc1.example.com } [domain_realm] .example.com = EXAMPLE.COM example.com = EXAMPLE.COM Replace EXAMPLE.COM with your AD domain in uppercase. Replace example.com with your AD domain in lowercase. Replace dc1.example.com and dc2.example.com with FQDNs of your domain controllers. Verify that time synchronization between the Linux client and the domain controllers is accurate.","title":"Step 2: Configure Kerberos on the Linux Client"},{"location":"advanced/Cloud-Kerberos-Trust-for-Linux/#step-3-validate-the-configuration-on-linux-devices","text":"After configuring the policies, validate that Linux devices can obtain Kerberos tickets: Log Out and Log In : On the Linux device, log out and then log back in to initiate the authentication process. Check Kerberos Tickets : Open a terminal and run: klist You should see a valid Kerberos ticket listed, indicating successful authentication.","title":"Step 3: Validate the Configuration on Linux Devices"},{"location":"advanced/Configuring-Unix-Attribute-Synchronization-with-Azure-Entra-ID-Using-Microsoft-Entra-Connect-Sync/","text":"Overview This guide explains how to configure Microsoft Entra Connect Sync to synchronize Unix attributes ( uidNumber , gidNumber , loginShell , unixHomeDirectory , etc.) from an on-premises Active Directory to an existing Azure Entra ID instance. This is essential for Linux authentication solutions like Himmelblau that rely on Unix attributes stored in AD. This guide assumes that Microsoft Entra Connect is already installed and configured. If not, follow the instructions in this wiki to configure Microsoft Entra Connect. Prerequisites A Windows Server with Active Directory Domain Services (AD DS) installed and configured. A configured Active Directory domain with Unix attributes ( uidNumber , gidNumber , unixHomeDirectory , loginShell , etc.) assigned to users and groups. An Azure Entra ID tenant. Microsoft Entra Connect Sync installed on a domain-joined Windows Server. Step-by-Step Configuration 1. Open Microsoft Entra Connect Sync Launch Microsoft Entra Connect Sync from the Start Menu . Click \"Configure\" to begin. 2. Customize Synchronization Options Select \"Customize synchronization options\" and click Next . 3. Connect to Microsoft Entra ID Enter your Azure Entra ID administrator credentials (Global Admin or Hybrid Identity Admin). Sign in when prompted. 4. Connect to Active Directory Verify that the on-premises Active Directory domain (forest) is connected. Click Next . 5. Configure Domain and OU Filtering Choose whether to sync all domains and OUs or only specific OUs. Click Next . 6. Enable Directory Extension Attribute Sync Ensure \"Directory extension attribute sync\" is checked . Click Next . 7. Select Unix Attributes for Synchronization In the Directory Extensions step, select the following attributes: uidNumber (user) gidNumber (user) (the user's primary group attribute) gidNumber (group) loginShell (user) unixHomeDirectory (user) gecos (user) (optional, for additional Unix user details) Click Next . 8. Configure and Apply Settings Click Next to save and apply the synchronization settings. Wait for the configuration to complete. 9. Verify Configuration Completion Once the setup is completed, you\u2019ll see a confirmation message. Click Exit . 10. Validate Synchronization After the setup: Open the Microsoft Entra Admin Center . Go to Hybrid Management \u2192 Microsoft Entra Connect . Check the sync status and ensure that users have their Unix attributes synchronized.","title":"Configuring Unix Attribute Synchronization with Azure Entra ID Using Microsoft Entra Connect Sync"},{"location":"advanced/Configuring-Unix-Attribute-Synchronization-with-Azure-Entra-ID-Using-Microsoft-Entra-Connect-Sync/#overview","text":"This guide explains how to configure Microsoft Entra Connect Sync to synchronize Unix attributes ( uidNumber , gidNumber , loginShell , unixHomeDirectory , etc.) from an on-premises Active Directory to an existing Azure Entra ID instance. This is essential for Linux authentication solutions like Himmelblau that rely on Unix attributes stored in AD. This guide assumes that Microsoft Entra Connect is already installed and configured. If not, follow the instructions in this wiki to configure Microsoft Entra Connect.","title":"Overview"},{"location":"advanced/Configuring-Unix-Attribute-Synchronization-with-Azure-Entra-ID-Using-Microsoft-Entra-Connect-Sync/#prerequisites","text":"A Windows Server with Active Directory Domain Services (AD DS) installed and configured. A configured Active Directory domain with Unix attributes ( uidNumber , gidNumber , unixHomeDirectory , loginShell , etc.) assigned to users and groups. An Azure Entra ID tenant. Microsoft Entra Connect Sync installed on a domain-joined Windows Server.","title":"Prerequisites"},{"location":"advanced/Configuring-Unix-Attribute-Synchronization-with-Azure-Entra-ID-Using-Microsoft-Entra-Connect-Sync/#step-by-step-configuration","text":"","title":"Step-by-Step Configuration"},{"location":"advanced/Configuring-Unix-Attribute-Synchronization-with-Azure-Entra-ID-Using-Microsoft-Entra-Connect-Sync/#1-open-microsoft-entra-connect-sync","text":"Launch Microsoft Entra Connect Sync from the Start Menu . Click \"Configure\" to begin.","title":"1. Open Microsoft Entra Connect Sync"},{"location":"advanced/Configuring-Unix-Attribute-Synchronization-with-Azure-Entra-ID-Using-Microsoft-Entra-Connect-Sync/#2-customize-synchronization-options","text":"Select \"Customize synchronization options\" and click Next .","title":"2. Customize Synchronization Options"},{"location":"advanced/Configuring-Unix-Attribute-Synchronization-with-Azure-Entra-ID-Using-Microsoft-Entra-Connect-Sync/#3-connect-to-microsoft-entra-id","text":"Enter your Azure Entra ID administrator credentials (Global Admin or Hybrid Identity Admin). Sign in when prompted.","title":"3. Connect to Microsoft Entra ID"},{"location":"advanced/Configuring-Unix-Attribute-Synchronization-with-Azure-Entra-ID-Using-Microsoft-Entra-Connect-Sync/#4-connect-to-active-directory","text":"Verify that the on-premises Active Directory domain (forest) is connected. Click Next .","title":"4. Connect to Active Directory"},{"location":"advanced/Configuring-Unix-Attribute-Synchronization-with-Azure-Entra-ID-Using-Microsoft-Entra-Connect-Sync/#5-configure-domain-and-ou-filtering","text":"Choose whether to sync all domains and OUs or only specific OUs. Click Next .","title":"5. Configure Domain and OU Filtering"},{"location":"advanced/Configuring-Unix-Attribute-Synchronization-with-Azure-Entra-ID-Using-Microsoft-Entra-Connect-Sync/#6-enable-directory-extension-attribute-sync","text":"Ensure \"Directory extension attribute sync\" is checked . Click Next .","title":"6. Enable Directory Extension Attribute Sync"},{"location":"advanced/Configuring-Unix-Attribute-Synchronization-with-Azure-Entra-ID-Using-Microsoft-Entra-Connect-Sync/#7-select-unix-attributes-for-synchronization","text":"In the Directory Extensions step, select the following attributes: uidNumber (user) gidNumber (user) (the user's primary group attribute) gidNumber (group) loginShell (user) unixHomeDirectory (user) gecos (user) (optional, for additional Unix user details) Click Next .","title":"7. Select Unix Attributes for Synchronization"},{"location":"advanced/Configuring-Unix-Attribute-Synchronization-with-Azure-Entra-ID-Using-Microsoft-Entra-Connect-Sync/#8-configure-and-apply-settings","text":"Click Next to save and apply the synchronization settings. Wait for the configuration to complete.","title":"8. Configure and Apply Settings"},{"location":"advanced/Configuring-Unix-Attribute-Synchronization-with-Azure-Entra-ID-Using-Microsoft-Entra-Connect-Sync/#9-verify-configuration-completion","text":"Once the setup is completed, you\u2019ll see a confirmation message. Click Exit .","title":"9. Verify Configuration Completion"},{"location":"advanced/Configuring-Unix-Attribute-Synchronization-with-Azure-Entra-ID-Using-Microsoft-Entra-Connect-Sync/#10-validate-synchronization","text":"After the setup: Open the Microsoft Entra Admin Center . Go to Hybrid Management \u2192 Microsoft Entra Connect . Check the sync status and ensure that users have their Unix attributes synchronized.","title":"10. Validate Synchronization"},{"location":"advanced/Creating-an-Entra-ID-Application-for-Himmelblau-GroupMember.Read.All-Permissions/","text":"Overview Himmelblau requires additional API permissions to read group names and extended attributes such as a groups' gidNumber (which is essential for RFC2307 attribute ID mapping). The following instructions guide you through registering an Azure Entra ID application, assigning it permissions, and configuring Himmelblau to use either delegated or confidential client authentication. With the default configuration, Himmelblau will attempt to resolve group memberships by masquerading as the Edge browser with delegated access , but this doesn't work in every tenant, and has the limitation of only resolving group memberships after each user has authenticated. Note: - If you set up confidential client credentials (client secret or certificate) using aad-tool cred , you do not need to specify an app_id in himmelblau.conf . - If you choose delegated access , you must set an app_id in your configuration. 1. Register a New Application in Azure Entra ID Navigate to the Azure Entra ID portal . In the left-hand menu, select App registrations . Click New registration . Enter a Name for the application (e.g., Himmelblau ). Under Supported account types , choose Accounts in this organizational directory only . Under Redirect URI , choose Public client/native (mobile & desktop) for the platform and enter himmelblau://Himmelblau.EntraId.BrokerPlugin for the URI. Click Register . 2. Assign API Permissions In the newly created application, navigate to API permissions . Click Add a permission . Select Microsoft Graph . If utilizing Confidential Client Credentials (Option A below) choose Application permissions , otherwise choose Delegated permissions (Option B). Search for GroupMember.Read.All and select it. Click Add permissions . Click Grant admin consent to approve these permissions for your tenant. 3. Obtain the Application ID Go to Overview in the application\u2019s page. Copy the Application (client) ID . This value will be used in Himmelblau\u2019s configuration. 4. Configure Authentication in Himmelblau You have two main options for enumerating users and group memberships: Option A: Using Confidential Client Credentials (Recommended) This method stores a client secret or client certificate securely in Himmelblau\u2019s encrypted cache and removes the need to specify an app_id in himmelblau.conf . Store a client secret aad-tool cred secret --client-id <CLIENT_ID> --domain <DOMAIN> --secret <SECRET_VALUE> In the Entra ID portal, under Certificates & secrets , create a new Client secret . Copy the Value immediately (you won\u2019t see it again) and use it with the above command. Or set up a client certificate aad-tool cred cert --client-id <CLIENT_ID> --domain <DOMAIN> --valid-days 365 --cert-out /tmp/my-cert.crt Upload /tmp/my-cert.crt in the Entra ID portal under Certificates & secrets > Certificates . The private key never leaves your TPM or software HSM. Note: These credentials expire, and you'll need to repeat these steps each time the credentials expire. Option B: Using Delegated Authentication If you do not configure confidential client credentials, add your application ID to himmelblau.conf for delegated authentication. [example.com] app_id = 98fa618b-e5d2-4697-b0fd-fe3ec5eecdd3 Replace with your actual Application (client) ID found in the app\u2019s Overview page. Note: This method prevents the enumeration of rfc2307 attributes and group memberships until after each user authenticates. Utilizing the aad-tool enumerate command can improve attribute resolution, but will need to be performed each time a new user is added to the directory (or whenever their posix attributes are added/modified). 5. Restart Himmelblau Services To apply changes, restart Himmelblau: sudo systemctl restart himmelblaud sudo systemctl restart himmelblaud-tasks 6. (Optional) Pre-cache UID/GID Mappings You can optionally pre-fetch all users and groups with RFC2307 attributes: aad-tool enumerate This avoids lookups being triggered on first login. 7. Managing Credentials List stored credentials: aad-tool cred list --domain <DOMAIN> Remove credentials if needed: aad-tool cred delete --domain <DOMAIN> Conclusion By following these steps, Himmelblau will be able to retrieve group information necessary for accurate ID mapping using Entra ID. Ensure that the application has the necessary permissions and is correctly configured in himmelblau.conf for seamless integration.","title":"Creating an Entra ID Application for Himmelblau GroupMember.Read.All Permissions"},{"location":"advanced/Creating-an-Entra-ID-Application-for-Himmelblau-GroupMember.Read.All-Permissions/#overview","text":"Himmelblau requires additional API permissions to read group names and extended attributes such as a groups' gidNumber (which is essential for RFC2307 attribute ID mapping). The following instructions guide you through registering an Azure Entra ID application, assigning it permissions, and configuring Himmelblau to use either delegated or confidential client authentication. With the default configuration, Himmelblau will attempt to resolve group memberships by masquerading as the Edge browser with delegated access , but this doesn't work in every tenant, and has the limitation of only resolving group memberships after each user has authenticated. Note: - If you set up confidential client credentials (client secret or certificate) using aad-tool cred , you do not need to specify an app_id in himmelblau.conf . - If you choose delegated access , you must set an app_id in your configuration.","title":"Overview"},{"location":"advanced/Creating-an-Entra-ID-Application-for-Himmelblau-GroupMember.Read.All-Permissions/#1-register-a-new-application-in-azure-entra-id","text":"Navigate to the Azure Entra ID portal . In the left-hand menu, select App registrations . Click New registration . Enter a Name for the application (e.g., Himmelblau ). Under Supported account types , choose Accounts in this organizational directory only . Under Redirect URI , choose Public client/native (mobile & desktop) for the platform and enter himmelblau://Himmelblau.EntraId.BrokerPlugin for the URI. Click Register .","title":"1. Register a New Application in Azure Entra ID"},{"location":"advanced/Creating-an-Entra-ID-Application-for-Himmelblau-GroupMember.Read.All-Permissions/#2-assign-api-permissions","text":"In the newly created application, navigate to API permissions . Click Add a permission . Select Microsoft Graph . If utilizing Confidential Client Credentials (Option A below) choose Application permissions , otherwise choose Delegated permissions (Option B). Search for GroupMember.Read.All and select it. Click Add permissions . Click Grant admin consent to approve these permissions for your tenant.","title":"2. Assign API Permissions"},{"location":"advanced/Creating-an-Entra-ID-Application-for-Himmelblau-GroupMember.Read.All-Permissions/#3-obtain-the-application-id","text":"Go to Overview in the application\u2019s page. Copy the Application (client) ID . This value will be used in Himmelblau\u2019s configuration.","title":"3. Obtain the Application ID"},{"location":"advanced/Creating-an-Entra-ID-Application-for-Himmelblau-GroupMember.Read.All-Permissions/#4-configure-authentication-in-himmelblau","text":"You have two main options for enumerating users and group memberships:","title":"4. Configure Authentication in Himmelblau"},{"location":"advanced/Creating-an-Entra-ID-Application-for-Himmelblau-GroupMember.Read.All-Permissions/#option-a-using-confidential-client-credentials-recommended","text":"This method stores a client secret or client certificate securely in Himmelblau\u2019s encrypted cache and removes the need to specify an app_id in himmelblau.conf .","title":"Option A: Using Confidential Client Credentials (Recommended)"},{"location":"advanced/Creating-an-Entra-ID-Application-for-Himmelblau-GroupMember.Read.All-Permissions/#store-a-client-secret","text":"aad-tool cred secret --client-id <CLIENT_ID> --domain <DOMAIN> --secret <SECRET_VALUE> In the Entra ID portal, under Certificates & secrets , create a new Client secret . Copy the Value immediately (you won\u2019t see it again) and use it with the above command.","title":"Store a client secret"},{"location":"advanced/Creating-an-Entra-ID-Application-for-Himmelblau-GroupMember.Read.All-Permissions/#or-set-up-a-client-certificate","text":"aad-tool cred cert --client-id <CLIENT_ID> --domain <DOMAIN> --valid-days 365 --cert-out /tmp/my-cert.crt Upload /tmp/my-cert.crt in the Entra ID portal under Certificates & secrets > Certificates . The private key never leaves your TPM or software HSM. Note: These credentials expire, and you'll need to repeat these steps each time the credentials expire.","title":"Or set up a client certificate"},{"location":"advanced/Creating-an-Entra-ID-Application-for-Himmelblau-GroupMember.Read.All-Permissions/#option-b-using-delegated-authentication","text":"If you do not configure confidential client credentials, add your application ID to himmelblau.conf for delegated authentication. [example.com] app_id = 98fa618b-e5d2-4697-b0fd-fe3ec5eecdd3 Replace with your actual Application (client) ID found in the app\u2019s Overview page. Note: This method prevents the enumeration of rfc2307 attributes and group memberships until after each user authenticates. Utilizing the aad-tool enumerate command can improve attribute resolution, but will need to be performed each time a new user is added to the directory (or whenever their posix attributes are added/modified).","title":"Option B: Using Delegated Authentication"},{"location":"advanced/Creating-an-Entra-ID-Application-for-Himmelblau-GroupMember.Read.All-Permissions/#5-restart-himmelblau-services","text":"To apply changes, restart Himmelblau: sudo systemctl restart himmelblaud sudo systemctl restart himmelblaud-tasks","title":"5. Restart Himmelblau Services"},{"location":"advanced/Creating-an-Entra-ID-Application-for-Himmelblau-GroupMember.Read.All-Permissions/#6-optional-pre-cache-uidgid-mappings","text":"You can optionally pre-fetch all users and groups with RFC2307 attributes: aad-tool enumerate This avoids lookups being triggered on first login.","title":"6. (Optional) Pre-cache UID/GID Mappings"},{"location":"advanced/Creating-an-Entra-ID-Application-for-Himmelblau-GroupMember.Read.All-Permissions/#7-managing-credentials","text":"List stored credentials: aad-tool cred list --domain <DOMAIN> Remove credentials if needed: aad-tool cred delete --domain <DOMAIN>","title":"7. Managing Credentials"},{"location":"advanced/Creating-an-Entra-ID-Application-for-Himmelblau-GroupMember.Read.All-Permissions/#conclusion","text":"By following these steps, Himmelblau will be able to retrieve group information necessary for accurate ID mapping using Entra ID. Ensure that the application has the necessary permissions and is correctly configured in himmelblau.conf for seamless integration.","title":"Conclusion"},{"location":"advanced/Design/","text":"Design Principles Adherence to Microsoft Specifications and Windows Behavior While the project aims to align with Microsoft specifications where feasible, our primary guiding principle is adherence to actual Windows behavior. This approach ensures compatibility and interoperability within Microsoft's authentication ecosystem while accommodating any deviations or inaccuracies found in the specifications. Interaction Diagrams Since we try to adhere to Windows behavior, it's helpful to review Microsoft design flows which explain those behaviors, such as How it works: Device registration and Primary Refresh Token Issuance . These flows are similar to the behavior of this project, but project specific design flows are provided here for clarity. Device Enrollment A: Enrollment is first initiated by authenticating to the https://enrollment.manage.microsoft.com resource. This is accomplished using the functions acquire_token_by_username_password_for_device_enrollment() , initiate_device_flow_for_device_enrollment() paired with acquire_token_by_device_flow() , or initiate_acquire_token_by_mfa_flow_for_device_enrollment() paired with acquire_token_by_mfa_flow() . The UserToken from the response is then provided in a call to enroll_device() . B: The enroll_device() function communicates with the TPM and creates 2 RSA keys. One will be used as the transport key, and the other will be used to create a Certificate Signing Request (CSR). The source for this request is found in src/auth.rs within the BrokerClientApplication struct implementation. C: enroll_device() sends a GET request to https://enterpriseregistration.windows.net requesting a list of available services. This request is defined in [MS-DRS] Section 3.1 and [MS-DVRD] Section 4.3 . The source for this request is found in src/discovery.rs . D: The enroll_device_internal() function processes the public transport key by generating a BCRYPT_RSAKEY_BLOB , which is then encoded in base64 format. E: The encoded transport key blob is subsequently included in the enrollment request payload, along with the Certificate Signing Request (CSR), which is also base64 encoded. These, included with the enrollment attributes passed to enroll_device() , are sent to the Azure DRS service for enrollment. The DRS service validates the access token received in A , creates a device id, then generates and signs a device certificate as requested. The device certificate is returned to the client. F: The device certificate is associated with the transport key in the TPM. MDM enrollment via Intune was implemented in Himmelblau 1.0. PRT Issuance via Username/Password A: The logon UI passes the UPN and password to acquire_user_prt_by_username_password() . B: build_jwt_by_username_password() gets a nonce from Microsoft Entra ID. C: build_jwt_by_username_password() constructs the authentication request with the user\u2019s credentials, nonce, and a scope, and signs the request with the Device key. acquire_user_prt_jwt() sends the request to Microsoft Entra ID. D: Microsoft Entra ID validates the user credentials, the nonce, and device signature, verifies that the device is valid in the tenant and issues the encrypted PRT. Along with the PRT, Microsoft Entra ID also issues a symmetric key, called the Session key encrypted by Microsoft Entra ID using the Transport key. In addition, the Session key is also embedded in the PRT. This Session key acts as the Proof-of-possession (PoP) key for subsequent requests with the PRT. Up to two Kerberos TGTs are embeded in the PRT, labeled tgt_ad and tgt_cloud . The first is an on-prem TGT (if configured), while the second is an Azure cloud TGT. E: acquire_user_prt_by_username_password() encrypts the PRT using the Transport key and returns the encrypted blob. exchange_prt_for_access_token() can then be called to obtain an access token for the user.","title":"Design Principles"},{"location":"advanced/Design/#design-principles","text":"","title":"Design Principles"},{"location":"advanced/Design/#adherence-to-microsoft-specifications-and-windows-behavior","text":"While the project aims to align with Microsoft specifications where feasible, our primary guiding principle is adherence to actual Windows behavior. This approach ensures compatibility and interoperability within Microsoft's authentication ecosystem while accommodating any deviations or inaccuracies found in the specifications.","title":"Adherence to Microsoft Specifications and Windows Behavior"},{"location":"advanced/Design/#interaction-diagrams","text":"Since we try to adhere to Windows behavior, it's helpful to review Microsoft design flows which explain those behaviors, such as How it works: Device registration and Primary Refresh Token Issuance . These flows are similar to the behavior of this project, but project specific design flows are provided here for clarity.","title":"Interaction Diagrams"},{"location":"advanced/Design/#device-enrollment","text":"A: Enrollment is first initiated by authenticating to the https://enrollment.manage.microsoft.com resource. This is accomplished using the functions acquire_token_by_username_password_for_device_enrollment() , initiate_device_flow_for_device_enrollment() paired with acquire_token_by_device_flow() , or initiate_acquire_token_by_mfa_flow_for_device_enrollment() paired with acquire_token_by_mfa_flow() . The UserToken from the response is then provided in a call to enroll_device() . B: The enroll_device() function communicates with the TPM and creates 2 RSA keys. One will be used as the transport key, and the other will be used to create a Certificate Signing Request (CSR). The source for this request is found in src/auth.rs within the BrokerClientApplication struct implementation. C: enroll_device() sends a GET request to https://enterpriseregistration.windows.net requesting a list of available services. This request is defined in [MS-DRS] Section 3.1 and [MS-DVRD] Section 4.3 . The source for this request is found in src/discovery.rs . D: The enroll_device_internal() function processes the public transport key by generating a BCRYPT_RSAKEY_BLOB , which is then encoded in base64 format. E: The encoded transport key blob is subsequently included in the enrollment request payload, along with the Certificate Signing Request (CSR), which is also base64 encoded. These, included with the enrollment attributes passed to enroll_device() , are sent to the Azure DRS service for enrollment. The DRS service validates the access token received in A , creates a device id, then generates and signs a device certificate as requested. The device certificate is returned to the client. F: The device certificate is associated with the transport key in the TPM. MDM enrollment via Intune was implemented in Himmelblau 1.0.","title":"Device Enrollment"},{"location":"advanced/Design/#prt-issuance-via-usernamepassword","text":"A: The logon UI passes the UPN and password to acquire_user_prt_by_username_password() . B: build_jwt_by_username_password() gets a nonce from Microsoft Entra ID. C: build_jwt_by_username_password() constructs the authentication request with the user\u2019s credentials, nonce, and a scope, and signs the request with the Device key. acquire_user_prt_jwt() sends the request to Microsoft Entra ID. D: Microsoft Entra ID validates the user credentials, the nonce, and device signature, verifies that the device is valid in the tenant and issues the encrypted PRT. Along with the PRT, Microsoft Entra ID also issues a symmetric key, called the Session key encrypted by Microsoft Entra ID using the Transport key. In addition, the Session key is also embedded in the PRT. This Session key acts as the Proof-of-possession (PoP) key for subsequent requests with the PRT. Up to two Kerberos TGTs are embeded in the PRT, labeled tgt_ad and tgt_cloud . The first is an on-prem TGT (if configured), while the second is an Azure cloud TGT. E: acquire_user_prt_by_username_password() encrypts the PRT using the Transport key and returns the encrypted blob. exchange_prt_for_access_token() can then be called to obtain an access token for the user.","title":"PRT Issuance via Username/Password"},{"location":"advanced/Enabling-the-Himmelblau-QR-Greeter-gnome%E2%80%90shell-Extension/","text":"Download and Install the Extension Package Download the appropriate package for your distribution The package is called himmelblau-qr-greeter . Follow your distribution\u2019s instructions for installing system packages. Enable the Extension for the GDM User Since the extension runs on the GDM (login) screen, you must enable it as the gdm user. Run the following commands: Open a shell as the gdm user: sudo machinectl shell gdm@ /bin/bash Enable the extension for GDM: gsettings set org.gnome.shell enabled-extensions \"['qr-greeter@himmelblau-idm.org']\" Exit the shell: exit Restart GDM To apply the changes, restart GDM: sudo systemctl restart gdm3 After these steps, the Himmelblau QR Greeter extension will be active on your login and lock screens.","title":"Enabling the Himmelblau QR Greeter gnome\u2010shell Extension"},{"location":"advanced/MS-specs-which-Himmelblau-uses/","text":"This page is intended as a place to gather all the MS specification documents that Himmelblau implements, as well as comments about the accuracy of the specs. [MS-OAPX] : OAuth 2.0 Protocol Extensions Used in the MSAL PublicClientApplication for general authentication. [MS-OAPXBC] : OAuth 2.0 Protocol Extensions for Broker Clients Used in the MSAL BrokerClientApplication for PRT requests. [MS-DVRJ] : Device Registration Join Protocol Sections 3.1.5.1.1.1 and 3.1.5.1.1.2 are mostly accurate and used in [MS-DRS] Section 2.1 . [MS-DVRE] : Device Registration Enrollment Protocol This protocol appears to be used by the DRS service in Azure to enroll the client device. Section 2.3.3 Alt-Security-Identities matches the device object which is created within the directory. The client does not use this protocol, but is useful as a reference. [MS-DVRD] : Device Registration Discovery Protocol Accurate, but missing many services, see [MS-DRS] Section 3.1 . [MS-KPP] : Key Provisioning Protocol This is used by MSAL to provision a Windows Hello for Business key. The process for requesting a PRT using that key does not appear to be document (although MSAL copies Windows behavior here to request the PRT).","title":"MS specs which Himmelblau uses"},{"location":"advanced/Syncing-Active-Directory-with-Azure-Entra-ID/","text":"3. Install and Configure Microsoft Entra Connect Download Microsoft Entra Connect from Microsoft: https://www.microsoft.com/en-us/download/details.aspx?id=47594 Run the installer on your AD domain controller or another dedicated server. Choose \"Custom installation\" (recommended for better control). Connect to Azure Entra ID using Global Admin credentials . Connect to Active Directory : Enter your AD DS credentials (Enterprise Admin). It should verify and list your domain. Choose Sync Options : If you want password hash synchronization (PHS), select it. If using Pass-through Authentication (PTA) or Federation, configure as needed. Select \"Start Synchronization\" and finish setup.","title":"Syncing Active Directory with Azure Entra ID"},{"location":"advanced/Syncing-Active-Directory-with-Azure-Entra-ID/#3-install-and-configure-microsoft-entra-connect","text":"Download Microsoft Entra Connect from Microsoft: https://www.microsoft.com/en-us/download/details.aspx?id=47594 Run the installer on your AD domain controller or another dedicated server. Choose \"Custom installation\" (recommended for better control). Connect to Azure Entra ID using Global Admin credentials . Connect to Active Directory : Enter your AD DS credentials (Enterprise Admin). It should verify and list your domain. Choose Sync Options : If you want password hash synchronization (PHS), select it. If using Pass-through Authentication (PTA) or Federation, configure as needed. Select \"Start Synchronization\" and finish setup.","title":"3. Install and Configure Microsoft Entra Connect"},{"location":"reference/aad-tool/","text":"NAME aad-tool - Azure Entra ID (AAD) management utility for Himmelblau SYNOPSIS aad-tool <COMMAND> [OPTIONS] DESCRIPTION The aad-tool utility is part of the Himmelblau project, designed to manage and interact with Azure Entra ID through various commands. It allows you to test authentication, manage caches, and check the status of services related to the himmelblaud resolver. SYNOPSIS aad-tool <COMMAND> DESCRIPTION Himmelblau Management Utility Commands: application Manage Entra ID application registrations, including creation, listing, and extension schema configuration auth-test Test authentication of a user via the himmelblaud resolver \"pam\" channel. This does not test that your pam configuration is correct - only that himmelblaud is correctly processing and validating authentications cache-clear Clear or invalidate the himmelblaud resolver cache cache-invalidate (Deprecated) Previously used to mark cache entries as stale for immediate refresh. Now behaves identically to cache-clear and will be removed in a future release configure-pam Configure PAM to use pam_himmelblau cred Manage confidential client credentials for authenticating to Entra ID enumerate Enumerate all users and groups in Entra ID that have rfc2307 attributes, and cache their values locally. This addresses the issue where UID/GID mappings are needed before authentication can succeed, but are normally only retrievable after login user Manage Entra ID user accounts, including POSIX attribute assignment and UID mapping group Manage Entra ID groups, including POSIX attribute assignment and GID mapping idmap Manage the static idmapping cache used to map Entra ID accounts to static UID/GID values. This is useful for migrations from on-prem AD to Entra ID, where existing UID/GID mappings need to be preserved status Check that the himmelblaud daemon is online and able to connect correctly to the himmelblaud server version Show the version of this tool help Print this message or the help of the given subcommand(s) OPTIONS -h , --help Print help SUBCOMMAND aad-tool application add-schema-extensions [ OPTIONS ] --client-id <CLIENT_ID> --schema-app-object-id <SCHEMA_APP_OBJECT_ID> DESCRIPTION Adds a standard set of POSIX-related schema extensions to an existing Entra ID application. This command registers directory extension attributes (e.g., uidNumber , gidNumber , unixHomeDirectory , loginShell , gecos ) on the application specified by --schema-app-object-id . These extensions will be usable on user and/or group objects, as appropriate. The application specified by --schema-app-object-id must already exist in the tenant, and must be identified by its Object ID (not the Client ID). This value is labeled as \"Object ID\" in the Entra Admin Center and corresponds to the id field in Graph API responses. You must also supply a separate --client-id that grants Application.ReadWrite.All permissions to perform the extension registration. If the --name parameter is omitted, the command authenticates as the currently logged-in user via the Himmelblau SSO broker. If the --name parameter is provided, the command attempts to authenticate as the specified Entra ID user. In this case, the command must be run as root to impersonate another user. This command must be run from a device that has already been joined to Entra ID. OPTIONS -d , --debug -D , --name <ACCOUNT_ID> --client-id <CLIENT_ID> --schema-app-object-id <SCHEMA_APP_OBJECT_ID> -h , --help Print help (see a summary with '-h') SUBCOMMAND aad-tool application create [ OPTIONS ] --client-id <CLIENT_ID> --display-name <DISPLAY_NAME> DESCRIPTION Creates a new Entra ID application registration in the current tenant. This command performs a delegated Microsoft Graph API request using an access token acquired via the specified client application ( --client-id ), which must have Application.ReadWrite.All permissions in the tenant. The new application will be created with the provided --display-name . You may specify one or more --redirect-uri options to configure redirect URIs for the application (used for public client authentication). If no redirect URIs are provided, the application will not include any by default. Use the --user-read-write and/or --group-read-write flags to grant the application additional Microsoft Graph API permissions at registration time, including User.ReadWrite.All and Group.ReadWrite.All . NOTE: If you grant these permissions, it is strongly recommended that you restrict access to the application to specific administrators or groups: In the Microsoft Entra admin portal, go to Entra???ID -> Enterprise applications and find your app's entry. 2. Under Properties, set \"Assignment required?\" to Yes. 3. Go to Users and groups, click Add, and assign only the specific users or groups you want to have access. If the --name parameter is omitted, the command authenticates as the currently logged-in user via the Himmelblau SSO broker. If the --name parameter is provided, the command attempts to authenticate as the specified Entra ID user. In this case, the command must be run as root to impersonate another user. This command must be run from a device that has already been joined to Entra ID. OPTIONS -d , --debug -D , --name <ACCOUNT_ID> --client-id <CLIENT_ID> --display-name <DISPLAY_NAME> --redirect-uri <URI> --user-read-write --group-read-write -h , --help Print help (see a summary with '-h') SUBCOMMAND aad-tool application list-schema-extensions [ OPTIONS ] --client-id <CLIENT_ID> --schema-app-object-id <SCHEMA_APP_OBJECT_ID> DESCRIPTION Lists the schema extension attributes registered on an Entra ID application. This command retrieves the directory extension attributes (e.g., uidNumber , gidNumber , etc.) that have been added to the application identified by --schema-app-object-id . The --schema-app-object-id parameter must be the Object ID of the application (not the Client ID), as shown in the Entra Admin Center. This value corresponds to the id field in Microsoft Graph and is required to query extension properties. You must also supply a separate --client-id that grants Application.Read.All or Application.ReadWrite.All permissions in the tenant to perform this query. If the --name parameter is omitted, the command authenticates as the currently logged-in user via the Himmelblau SSO broker. If the --name parameter is provided, the command attempts to authenticate as the specified Entra ID user. In this case, the command must be run as root to impersonate another user. This command must be run from a device that has already been joined to Entra ID. OPTIONS -d , --debug -D , --name <ACCOUNT_ID> --client-id <CLIENT_ID> --schema-app-object-id <SCHEMA_APP_OBJECT_ID> -h , --help Print help (see a summary with '-h') SUBCOMMAND aad-tool application list [ OPTIONS ] --client-id <CLIENT_ID> DESCRIPTION Lists Entra ID application registrations in the current tenant. This command performs a delegated Microsoft Graph API request using an access token acquired via the specified client application ( --client-id ), which must have Application.Read.All permissions in the tenant. If the --name parameter is omitted, the command authenticates as the currently logged-in user via the Himmelblau SSO broker. If the --name parameter is provided, the command attempts to authenticate as the specified Entra ID user. In this case, the command must be run as root to impersonate another user. This command must be run from a device that has already been joined to Entra ID. OPTIONS -d , --debug -D , --name <ACCOUNT_ID> --client-id <CLIENT_ID> -h , --help Print help (see a summary with '-h') SUBCOMMAND aad-tool auth-test [ OPTIONS ] --name <ACCOUNT_ID> DESCRIPTION Test authentication of a user via the himmelblaud resolver \"pam\" channel. This does not test that your pam configuration is correct - only that himmelblaud is correctly processing and validating authentications OPTIONS -d , --debug -D , --name <ACCOUNT_ID> -h , --help Print help SUBCOMMAND aad-tool cache-clear [ OPTIONS ] DESCRIPTION Clear or invalidate the himmelblaud resolver cache. By default, this marks all cached user and group entries as stale, forcing them to refresh immediately when next used. Specify --enumerate , --idmap , --nss , or --mapped to clear these individual caches as well. Omit all these to clear them all. Use --full to completely purge the user and group cache entries and unjoin the host from Entra ID. This is irreversible. OPTIONS -d , --debug --enumerate Only clear the enumerated users/groups cache --idmap Only clear the idmap cache (alias for --enumerate ) --nss Only clear the nss cache --mapped Only clear the mapped name cache --full Force a full cache wipe and unjoin the host from Entra ID. This is probably not what you want -h , --help Print help (see a summary with '-h') SUBCOMMAND aad-tool cache-invalidate [ OPTIONS ] DESCRIPTION (Deprecated) Previously used to mark cache entries as stale for immediate refresh. Now behaves identically to cache-clear and will be removed in a future release OPTIONS -d , --debug --enumerate --idmap --nss --mapped --full -h , --help Print help SUBCOMMAND aad-tool configure-pam [ OPTIONS ] DESCRIPTION Configure PAM to use pam_himmelblau OPTIONS -d , --debug --really --auth-file <AUTH_FILE> --account-file <ACCOUNT_FILE> --session-file <SESSION_FILE> --password-file <PASSWORD_FILE> -h , --help Print help SUBCOMMAND aad-tool cred cert [ OPTIONS ] --client-id <CLIENT_ID> --domain <DOMAIN> --valid-days <VALID_DAYS> --cert-out <CERT_OUT> DESCRIPTION Generate an RS256 HSM-backed key pair with a self-signed certificate for confidential client authentication. To set this up: In the Entra ID portal, navigate to Azure Active Directory -> App registrations, then open (or create) your application. Under Manage > Certificates & secrets, go to the Certificates tab. Click Upload certificate and select the PEM file generated by this command. Azure will store this cert for authenticating via public key. The private key never leaves your TPM (or SoftHSM). When this cred needs renewed in the future, simple run this command again to replace the expired certificate. Example: aad-tool cred cert --client-id <CLIENT_ID> --valid-days 365 --cert-out /tmp/my-cert.crt OPTIONS -d , --debug --client-id <CLIENT_ID> The Azure AD application (client) ID this certificate is associated with --domain <DOMAIN> The tenant domain this certificate is associated with --valid-days <VALID_DAYS> Number of days the self-signed certificate will be valid --cert-out <CERT_OUT> Path to write the generated PEM certificate file. This is the file you will upload to Entra ID -h , --help Print help (see a summary with '-h') SUBCOMMAND aad-tool cred delete [ OPTIONS ] --domain <DOMAIN> DESCRIPTION Delete confidential client credentials (secret, certificate, or both) This deletes stored confidential client credentials from Himmelblau's encrypted cache. If neither --secret nor --cert is specified, both will be deleted. Example: aad-tool cred delete --domain <DOMAIN> aad-tool cred delete --domain <DOMAIN> --secret aad-tool cred delete --domain <DOMAIN> --cert OPTIONS -d , --debug --domain <DOMAIN> The tenant domain whose creds will be deleted --secret Delete only the client secret (not the certificate) --cert Delete only the client certificate (not the secret) -h , --help Print help (see a summary with '-h') SUBCOMMAND aad-tool cred list [ OPTIONS ] --domain <DOMAIN> DESCRIPTION List the presence of confidential client credentials This checks Himmelblau's encrypted cache to see whether a client secret and/or client certificate exists for the given domain. Example: aad-tool cred list --domain <DOMAIN> OPTIONS -d , --debug --domain <DOMAIN> -h , --help Print help (see a summary with '-h') SUBCOMMAND aad-tool cred secret [ OPTIONS ] --client-id <CLIENT_ID> --domain <DOMAIN> --secret <SECRET> DESCRIPTION Store a client secret for confidential client authentication. To set this up: In the Entra ID portal, navigate to Azure Active Directory -> App registrations, then open (or create) your application. Under Manage > Certificates & secrets, go to the Client secrets tab. Click New client secret, choose an expiry, and click Add. Copy the Value (not Secret ID) immediately. You won't be able to see it again. Use that value with this command to store it in Himmelblau???s encrypted cache. When this cred needs renewed in the future, simple run this command again to replace the expired secret. Example: aad-tool cred secret --client-id <CLIENT_ID> --secret <SECRET_VALUE> OPTIONS -d , --debug --client-id <CLIENT_ID> The Azure AD application (client) ID this secret is associated with --domain <DOMAIN> The tenant domain this secret is associated with --secret <SECRET> The client secret value copied from the Entra ID portal -h , --help Print help (see a summary with '-h') SUBCOMMAND aad-tool enumerate [ OPTIONS ] DESCRIPTION Enumerate all users and groups in Entra ID that have rfc2307 attributes, and cache their values locally. This addresses the issue where UID/GID mappings are needed before authentication can succeed, but are normally only retrievable after login. The --client-id parameter is optional and must refer to a registered Entra ID application with User.Read.All and Group.Read.All permissions. The --name parameter specifies the Entra ID user on whose behalf the token is requested, enabling delegated access through the specified client application. This command can only be executed from an Entra Id enrolled host. OPTIONS -d , --debug -D , --name <ACCOUNT_ID> --client-id <CLIENT_ID> -h , --help Print help (see a summary with '-h') SUBCOMMAND aad-tool group set-posix-attrs [ OPTIONS ] --schema-client-id <SCHEMA_CLIENT_ID> --group-id <GROUP_ID> --gid <GID> DESCRIPTION Sets POSIX-related attributes on a specified Entra ID group object. This command updates the gidNumber attribute on the Entra ID group identified by --group-id , which must be a valid Object ID. You must also provide the --schema-client-id , which identifies the application where the extension properties were registered. This value must be the Client ID of the application used for schema registration. The application associated with --schema-client-id must supply Group.ReadWrite.All permissions in the tenant. If the --name parameter is omitted, the command authenticates as the currently logged-in user via the Himmelblau SSO broker. If the --name parameter is provided, the command must be run as root to impersonate another user. This command must be run from a device that has already been joined to Entra ID. OPTIONS -d , --debug -D , --name <ACCOUNT_ID> --schema-client-id <SCHEMA_CLIENT_ID> --group-id <GROUP_ID> --gid <GID> -h , --help Print help (see a summary with '-h') SUBCOMMAND aad-tool idmap group-add [ OPTIONS ] --name <ACCOUNT_ID> --gid <GID> DESCRIPTION Add a static group mapping to the idmap cache. This maps an Entra ID group (by name) to a fixed GID. This can be used to maintain group identity and membership compatibility after moving to Entra ID OPTIONS -d , --debug -D , --name <ACCOUNT_ID> -g , --gid <GID> -h , --help Print help SUBCOMMAND aad-tool idmap user-add [ OPTIONS ] --name <ACCOUNT_ID> --uid <UID> --gid <GID> DESCRIPTION Add a static user mapping to the idmap cache. This maps an Entra ID user (by UPN or SAM-compatible name) to a fixed UID and primary group GID OPTIONS -d , --debug -D , --name <ACCOUNT_ID> -u , --uid <UID> -g , --gid <GID> -h , --help Print help SUBCOMMAND aad-tool status [ OPTIONS ] DESCRIPTION Check that the himmelblaud daemon is online and able to connect correctly to the himmelblaud server OPTIONS -d , --debug -h , --help Print help SUBCOMMAND aad-tool user set-posix-attrs [ OPTIONS ] --schema-client-id <SCHEMA_CLIENT_ID> --user-id <USER_ID> DESCRIPTION Sets POSIX-related attributes on a specified Entra ID user object. This command updates POSIX attributes ( uidNumber , gidNumber , unixHomeDirectory , loginShell , and gecos ) on the Entra ID user identified by --user-id , which must be a valid Object ID or UPN. You must also provide the --schema-client-id , which identifies the application where the extension properties were registered. This value must be the Client ID of the application used for schema registration. The application associated with --schema-client-id must supply User.ReadWrite.All permissions in the tenant. If the --name parameter is omitted, the command authenticates as the currently logged-in user via the Himmelblau SSO broker. If the --name parameter is provided, the command must be run as root to impersonate another user. This command must be run from a device that has already been joined to Entra ID. OPTIONS -d , --debug -D , --name <ACCOUNT_ID> --schema-client-id <SCHEMA_CLIENT_ID> --user-id <USER_ID> --uid <UID> --gid <GID> --home <HOME> --shell <SHELL> --gecos <GECOS> -h , --help Print help (see a summary with '-h') SEE ALSO himmelblau.conf (5), himmelblaud (8), himmelblaud-tasks (8) AUTHOR David Mulder <dmulder@himmelblau-idm.org>, <dmulder@samba.org>","title":"Aad tool"},{"location":"reference/aad-tool/#name","text":"aad-tool - Azure Entra ID (AAD) management utility for Himmelblau","title":"NAME"},{"location":"reference/aad-tool/#synopsis","text":"aad-tool <COMMAND> [OPTIONS]","title":"SYNOPSIS"},{"location":"reference/aad-tool/#description","text":"The aad-tool utility is part of the Himmelblau project, designed to manage and interact with Azure Entra ID through various commands. It allows you to test authentication, manage caches, and check the status of services related to the himmelblaud resolver.","title":"DESCRIPTION"},{"location":"reference/aad-tool/#synopsis_1","text":"aad-tool <COMMAND>","title":"SYNOPSIS"},{"location":"reference/aad-tool/#description_1","text":"Himmelblau Management Utility","title":"DESCRIPTION"},{"location":"reference/aad-tool/#commands","text":"application Manage Entra ID application registrations, including creation, listing, and extension schema configuration auth-test Test authentication of a user via the himmelblaud resolver \"pam\" channel. This does not test that your pam configuration is correct - only that himmelblaud is correctly processing and validating authentications cache-clear Clear or invalidate the himmelblaud resolver cache cache-invalidate (Deprecated) Previously used to mark cache entries as stale for immediate refresh. Now behaves identically to cache-clear and will be removed in a future release configure-pam Configure PAM to use pam_himmelblau cred Manage confidential client credentials for authenticating to Entra ID enumerate Enumerate all users and groups in Entra ID that have rfc2307 attributes, and cache their values locally. This addresses the issue where UID/GID mappings are needed before authentication can succeed, but are normally only retrievable after login user Manage Entra ID user accounts, including POSIX attribute assignment and UID mapping group Manage Entra ID groups, including POSIX attribute assignment and GID mapping idmap Manage the static idmapping cache used to map Entra ID accounts to static UID/GID values. This is useful for migrations from on-prem AD to Entra ID, where existing UID/GID mappings need to be preserved status Check that the himmelblaud daemon is online and able to connect correctly to the himmelblaud server version Show the version of this tool help Print this message or the help of the given subcommand(s)","title":"Commands:"},{"location":"reference/aad-tool/#options","text":"-h , --help Print help","title":"OPTIONS"},{"location":"reference/aad-tool/#subcommand","text":"aad-tool application add-schema-extensions [ OPTIONS ] --client-id <CLIENT_ID> --schema-app-object-id <SCHEMA_APP_OBJECT_ID>","title":"SUBCOMMAND"},{"location":"reference/aad-tool/#description_2","text":"Adds a standard set of POSIX-related schema extensions to an existing Entra ID application. This command registers directory extension attributes (e.g., uidNumber , gidNumber , unixHomeDirectory , loginShell , gecos ) on the application specified by --schema-app-object-id . These extensions will be usable on user and/or group objects, as appropriate. The application specified by --schema-app-object-id must already exist in the tenant, and must be identified by its Object ID (not the Client ID). This value is labeled as \"Object ID\" in the Entra Admin Center and corresponds to the id field in Graph API responses. You must also supply a separate --client-id that grants Application.ReadWrite.All permissions to perform the extension registration. If the --name parameter is omitted, the command authenticates as the currently logged-in user via the Himmelblau SSO broker. If the --name parameter is provided, the command attempts to authenticate as the specified Entra ID user. In this case, the command must be run as root to impersonate another user. This command must be run from a device that has already been joined to Entra ID.","title":"DESCRIPTION"},{"location":"reference/aad-tool/#options_1","text":"-d , --debug -D , --name <ACCOUNT_ID> --client-id <CLIENT_ID> --schema-app-object-id <SCHEMA_APP_OBJECT_ID> -h , --help Print help (see a summary with '-h')","title":"OPTIONS"},{"location":"reference/aad-tool/#subcommand_1","text":"aad-tool application create [ OPTIONS ] --client-id <CLIENT_ID> --display-name <DISPLAY_NAME>","title":"SUBCOMMAND"},{"location":"reference/aad-tool/#description_3","text":"Creates a new Entra ID application registration in the current tenant. This command performs a delegated Microsoft Graph API request using an access token acquired via the specified client application ( --client-id ), which must have Application.ReadWrite.All permissions in the tenant. The new application will be created with the provided --display-name . You may specify one or more --redirect-uri options to configure redirect URIs for the application (used for public client authentication). If no redirect URIs are provided, the application will not include any by default. Use the --user-read-write and/or --group-read-write flags to grant the application additional Microsoft Graph API permissions at registration time, including User.ReadWrite.All and Group.ReadWrite.All . NOTE: If you grant these permissions, it is strongly recommended that you restrict access to the application to specific administrators or groups: In the Microsoft Entra admin portal, go to Entra???ID -> Enterprise applications and find your app's entry. 2. Under Properties, set \"Assignment required?\" to Yes. 3. Go to Users and groups, click Add, and assign only the specific users or groups you want to have access. If the --name parameter is omitted, the command authenticates as the currently logged-in user via the Himmelblau SSO broker. If the --name parameter is provided, the command attempts to authenticate as the specified Entra ID user. In this case, the command must be run as root to impersonate another user. This command must be run from a device that has already been joined to Entra ID.","title":"DESCRIPTION"},{"location":"reference/aad-tool/#options_2","text":"-d , --debug -D , --name <ACCOUNT_ID> --client-id <CLIENT_ID> --display-name <DISPLAY_NAME> --redirect-uri <URI> --user-read-write --group-read-write -h , --help Print help (see a summary with '-h')","title":"OPTIONS"},{"location":"reference/aad-tool/#subcommand_2","text":"aad-tool application list-schema-extensions [ OPTIONS ] --client-id <CLIENT_ID> --schema-app-object-id <SCHEMA_APP_OBJECT_ID>","title":"SUBCOMMAND"},{"location":"reference/aad-tool/#description_4","text":"Lists the schema extension attributes registered on an Entra ID application. This command retrieves the directory extension attributes (e.g., uidNumber , gidNumber , etc.) that have been added to the application identified by --schema-app-object-id . The --schema-app-object-id parameter must be the Object ID of the application (not the Client ID), as shown in the Entra Admin Center. This value corresponds to the id field in Microsoft Graph and is required to query extension properties. You must also supply a separate --client-id that grants Application.Read.All or Application.ReadWrite.All permissions in the tenant to perform this query. If the --name parameter is omitted, the command authenticates as the currently logged-in user via the Himmelblau SSO broker. If the --name parameter is provided, the command attempts to authenticate as the specified Entra ID user. In this case, the command must be run as root to impersonate another user. This command must be run from a device that has already been joined to Entra ID.","title":"DESCRIPTION"},{"location":"reference/aad-tool/#options_3","text":"-d , --debug -D , --name <ACCOUNT_ID> --client-id <CLIENT_ID> --schema-app-object-id <SCHEMA_APP_OBJECT_ID> -h , --help Print help (see a summary with '-h')","title":"OPTIONS"},{"location":"reference/aad-tool/#subcommand_3","text":"aad-tool application list [ OPTIONS ] --client-id <CLIENT_ID>","title":"SUBCOMMAND"},{"location":"reference/aad-tool/#description_5","text":"Lists Entra ID application registrations in the current tenant. This command performs a delegated Microsoft Graph API request using an access token acquired via the specified client application ( --client-id ), which must have Application.Read.All permissions in the tenant. If the --name parameter is omitted, the command authenticates as the currently logged-in user via the Himmelblau SSO broker. If the --name parameter is provided, the command attempts to authenticate as the specified Entra ID user. In this case, the command must be run as root to impersonate another user. This command must be run from a device that has already been joined to Entra ID.","title":"DESCRIPTION"},{"location":"reference/aad-tool/#options_4","text":"-d , --debug -D , --name <ACCOUNT_ID> --client-id <CLIENT_ID> -h , --help Print help (see a summary with '-h')","title":"OPTIONS"},{"location":"reference/aad-tool/#subcommand_4","text":"aad-tool auth-test [ OPTIONS ] --name <ACCOUNT_ID>","title":"SUBCOMMAND"},{"location":"reference/aad-tool/#description_6","text":"Test authentication of a user via the himmelblaud resolver \"pam\" channel. This does not test that your pam configuration is correct - only that himmelblaud is correctly processing and validating authentications","title":"DESCRIPTION"},{"location":"reference/aad-tool/#options_5","text":"-d , --debug -D , --name <ACCOUNT_ID>","title":"OPTIONS"},{"location":"reference/aad-tool/#-h-help","text":"Print help","title":"-h, --help"},{"location":"reference/aad-tool/#subcommand_5","text":"aad-tool cache-clear [ OPTIONS ]","title":"SUBCOMMAND"},{"location":"reference/aad-tool/#description_7","text":"Clear or invalidate the himmelblaud resolver cache. By default, this marks all cached user and group entries as stale, forcing them to refresh immediately when next used. Specify --enumerate , --idmap , --nss , or --mapped to clear these individual caches as well. Omit all these to clear them all. Use --full to completely purge the user and group cache entries and unjoin the host from Entra ID. This is irreversible.","title":"DESCRIPTION"},{"location":"reference/aad-tool/#options_6","text":"-d , --debug --enumerate Only clear the enumerated users/groups cache --idmap Only clear the idmap cache (alias for --enumerate ) --nss Only clear the nss cache --mapped Only clear the mapped name cache --full Force a full cache wipe and unjoin the host from Entra ID. This is probably not what you want -h , --help Print help (see a summary with '-h')","title":"OPTIONS"},{"location":"reference/aad-tool/#subcommand_6","text":"aad-tool cache-invalidate [ OPTIONS ]","title":"SUBCOMMAND"},{"location":"reference/aad-tool/#description_8","text":"(Deprecated) Previously used to mark cache entries as stale for immediate refresh. Now behaves identically to cache-clear and will be removed in a future release","title":"DESCRIPTION"},{"location":"reference/aad-tool/#options_7","text":"-d , --debug --enumerate --idmap --nss --mapped --full","title":"OPTIONS"},{"location":"reference/aad-tool/#-h-help_1","text":"Print help","title":"-h, --help"},{"location":"reference/aad-tool/#subcommand_7","text":"aad-tool configure-pam [ OPTIONS ]","title":"SUBCOMMAND"},{"location":"reference/aad-tool/#description_9","text":"Configure PAM to use pam_himmelblau","title":"DESCRIPTION"},{"location":"reference/aad-tool/#options_8","text":"-d , --debug --really --auth-file <AUTH_FILE> --account-file <ACCOUNT_FILE> --session-file <SESSION_FILE> --password-file <PASSWORD_FILE>","title":"OPTIONS"},{"location":"reference/aad-tool/#-h-help_2","text":"Print help","title":"-h, --help"},{"location":"reference/aad-tool/#subcommand_8","text":"aad-tool cred cert [ OPTIONS ] --client-id <CLIENT_ID> --domain <DOMAIN> --valid-days <VALID_DAYS> --cert-out <CERT_OUT>","title":"SUBCOMMAND"},{"location":"reference/aad-tool/#description_10","text":"Generate an RS256 HSM-backed key pair with a self-signed certificate for confidential client authentication. To set this up: In the Entra ID portal, navigate to Azure Active Directory -> App registrations, then open (or create) your application. Under Manage > Certificates & secrets, go to the Certificates tab. Click Upload certificate and select the PEM file generated by this command. Azure will store this cert for authenticating via public key. The private key never leaves your TPM (or SoftHSM). When this cred needs renewed in the future, simple run this command again to replace the expired certificate. Example: aad-tool cred cert --client-id <CLIENT_ID> --valid-days 365 --cert-out /tmp/my-cert.crt","title":"DESCRIPTION"},{"location":"reference/aad-tool/#options_9","text":"-d , --debug --client-id <CLIENT_ID> The Azure AD application (client) ID this certificate is associated with --domain <DOMAIN> The tenant domain this certificate is associated with --valid-days <VALID_DAYS> Number of days the self-signed certificate will be valid --cert-out <CERT_OUT> Path to write the generated PEM certificate file. This is the file you will upload to Entra ID -h , --help Print help (see a summary with '-h')","title":"OPTIONS"},{"location":"reference/aad-tool/#subcommand_9","text":"aad-tool cred delete [ OPTIONS ] --domain <DOMAIN>","title":"SUBCOMMAND"},{"location":"reference/aad-tool/#description_11","text":"Delete confidential client credentials (secret, certificate, or both) This deletes stored confidential client credentials from Himmelblau's encrypted cache. If neither --secret nor --cert is specified, both will be deleted. Example: aad-tool cred delete --domain <DOMAIN> aad-tool cred delete --domain <DOMAIN> --secret aad-tool cred delete --domain <DOMAIN> --cert","title":"DESCRIPTION"},{"location":"reference/aad-tool/#options_10","text":"-d , --debug --domain <DOMAIN> The tenant domain whose creds will be deleted --secret Delete only the client secret (not the certificate) --cert Delete only the client certificate (not the secret) -h , --help Print help (see a summary with '-h')","title":"OPTIONS"},{"location":"reference/aad-tool/#subcommand_10","text":"aad-tool cred list [ OPTIONS ] --domain <DOMAIN>","title":"SUBCOMMAND"},{"location":"reference/aad-tool/#description_12","text":"List the presence of confidential client credentials This checks Himmelblau's encrypted cache to see whether a client secret and/or client certificate exists for the given domain. Example: aad-tool cred list --domain <DOMAIN>","title":"DESCRIPTION"},{"location":"reference/aad-tool/#options_11","text":"-d , --debug --domain <DOMAIN> -h , --help Print help (see a summary with '-h')","title":"OPTIONS"},{"location":"reference/aad-tool/#subcommand_11","text":"aad-tool cred secret [ OPTIONS ] --client-id <CLIENT_ID> --domain <DOMAIN> --secret <SECRET>","title":"SUBCOMMAND"},{"location":"reference/aad-tool/#description_13","text":"Store a client secret for confidential client authentication. To set this up: In the Entra ID portal, navigate to Azure Active Directory -> App registrations, then open (or create) your application. Under Manage > Certificates & secrets, go to the Client secrets tab. Click New client secret, choose an expiry, and click Add. Copy the Value (not Secret ID) immediately. You won't be able to see it again. Use that value with this command to store it in Himmelblau???s encrypted cache. When this cred needs renewed in the future, simple run this command again to replace the expired secret. Example: aad-tool cred secret --client-id <CLIENT_ID> --secret <SECRET_VALUE>","title":"DESCRIPTION"},{"location":"reference/aad-tool/#options_12","text":"-d , --debug --client-id <CLIENT_ID> The Azure AD application (client) ID this secret is associated with --domain <DOMAIN> The tenant domain this secret is associated with --secret <SECRET> The client secret value copied from the Entra ID portal -h , --help Print help (see a summary with '-h')","title":"OPTIONS"},{"location":"reference/aad-tool/#subcommand_12","text":"aad-tool enumerate [ OPTIONS ]","title":"SUBCOMMAND"},{"location":"reference/aad-tool/#description_14","text":"Enumerate all users and groups in Entra ID that have rfc2307 attributes, and cache their values locally. This addresses the issue where UID/GID mappings are needed before authentication can succeed, but are normally only retrievable after login. The --client-id parameter is optional and must refer to a registered Entra ID application with User.Read.All and Group.Read.All permissions. The --name parameter specifies the Entra ID user on whose behalf the token is requested, enabling delegated access through the specified client application. This command can only be executed from an Entra Id enrolled host.","title":"DESCRIPTION"},{"location":"reference/aad-tool/#options_13","text":"-d , --debug -D , --name <ACCOUNT_ID> --client-id <CLIENT_ID> -h , --help Print help (see a summary with '-h')","title":"OPTIONS"},{"location":"reference/aad-tool/#subcommand_13","text":"aad-tool group set-posix-attrs [ OPTIONS ] --schema-client-id <SCHEMA_CLIENT_ID> --group-id <GROUP_ID> --gid <GID>","title":"SUBCOMMAND"},{"location":"reference/aad-tool/#description_15","text":"Sets POSIX-related attributes on a specified Entra ID group object. This command updates the gidNumber attribute on the Entra ID group identified by --group-id , which must be a valid Object ID. You must also provide the --schema-client-id , which identifies the application where the extension properties were registered. This value must be the Client ID of the application used for schema registration. The application associated with --schema-client-id must supply Group.ReadWrite.All permissions in the tenant. If the --name parameter is omitted, the command authenticates as the currently logged-in user via the Himmelblau SSO broker. If the --name parameter is provided, the command must be run as root to impersonate another user. This command must be run from a device that has already been joined to Entra ID.","title":"DESCRIPTION"},{"location":"reference/aad-tool/#options_14","text":"-d , --debug -D , --name <ACCOUNT_ID> --schema-client-id <SCHEMA_CLIENT_ID> --group-id <GROUP_ID> --gid <GID> -h , --help Print help (see a summary with '-h')","title":"OPTIONS"},{"location":"reference/aad-tool/#subcommand_14","text":"aad-tool idmap group-add [ OPTIONS ] --name <ACCOUNT_ID> --gid <GID>","title":"SUBCOMMAND"},{"location":"reference/aad-tool/#description_16","text":"Add a static group mapping to the idmap cache. This maps an Entra ID group (by name) to a fixed GID. This can be used to maintain group identity and membership compatibility after moving to Entra ID","title":"DESCRIPTION"},{"location":"reference/aad-tool/#options_15","text":"-d , --debug -D , --name <ACCOUNT_ID> -g , --gid <GID>","title":"OPTIONS"},{"location":"reference/aad-tool/#-h-help_3","text":"Print help","title":"-h, --help"},{"location":"reference/aad-tool/#subcommand_15","text":"aad-tool idmap user-add [ OPTIONS ] --name <ACCOUNT_ID> --uid <UID> --gid <GID>","title":"SUBCOMMAND"},{"location":"reference/aad-tool/#description_17","text":"Add a static user mapping to the idmap cache. This maps an Entra ID user (by UPN or SAM-compatible name) to a fixed UID and primary group GID","title":"DESCRIPTION"},{"location":"reference/aad-tool/#options_16","text":"-d , --debug -D , --name <ACCOUNT_ID> -u , --uid <UID> -g , --gid <GID>","title":"OPTIONS"},{"location":"reference/aad-tool/#-h-help_4","text":"Print help","title":"-h, --help"},{"location":"reference/aad-tool/#subcommand_16","text":"aad-tool status [ OPTIONS ]","title":"SUBCOMMAND"},{"location":"reference/aad-tool/#description_18","text":"Check that the himmelblaud daemon is online and able to connect correctly to the himmelblaud server","title":"DESCRIPTION"},{"location":"reference/aad-tool/#options_17","text":"-d , --debug","title":"OPTIONS"},{"location":"reference/aad-tool/#-h-help_5","text":"Print help","title":"-h, --help"},{"location":"reference/aad-tool/#subcommand_17","text":"aad-tool user set-posix-attrs [ OPTIONS ] --schema-client-id <SCHEMA_CLIENT_ID> --user-id <USER_ID>","title":"SUBCOMMAND"},{"location":"reference/aad-tool/#description_19","text":"Sets POSIX-related attributes on a specified Entra ID user object. This command updates POSIX attributes ( uidNumber , gidNumber , unixHomeDirectory , loginShell , and gecos ) on the Entra ID user identified by --user-id , which must be a valid Object ID or UPN. You must also provide the --schema-client-id , which identifies the application where the extension properties were registered. This value must be the Client ID of the application used for schema registration. The application associated with --schema-client-id must supply User.ReadWrite.All permissions in the tenant. If the --name parameter is omitted, the command authenticates as the currently logged-in user via the Himmelblau SSO broker. If the --name parameter is provided, the command must be run as root to impersonate another user. This command must be run from a device that has already been joined to Entra ID.","title":"DESCRIPTION"},{"location":"reference/aad-tool/#options_18","text":"-d , --debug -D , --name <ACCOUNT_ID> --schema-client-id <SCHEMA_CLIENT_ID> --user-id <USER_ID> --uid <UID> --gid <GID> --home <HOME> --shell <SHELL> --gecos <GECOS> -h , --help Print help (see a summary with '-h')","title":"OPTIONS"},{"location":"reference/aad-tool/#see-also","text":"himmelblau.conf (5), himmelblaud (8), himmelblaud-tasks (8)","title":"SEE ALSO"},{"location":"reference/aad-tool/#author","text":"David Mulder <dmulder@himmelblau-idm.org>, <dmulder@samba.org>","title":"AUTHOR"},{"location":"reference/himmelblau-conf/","text":"NAME himmelblau.conf - Configuration file for Himmelblau, enabling Azure Entra ID authentication on Linux. SYNOPSIS /etc/himmelblau/himmelblau.conf HOW CONFIGURATION CHANGES ARE APPLIED Changes to the configuration file /etc/himmelblau/himmelblau.conf only take effect after restarting the Himmelblau daemons. This includes the himmelblaud daemon, which handles authentication, and the himmelblaud-tasks daemon, which processes related tasks. Restarting the Daemons To apply changes, restart the Himmelblau services using the following systemd commands: EXAMPLES sudo systemctl restart himmelblaud sudo systemctl restart himmelblaud-tasks DESCRIPTION The himmelblau.conf file is the primary configuration file for the Himmelblau authentication module. It defines global and optional settings required for Azure Entra ID-based authentication and device management. FILE FORMAT The file consists of sections headed by a name enclosed in square brackets. Each section contains parameters and their values in the format: parameter = value Lines beginning with a '#' are comments and are ignored by the parser. PARAMETERS [global] This section contains settings that apply globally to all operations of Himmelblau. domains A comma-separated list of primary domains for your Azure Entra ID tenants. This parameter is REQUIRED for successful authentication. If this option is not specified, no users will be permitted to authenticate. The first user to authenticate to each domain will become the owner of the device object in the directory. Specify ONLY the primary domain for each tenant. Specifying multiple custom domains which belong to a single tenant will cause an idmap range overlap and the himmelblaud daemon will NOT start. If multiple domains are specified, you MUST define an idmap_range for each domain to avoid conflicts in user and group ID mappings. Overlapping ID ranges will cause the idmapper to throw a critical error and stop the daemon. This safeguard ensures that two users are not mistakenly mapped to the same UID. EXAMPLES domains = example.com,example2.com [example.com] idmap_range = 5000000-5999999 [example2.com] idmap_range = 6000000-6999999 debug A boolean option that enables debug-level logging. When set to true, debug messages are output to the system journal. EXAMPLES debug = true pam_allow_groups A comma-separated list of Entra Id Users and Groups permitted to access the system. Users should be specified by UPN. Groups MUST be specified using their Object ID GUID. Group names may not be used because these names are not guaranteed to be unique in Entra Id. EXAMPLES pam_allow_groups = f3c9a7e4-7d5a-47e8-832f-3d2d92abcd12,5ba4ef1d-e454-4f43-ba7c-6fe6f1601915,admin@himmelblau-idm.org id_attr_map Specify whether to map uid/gid based on the object name, the object uuid, or based on the rfc2307 schema extension attributes synchronized from an on-prem Active Directory instance. Mapping by name or by rfc2307 is recommeneded. EXAMPLES id_attr_map = <name|uuid|rfc2307> rfc2307_group_fallback_map Specify whether to map group IDs (GIDs) based on the object name or object UUID when no gidNumber attribute is found in an on-prem Active Directory instance synchronized to Azure Entra ID. This option is only applicable if id_attr_map is set to rfc2307. If id_attr_map = rfc2307 and a group does not have a gidNumber defined in the directory, this setting determines the fallback method for mapping the group ID. If this option is not set, groups without a gidNumber will not be available to NSS. EXAMPLES rfc2307_group_fallback_map = <name|uuid> odc_provider Specifies the hostname for sending federationProvider requests. EXAMPLES odc_provider = odc.officeapps.live.com enable_hello Enables or disables user enrollment in Windows Hello authentication. If disabled, users will need to provide MFA for each login. EXAMPLES enable_hello = false hello_pin_min_length The minimum length of the PIN for Windows Hello authentication. The value must be between 6 and 32 characters. EXAMPLES hello_pin_min_length = 8 hello_pin_retry_count The number of invalid Hello PIN attempts allowed before the user is required to perform MFA. After successful MFA, the user will be prompted to set a new PIN. The value must be a non-negative integer. EXAMPLES hello_pin_retry_count = 3 hello_pin_prompt Customizes the prompt text shown when requesting the user\u2019s Linux Hello PIN. If not set, the default prompt is: Use the Linux Hello PIN for this device. EXAMPLES hello_pin_prompt = Enter your device unlock PIN entra_id_password_prompt Customizes the prompt text shown when requesting the user\u2019s Entra ID password. If not set, the default prompt is: Use the password for your Office 365 or Microsoft online login. EXAMPLES entra_id_password_prompt = Enter your Microsoft 365 password enable_sfa_fallback Determines whether password-only (single-factor) authentication is permitted when MFA is unavailable. Disabled by default. EXAMPLES enable_sfa_fallback = true cn_name_mapping Allows users to enter the short form of their username (e.g., 'dave') instead of the full UPN. EXAMPLES cn_name_mapping = true local_groups A comma-separated list of local groups that every Entra ID user should be a member of. For example, you may wish for all Entra ID users to be a member of the sudo group. WARNING: This setting will not REMOVE group member entries when groups are removed from this list. You must remove them manually. EXAMPLES local_groups = sudo,admin logon_script A script that will execute every time a user logs on. Two environment variables are set: USERNAME, and ACCESS_TOKEN. The ACCESS_TOKEN environment variable is an access token for the MS Graph. The token scope config option sets the comma-separated scopes that should be requested for the ACCESS_TOKEN. ACCESS_TOKEN will be empty during offline logon. The return code of the script determines how authentication proceeds. 0 is success, 1 is a soft failure and authentication will proceed, while 2 is a hard failure causing authentication to fail. The app_id option MUST be set for each domain to ensure the logon_token_scopes option has the correct API permissions. Failing to do so will prevent the logon_script from executing. EXAMPLES logon_script = /etc/himmelblau/logon.sh logon_token_scopes A comma-separated list of the scopes to be requested for the ACCESS_TOKEN during logon. These scopes MUST correspond to the API permissions assigned to the Entra Id Application specified by the app_id domain option. EXAMPLES logon_token_scopes = user.read,mail.read enable_experimental_mfa A boolean option that enables the experimental multi-factor authentication (MFA) flow, which permits Hello authentication. This experimental flow may encounter failures in certain edge cases. If disabled, the system enforces the Device Authorization Grant (DAG) flow for MFA, which is more robust but does not support Hello authentication. By default, this option is enabled. EXAMPLES enable_experimental_mfa = true enable_experimental_passwordless_fido A boolean option that enables the experimental passwordless FIDO flow for Azure Entra ID authentication. When enabled, Himmelblau will attempt to authenticate with Entra ID using a FIDO2 security key without requiring a password. By default, this option is disabled. EXAMPLES enable_experimental_passwordless_fido = true name_mapping_script Specifies the path to an executable script used for mapping custom names to UPN names. The script MUST accept a single argument, which will always be a mapped name. The script MUST print the corresponding UPN (User Principal Name) to stdout. If the script does not recognize the input name, it MUST simply return the input name unchanged. This option is particularly useful in environments where direct UPN-to-CN mappings are impractical or where custom transformations are required. The script must handle the input gracefully and return the correct UPN or the input name if unrecognized. Errors must be handled to avoid authentication failures. EXAMPLES name_mapping_script = /path/to/mapping_script.sh Example Script: #!/bin/bash # Convert CN to UPN, or return the input name if unrecognized if [[ \"$1\" =~ ^[a-zA-Z0-9._-]+$ ]]; then echo \"$1@example.com\" else echo \"$1\" fi apply_policy A boolean option that enables the application and enforcement of Intune policies to the authenticated user. By default, this option is disabled. EXAMPLES apply_policy = false authority_host Specifies the hostname for Microsoft authentication. The default value is login.microsoftonline.com. EXAMPLES authority_host = login.microsoftonline.com db_path The location of the cache database. This file is used to store cached authentication data and device state. EXAMPLES db_path = /var/cache/himmelblau/himmelblau.cache.db hsm_type Specifies how Himmelblau should handle secure key storage. This option determines whether to use a software-based HSM, a TPM (Trusted Platform Module), or a hybrid approach. The available options are: soft \u2013 Use a software-based HSM that encrypts key material locally on the system. tpm \u2013 Use a hardware TPM exclusively for storing and binding cryptographic keys. tpm_if_possible \u2013 Attempt to use a hardware TPM if available; if not, fall back to the software HSM. If the TPM has previously been used for key storage, the system will not fall back to the software HSM. The default is soft his setting is important for protecting sensitive cryptographic keys in a secure environment, reducing the risk of compromise if the system is breached. EXAMPLES hsm_type = soft tpm_tcti_name Specifies the TCTI (Trusted Computing Technology Interface) to use when communicating with a Trusted Platform Module (TPM) for secure key operations. This setting is only relevant when hsm_type is set to tpm or tpm_if_possible. Common values include: device:/dev/tpmrm0 \u2013 This uses the kernel TPM resource manager device, which is the recommended default for most Linux systems. Other TCTI strings may be required depending on your system\u2019s TPM driver or configuration. This option allows advanced control over how Himmelblau connects to the TPM for performing cryptographic operations. EXAMPLES tpm_tcti_name = device:/dev/tpmrm0 hsm_pin_path The location where the HSM (Hardware Security Module) PIN will be stored. This PIN is used to protect sensitive cryptographic operations. EXAMPLES hsm_pin_path = /var/lib/himmelblaud/hsm-pin socket_path The path to the socket file for communication between the pam and nss modules and the Himmelblau daemon. EXAMPLES socket_path = /var/run/himmelblaud/socket task_socket_path The path to the socket file for communication with the task daemon. EXAMPLES task_socket_path = /var/run/himmelblaud/task_sock broker_socket_path The path to the socket file for communication with the broker DBus service. EXAMPLES broker_socket_path = /var/run/himmelblaud/broker_sock home_prefix The prefix to use for user home directories. EXAMPLES home_prefix = /home/ home_attr The attribute used to create a home directory for a user. Available options include: UUID (default) SPN CN EXAMPLES home_attr = UUID home_alias The symlinked alias for the user's home directory. Available options include: UUID SPN (default) CN EXAMPLES home_alias = SPN shell The default shell for users. This will be assigned when the user logs in. EXAMPLES shell = /bin/bash idmap_range Specifies the range of IDs to be used for the user and group mappings. When this option is modified, you SHOULD run: sudo aad-tool cache-clear --really To ensure that old cached ID mappings are cleared, preventing potential UID overlaps caused by stale cache data. EXAMPLES idmap_range = 5000000-5999999 connection_timeout The timeout for connections to the authentication server. Default is 2 seconds. EXAMPLES connection_timeout = 5 cache_timeout The timeout for caching authentication data. Default is 300 seconds (5 minutes). EXAMPLES cache_timeout = 10 use_etc_skel If set to true, Himmelblau will use the contents of /etc/skel when creating new user directories. EXAMPLES use_etc_skel = false selinux Whether SELinux security labels should be applied to users' home directories. Set to true to enable. EXAMPLES selinux = true DOMAIN-SPECIFIC SECTIONS Overrides can be defined for individual domains by using a section named after the domain in square brackets. [example.com] This section allows customization of specific parameters for the domain example.com. Domain-specific sections override global values for the specified domain. odc_provider Overrides the odc_provider value for this domain. EXAMPLES [example.com] odc_provider = custom.odcprovider.example.com home_prefix Overrides the home_prefix value for this domain. EXAMPLES [example.com] home_prefix = /home/ home_attr Overrides the home_attr value for this domain. EXAMPLES [example.com] home_attr = UUID home_alias Overrides the home_alias value for this domain. EXAMPLES [example.com] home_alias = SPN shell Overrides the shell value for this domain. EXAMPLES [example.com] shell = /bin/bash idmap_range Overrides the idmap_range value for this domain. When this option is modified, you SHOULD run: sudo aad-tool cache-clear --really To ensure that old cached ID mappings are cleared, preventing potential UID overlaps caused by stale cache data. EXAMPLES [example.com] idmap_range = 5000000-5999999 logon_token_app_id Specifies the Entra ID application ID to be used when requesting an ACCESS_TOKEN on behalf of the user for the logon script. If not set, the domain\u2019s app_id will be used instead. This option allows configuring a separate application ID specifically for logon token requests, ensuring the correct API permissions are applied. Note: In the Azure Portal for the application corresponding to logon_token_app_id , ensure that the redirect URI https://login.microsoftonline.com/common/oauth2/nativeclient is enabled in the application's Authentication section under \u201cMobile and desktop applications.\u201d This is required so that Himmelblau can obtain the necessary tokens. EXAMPLES [example.com] logon_token_app_id = 544e695f-5d78-442e-b14e-e114e95e640c app_id Specifies the Entra ID application identifier that permits Himmelblau to fetch the gidNumber extended attribute using the GroupMember.Read.All API permission for rfc2307 idmapping. If logon_token_app_id is not set, this app_id will also be used for requesting access tokens for the logon script. Note: For the application corresponding to app_id , ensure that the redirect URI himmelblau://Himmelblau.EntraId.BrokerPlugin is added in the application's Authentication section under \u201cMobile and desktop applications\u201d in the Azure Portal. This allows Himmelblau to properly handle token redirection for the extended attribute lookups. EXAMPLES [example.com] app_id = d023f7aa-d214-4b59-911d-6074de623765 SEE ALSO himmelblaud(8), himmelblaud-tasks(8)","title":"Himmelblau conf"},{"location":"reference/himmelblau-conf/#name","text":"himmelblau.conf - Configuration file for Himmelblau, enabling Azure Entra ID authentication on Linux.","title":"NAME"},{"location":"reference/himmelblau-conf/#synopsis","text":"/etc/himmelblau/himmelblau.conf","title":"SYNOPSIS"},{"location":"reference/himmelblau-conf/#how-configuration-changes-are-applied","text":"Changes to the configuration file /etc/himmelblau/himmelblau.conf only take effect after restarting the Himmelblau daemons. This includes the himmelblaud daemon, which handles authentication, and the himmelblaud-tasks daemon, which processes related tasks.","title":"HOW CONFIGURATION CHANGES ARE APPLIED"},{"location":"reference/himmelblau-conf/#restarting-the-daemons","text":"To apply changes, restart the Himmelblau services using the following systemd commands:","title":"Restarting the Daemons"},{"location":"reference/himmelblau-conf/#examples","text":"sudo systemctl restart himmelblaud sudo systemctl restart himmelblaud-tasks","title":"EXAMPLES"},{"location":"reference/himmelblau-conf/#description","text":"The himmelblau.conf file is the primary configuration file for the Himmelblau authentication module. It defines global and optional settings required for Azure Entra ID-based authentication and device management.","title":"DESCRIPTION"},{"location":"reference/himmelblau-conf/#file-format","text":"The file consists of sections headed by a name enclosed in square brackets. Each section contains parameters and their values in the format: parameter = value Lines beginning with a '#' are comments and are ignored by the parser.","title":"FILE FORMAT"},{"location":"reference/himmelblau-conf/#parameters","text":"","title":"PARAMETERS"},{"location":"reference/himmelblau-conf/#global","text":"This section contains settings that apply globally to all operations of Himmelblau.","title":"[global]"},{"location":"reference/himmelblau-conf/#domains","text":"A comma-separated list of primary domains for your Azure Entra ID tenants. This parameter is REQUIRED for successful authentication. If this option is not specified, no users will be permitted to authenticate. The first user to authenticate to each domain will become the owner of the device object in the directory. Specify ONLY the primary domain for each tenant. Specifying multiple custom domains which belong to a single tenant will cause an idmap range overlap and the himmelblaud daemon will NOT start. If multiple domains are specified, you MUST define an idmap_range for each domain to avoid conflicts in user and group ID mappings. Overlapping ID ranges will cause the idmapper to throw a critical error and stop the daemon. This safeguard ensures that two users are not mistakenly mapped to the same UID.","title":"domains"},{"location":"reference/himmelblau-conf/#examples_1","text":"domains = example.com,example2.com [example.com] idmap_range = 5000000-5999999 [example2.com] idmap_range = 6000000-6999999","title":"EXAMPLES"},{"location":"reference/himmelblau-conf/#debug","text":"A boolean option that enables debug-level logging. When set to true, debug messages are output to the system journal.","title":"debug"},{"location":"reference/himmelblau-conf/#examples_2","text":"debug = true","title":"EXAMPLES"},{"location":"reference/himmelblau-conf/#pam_allow_groups","text":"A comma-separated list of Entra Id Users and Groups permitted to access the system. Users should be specified by UPN. Groups MUST be specified using their Object ID GUID. Group names may not be used because these names are not guaranteed to be unique in Entra Id.","title":"pam_allow_groups"},{"location":"reference/himmelblau-conf/#examples_3","text":"pam_allow_groups = f3c9a7e4-7d5a-47e8-832f-3d2d92abcd12,5ba4ef1d-e454-4f43-ba7c-6fe6f1601915,admin@himmelblau-idm.org","title":"EXAMPLES"},{"location":"reference/himmelblau-conf/#id_attr_map","text":"Specify whether to map uid/gid based on the object name, the object uuid, or based on the rfc2307 schema extension attributes synchronized from an on-prem Active Directory instance. Mapping by name or by rfc2307 is recommeneded.","title":"id_attr_map"},{"location":"reference/himmelblau-conf/#examples_4","text":"id_attr_map = <name|uuid|rfc2307>","title":"EXAMPLES"},{"location":"reference/himmelblau-conf/#rfc2307_group_fallback_map","text":"Specify whether to map group IDs (GIDs) based on the object name or object UUID when no gidNumber attribute is found in an on-prem Active Directory instance synchronized to Azure Entra ID. This option is only applicable if id_attr_map is set to rfc2307. If id_attr_map = rfc2307 and a group does not have a gidNumber defined in the directory, this setting determines the fallback method for mapping the group ID. If this option is not set, groups without a gidNumber will not be available to NSS.","title":"rfc2307_group_fallback_map"},{"location":"reference/himmelblau-conf/#examples_5","text":"rfc2307_group_fallback_map = <name|uuid>","title":"EXAMPLES"},{"location":"reference/himmelblau-conf/#odc_provider","text":"Specifies the hostname for sending federationProvider requests.","title":"odc_provider"},{"location":"reference/himmelblau-conf/#examples_6","text":"odc_provider = odc.officeapps.live.com","title":"EXAMPLES"},{"location":"reference/himmelblau-conf/#enable_hello","text":"Enables or disables user enrollment in Windows Hello authentication. If disabled, users will need to provide MFA for each login.","title":"enable_hello"},{"location":"reference/himmelblau-conf/#examples_7","text":"enable_hello = false","title":"EXAMPLES"},{"location":"reference/himmelblau-conf/#hello_pin_min_length","text":"The minimum length of the PIN for Windows Hello authentication. The value must be between 6 and 32 characters.","title":"hello_pin_min_length"},{"location":"reference/himmelblau-conf/#examples_8","text":"hello_pin_min_length = 8","title":"EXAMPLES"},{"location":"reference/himmelblau-conf/#hello_pin_retry_count","text":"The number of invalid Hello PIN attempts allowed before the user is required to perform MFA. After successful MFA, the user will be prompted to set a new PIN. The value must be a non-negative integer.","title":"hello_pin_retry_count"},{"location":"reference/himmelblau-conf/#examples_9","text":"hello_pin_retry_count = 3","title":"EXAMPLES"},{"location":"reference/himmelblau-conf/#hello_pin_prompt","text":"Customizes the prompt text shown when requesting the user\u2019s Linux Hello PIN. If not set, the default prompt is: Use the Linux Hello PIN for this device.","title":"hello_pin_prompt"},{"location":"reference/himmelblau-conf/#examples_10","text":"hello_pin_prompt = Enter your device unlock PIN","title":"EXAMPLES"},{"location":"reference/himmelblau-conf/#entra_id_password_prompt","text":"Customizes the prompt text shown when requesting the user\u2019s Entra ID password. If not set, the default prompt is: Use the password for your Office 365 or Microsoft online login.","title":"entra_id_password_prompt"},{"location":"reference/himmelblau-conf/#examples_11","text":"entra_id_password_prompt = Enter your Microsoft 365 password","title":"EXAMPLES"},{"location":"reference/himmelblau-conf/#enable_sfa_fallback","text":"Determines whether password-only (single-factor) authentication is permitted when MFA is unavailable. Disabled by default.","title":"enable_sfa_fallback"},{"location":"reference/himmelblau-conf/#examples_12","text":"enable_sfa_fallback = true","title":"EXAMPLES"},{"location":"reference/himmelblau-conf/#cn_name_mapping","text":"Allows users to enter the short form of their username (e.g., 'dave') instead of the full UPN.","title":"cn_name_mapping"},{"location":"reference/himmelblau-conf/#examples_13","text":"cn_name_mapping = true","title":"EXAMPLES"},{"location":"reference/himmelblau-conf/#local_groups","text":"A comma-separated list of local groups that every Entra ID user should be a member of. For example, you may wish for all Entra ID users to be a member of the sudo group. WARNING: This setting will not REMOVE group member entries when groups are removed from this list. You must remove them manually.","title":"local_groups"},{"location":"reference/himmelblau-conf/#examples_14","text":"local_groups = sudo,admin","title":"EXAMPLES"},{"location":"reference/himmelblau-conf/#logon_script","text":"A script that will execute every time a user logs on. Two environment variables are set: USERNAME, and ACCESS_TOKEN. The ACCESS_TOKEN environment variable is an access token for the MS Graph. The token scope config option sets the comma-separated scopes that should be requested for the ACCESS_TOKEN. ACCESS_TOKEN will be empty during offline logon. The return code of the script determines how authentication proceeds. 0 is success, 1 is a soft failure and authentication will proceed, while 2 is a hard failure causing authentication to fail. The app_id option MUST be set for each domain to ensure the logon_token_scopes option has the correct API permissions. Failing to do so will prevent the logon_script from executing.","title":"logon_script"},{"location":"reference/himmelblau-conf/#examples_15","text":"logon_script = /etc/himmelblau/logon.sh","title":"EXAMPLES"},{"location":"reference/himmelblau-conf/#logon_token_scopes","text":"A comma-separated list of the scopes to be requested for the ACCESS_TOKEN during logon. These scopes MUST correspond to the API permissions assigned to the Entra Id Application specified by the app_id domain option.","title":"logon_token_scopes"},{"location":"reference/himmelblau-conf/#examples_16","text":"logon_token_scopes = user.read,mail.read","title":"EXAMPLES"},{"location":"reference/himmelblau-conf/#enable_experimental_mfa","text":"A boolean option that enables the experimental multi-factor authentication (MFA) flow, which permits Hello authentication. This experimental flow may encounter failures in certain edge cases. If disabled, the system enforces the Device Authorization Grant (DAG) flow for MFA, which is more robust but does not support Hello authentication. By default, this option is enabled.","title":"enable_experimental_mfa"},{"location":"reference/himmelblau-conf/#examples_17","text":"enable_experimental_mfa = true","title":"EXAMPLES"},{"location":"reference/himmelblau-conf/#enable_experimental_passwordless_fido","text":"A boolean option that enables the experimental passwordless FIDO flow for Azure Entra ID authentication. When enabled, Himmelblau will attempt to authenticate with Entra ID using a FIDO2 security key without requiring a password. By default, this option is disabled.","title":"enable_experimental_passwordless_fido"},{"location":"reference/himmelblau-conf/#examples_18","text":"enable_experimental_passwordless_fido = true","title":"EXAMPLES"},{"location":"reference/himmelblau-conf/#name_mapping_script","text":"Specifies the path to an executable script used for mapping custom names to UPN names. The script MUST accept a single argument, which will always be a mapped name. The script MUST print the corresponding UPN (User Principal Name) to stdout. If the script does not recognize the input name, it MUST simply return the input name unchanged. This option is particularly useful in environments where direct UPN-to-CN mappings are impractical or where custom transformations are required. The script must handle the input gracefully and return the correct UPN or the input name if unrecognized. Errors must be handled to avoid authentication failures.","title":"name_mapping_script"},{"location":"reference/himmelblau-conf/#examples_19","text":"name_mapping_script = /path/to/mapping_script.sh Example Script: #!/bin/bash # Convert CN to UPN, or return the input name if unrecognized if [[ \"$1\" =~ ^[a-zA-Z0-9._-]+$ ]]; then echo \"$1@example.com\" else echo \"$1\" fi apply_policy A boolean option that enables the application and enforcement of Intune policies to the authenticated user. By default, this option is disabled.","title":"EXAMPLES"},{"location":"reference/himmelblau-conf/#examples_20","text":"apply_policy = false","title":"EXAMPLES"},{"location":"reference/himmelblau-conf/#authority_host","text":"Specifies the hostname for Microsoft authentication. The default value is login.microsoftonline.com.","title":"authority_host"},{"location":"reference/himmelblau-conf/#examples_21","text":"authority_host = login.microsoftonline.com","title":"EXAMPLES"},{"location":"reference/himmelblau-conf/#db_path","text":"The location of the cache database. This file is used to store cached authentication data and device state.","title":"db_path"},{"location":"reference/himmelblau-conf/#examples_22","text":"db_path = /var/cache/himmelblau/himmelblau.cache.db","title":"EXAMPLES"},{"location":"reference/himmelblau-conf/#hsm_type","text":"Specifies how Himmelblau should handle secure key storage. This option determines whether to use a software-based HSM, a TPM (Trusted Platform Module), or a hybrid approach. The available options are: soft \u2013 Use a software-based HSM that encrypts key material locally on the system. tpm \u2013 Use a hardware TPM exclusively for storing and binding cryptographic keys. tpm_if_possible \u2013 Attempt to use a hardware TPM if available; if not, fall back to the software HSM. If the TPM has previously been used for key storage, the system will not fall back to the software HSM. The default is soft his setting is important for protecting sensitive cryptographic keys in a secure environment, reducing the risk of compromise if the system is breached.","title":"hsm_type"},{"location":"reference/himmelblau-conf/#examples_23","text":"hsm_type = soft","title":"EXAMPLES"},{"location":"reference/himmelblau-conf/#tpm_tcti_name","text":"Specifies the TCTI (Trusted Computing Technology Interface) to use when communicating with a Trusted Platform Module (TPM) for secure key operations. This setting is only relevant when hsm_type is set to tpm or tpm_if_possible. Common values include: device:/dev/tpmrm0 \u2013 This uses the kernel TPM resource manager device, which is the recommended default for most Linux systems. Other TCTI strings may be required depending on your system\u2019s TPM driver or configuration. This option allows advanced control over how Himmelblau connects to the TPM for performing cryptographic operations.","title":"tpm_tcti_name"},{"location":"reference/himmelblau-conf/#examples_24","text":"tpm_tcti_name = device:/dev/tpmrm0","title":"EXAMPLES"},{"location":"reference/himmelblau-conf/#hsm_pin_path","text":"The location where the HSM (Hardware Security Module) PIN will be stored. This PIN is used to protect sensitive cryptographic operations.","title":"hsm_pin_path"},{"location":"reference/himmelblau-conf/#examples_25","text":"hsm_pin_path = /var/lib/himmelblaud/hsm-pin","title":"EXAMPLES"},{"location":"reference/himmelblau-conf/#socket_path","text":"The path to the socket file for communication between the pam and nss modules and the Himmelblau daemon.","title":"socket_path"},{"location":"reference/himmelblau-conf/#examples_26","text":"socket_path = /var/run/himmelblaud/socket","title":"EXAMPLES"},{"location":"reference/himmelblau-conf/#task_socket_path","text":"The path to the socket file for communication with the task daemon.","title":"task_socket_path"},{"location":"reference/himmelblau-conf/#examples_27","text":"task_socket_path = /var/run/himmelblaud/task_sock","title":"EXAMPLES"},{"location":"reference/himmelblau-conf/#broker_socket_path","text":"The path to the socket file for communication with the broker DBus service.","title":"broker_socket_path"},{"location":"reference/himmelblau-conf/#examples_28","text":"broker_socket_path = /var/run/himmelblaud/broker_sock","title":"EXAMPLES"},{"location":"reference/himmelblau-conf/#home_prefix","text":"The prefix to use for user home directories.","title":"home_prefix"},{"location":"reference/himmelblau-conf/#examples_29","text":"home_prefix = /home/","title":"EXAMPLES"},{"location":"reference/himmelblau-conf/#home_attr","text":"The attribute used to create a home directory for a user. Available options include: UUID (default) SPN CN","title":"home_attr"},{"location":"reference/himmelblau-conf/#examples_30","text":"home_attr = UUID","title":"EXAMPLES"},{"location":"reference/himmelblau-conf/#home_alias","text":"The symlinked alias for the user's home directory. Available options include: UUID SPN (default) CN","title":"home_alias"},{"location":"reference/himmelblau-conf/#examples_31","text":"home_alias = SPN","title":"EXAMPLES"},{"location":"reference/himmelblau-conf/#shell","text":"The default shell for users. This will be assigned when the user logs in.","title":"shell"},{"location":"reference/himmelblau-conf/#examples_32","text":"shell = /bin/bash","title":"EXAMPLES"},{"location":"reference/himmelblau-conf/#idmap_range","text":"Specifies the range of IDs to be used for the user and group mappings. When this option is modified, you SHOULD run: sudo aad-tool cache-clear --really To ensure that old cached ID mappings are cleared, preventing potential UID overlaps caused by stale cache data.","title":"idmap_range"},{"location":"reference/himmelblau-conf/#examples_33","text":"idmap_range = 5000000-5999999","title":"EXAMPLES"},{"location":"reference/himmelblau-conf/#connection_timeout","text":"The timeout for connections to the authentication server. Default is 2 seconds.","title":"connection_timeout"},{"location":"reference/himmelblau-conf/#examples_34","text":"connection_timeout = 5","title":"EXAMPLES"},{"location":"reference/himmelblau-conf/#cache_timeout","text":"The timeout for caching authentication data. Default is 300 seconds (5 minutes).","title":"cache_timeout"},{"location":"reference/himmelblau-conf/#examples_35","text":"cache_timeout = 10","title":"EXAMPLES"},{"location":"reference/himmelblau-conf/#use_etc_skel","text":"If set to true, Himmelblau will use the contents of /etc/skel when creating new user directories.","title":"use_etc_skel"},{"location":"reference/himmelblau-conf/#examples_36","text":"use_etc_skel = false","title":"EXAMPLES"},{"location":"reference/himmelblau-conf/#selinux","text":"Whether SELinux security labels should be applied to users' home directories. Set to true to enable.","title":"selinux"},{"location":"reference/himmelblau-conf/#examples_37","text":"selinux = true","title":"EXAMPLES"},{"location":"reference/himmelblau-conf/#domain-specific-sections","text":"Overrides can be defined for individual domains by using a section named after the domain in square brackets.","title":"DOMAIN-SPECIFIC SECTIONS"},{"location":"reference/himmelblau-conf/#examplecom","text":"This section allows customization of specific parameters for the domain example.com. Domain-specific sections override global values for the specified domain.","title":"[example.com]"},{"location":"reference/himmelblau-conf/#odc_provider_1","text":"Overrides the odc_provider value for this domain.","title":"odc_provider"},{"location":"reference/himmelblau-conf/#examples_38","text":"[example.com] odc_provider = custom.odcprovider.example.com","title":"EXAMPLES"},{"location":"reference/himmelblau-conf/#home_prefix_1","text":"Overrides the home_prefix value for this domain.","title":"home_prefix"},{"location":"reference/himmelblau-conf/#examples_39","text":"[example.com] home_prefix = /home/","title":"EXAMPLES"},{"location":"reference/himmelblau-conf/#home_attr_1","text":"Overrides the home_attr value for this domain.","title":"home_attr"},{"location":"reference/himmelblau-conf/#examples_40","text":"[example.com] home_attr = UUID","title":"EXAMPLES"},{"location":"reference/himmelblau-conf/#home_alias_1","text":"Overrides the home_alias value for this domain.","title":"home_alias"},{"location":"reference/himmelblau-conf/#examples_41","text":"[example.com] home_alias = SPN","title":"EXAMPLES"},{"location":"reference/himmelblau-conf/#shell_1","text":"Overrides the shell value for this domain.","title":"shell"},{"location":"reference/himmelblau-conf/#examples_42","text":"[example.com] shell = /bin/bash","title":"EXAMPLES"},{"location":"reference/himmelblau-conf/#idmap_range_1","text":"Overrides the idmap_range value for this domain. When this option is modified, you SHOULD run: sudo aad-tool cache-clear --really To ensure that old cached ID mappings are cleared, preventing potential UID overlaps caused by stale cache data.","title":"idmap_range"},{"location":"reference/himmelblau-conf/#examples_43","text":"[example.com] idmap_range = 5000000-5999999","title":"EXAMPLES"},{"location":"reference/himmelblau-conf/#logon_token_app_id","text":"Specifies the Entra ID application ID to be used when requesting an ACCESS_TOKEN on behalf of the user for the logon script. If not set, the domain\u2019s app_id will be used instead. This option allows configuring a separate application ID specifically for logon token requests, ensuring the correct API permissions are applied. Note: In the Azure Portal for the application corresponding to logon_token_app_id , ensure that the redirect URI https://login.microsoftonline.com/common/oauth2/nativeclient is enabled in the application's Authentication section under \u201cMobile and desktop applications.\u201d This is required so that Himmelblau can obtain the necessary tokens.","title":"logon_token_app_id"},{"location":"reference/himmelblau-conf/#examples_44","text":"[example.com] logon_token_app_id = 544e695f-5d78-442e-b14e-e114e95e640c","title":"EXAMPLES"},{"location":"reference/himmelblau-conf/#app_id","text":"Specifies the Entra ID application identifier that permits Himmelblau to fetch the gidNumber extended attribute using the GroupMember.Read.All API permission for rfc2307 idmapping. If logon_token_app_id is not set, this app_id will also be used for requesting access tokens for the logon script. Note: For the application corresponding to app_id , ensure that the redirect URI himmelblau://Himmelblau.EntraId.BrokerPlugin is added in the application's Authentication section under \u201cMobile and desktop applications\u201d in the Azure Portal. This allows Himmelblau to properly handle token redirection for the extended attribute lookups.","title":"app_id"},{"location":"reference/himmelblau-conf/#examples_45","text":"[example.com] app_id = d023f7aa-d214-4b59-911d-6074de623765","title":"EXAMPLES"},{"location":"reference/himmelblau-conf/#see-also","text":"himmelblaud(8), himmelblaud-tasks(8)","title":"SEE ALSO"},{"location":"reference/himmelblaud/","text":"NAME himmelblaud - Himmelblau Authentication Daemon for Azure Entra ID SYNOPSIS himmelblaud [ OPTIONS ] DESCRIPTION The himmelblaud daemon is responsible for authenticating users against Azure Entra ID and managing group and user information. It operates as a background service, handling authentication requests and maintaining a cache of user and group data. OPTIONS -r , --skip-root-check Bypass the check that prevents running the daemon as the root user. This option is risky and should never be used in production environments due to potential security vulnerabilities. It can also be set through the environment variable HIMMELBLAU_SKIP_ROOT_CHECK . -d , --debug Enable verbose debug output. This option will show detailed diagnostic information useful for troubleshooting and debugging. Can also be set via the environment variable HIMMELBLAU_DEBUG . -t , --configtest Display the daemon\u2019s current configuration and exit. This is useful for verifying that the configuration file is correctly formatted and contains valid options. -c , --config <config> Specify the path to the configuration file for the daemon. The default configuration file is located at /etc/himmelblau/himmelblaud.conf . This option can also be set via the environment variable HIMMELBLAU_CONFIG . -h , --help Show the help message with information about available options. -V , --version Print the version of the himmelblaud daemon and exit. USAGE EXAMPLES Start the daemon: # systemctl start himmelblaud Run with a specific config file: # himmelblaud --config /custom/path/himmelblaud.conf Test the configuration: # himmelblaud --configtest Enable debug mode: # himmelblaud --debug SEE ALSO himmelblaud-tasks(8)","title":"Himmelblaud"},{"location":"reference/himmelblaud/#name","text":"himmelblaud - Himmelblau Authentication Daemon for Azure Entra ID","title":"NAME"},{"location":"reference/himmelblaud/#synopsis","text":"himmelblaud [ OPTIONS ]","title":"SYNOPSIS"},{"location":"reference/himmelblaud/#description","text":"The himmelblaud daemon is responsible for authenticating users against Azure Entra ID and managing group and user information. It operates as a background service, handling authentication requests and maintaining a cache of user and group data.","title":"DESCRIPTION"},{"location":"reference/himmelblaud/#options","text":"-r , --skip-root-check Bypass the check that prevents running the daemon as the root user. This option is risky and should never be used in production environments due to potential security vulnerabilities. It can also be set through the environment variable HIMMELBLAU_SKIP_ROOT_CHECK .","title":"OPTIONS"},{"location":"reference/himmelblaud/#-d-debug","text":"Enable verbose debug output. This option will show detailed diagnostic information useful for troubleshooting and debugging. Can also be set via the environment variable HIMMELBLAU_DEBUG .","title":"-d, --debug"},{"location":"reference/himmelblaud/#-t-configtest","text":"Display the daemon\u2019s current configuration and exit. This is useful for verifying that the configuration file is correctly formatted and contains valid options.","title":"-t, --configtest"},{"location":"reference/himmelblaud/#-c-config-config","text":"Specify the path to the configuration file for the daemon. The default configuration file is located at /etc/himmelblau/himmelblaud.conf . This option can also be set via the environment variable HIMMELBLAU_CONFIG .","title":"-c, --config &lt;config&gt;"},{"location":"reference/himmelblaud/#-h-help","text":"Show the help message with information about available options.","title":"-h, --help"},{"location":"reference/himmelblaud/#-v-version","text":"Print the version of the himmelblaud daemon and exit.","title":"-V, --version"},{"location":"reference/himmelblaud/#usage-examples","text":"Start the daemon: # systemctl start himmelblaud","title":"USAGE EXAMPLES"},{"location":"reference/himmelblaud/#run-with-a-specific-config-file","text":"# himmelblaud --config /custom/path/himmelblaud.conf","title":"Run with a specific config file:"},{"location":"reference/himmelblaud/#test-the-configuration","text":"# himmelblaud --configtest","title":"Test the configuration:"},{"location":"reference/himmelblaud/#enable-debug-mode","text":"# himmelblaud --debug","title":"Enable debug mode:"},{"location":"reference/himmelblaud/#see-also","text":"himmelblaud-tasks(8)","title":"SEE ALSO"},{"location":"reference/himmelblaud_tasks/","text":"NAME himmelblaud_tasks - Home directory creation daemon for Himmelblau SYNOPSIS himmelblaud_tasks DESCRIPTION The himmelblaud-tasks daemon is responsible for managing user accounts and authentication tasks in a Linux environment. Upon successful authentication via Azure Entra ID, it automatically creates home directories for users, adds them to configured local groups, executes the configured logon script, and handles the caching of Kerberos ccache files. This service requires root privileges to perform actions such as creating directories in system locations and managing group memberships. The daemon operates as a background service and does not accept any command-line arguments. It is automatically invoked by the system when required. USAGE The himmelblaud-tasks daemon must be run as the root user. If the daemon is started without root privileges, it will fail with an error. No user interaction is needed beyond ensuring the daemon is active and running correctly. EXAMPLES Start the daemon: # systemctl start himmelblaud-tasks Verify the status of the daemon: # systemctl status himmelblaud-tasks NOTES This daemon is a key component of Himmelblau, handling several critical tasks for user authentication. In addition to creating user home directories, it adds users to the configured local groups, executes the configured logon script, and manages the caching of Kerberos ccache files. These functions ensure that users have the necessary environment and access rights in place for a seamless login experience after authentication. SEE ALSO himmelblaud(8),","title":"Himmelblaud tasks"},{"location":"reference/himmelblaud_tasks/#name","text":"himmelblaud_tasks - Home directory creation daemon for Himmelblau","title":"NAME"},{"location":"reference/himmelblaud_tasks/#synopsis","text":"himmelblaud_tasks","title":"SYNOPSIS"},{"location":"reference/himmelblaud_tasks/#description","text":"The himmelblaud-tasks daemon is responsible for managing user accounts and authentication tasks in a Linux environment. Upon successful authentication via Azure Entra ID, it automatically creates home directories for users, adds them to configured local groups, executes the configured logon script, and handles the caching of Kerberos ccache files. This service requires root privileges to perform actions such as creating directories in system locations and managing group memberships. The daemon operates as a background service and does not accept any command-line arguments. It is automatically invoked by the system when required.","title":"DESCRIPTION"},{"location":"reference/himmelblaud_tasks/#usage","text":"The himmelblaud-tasks daemon must be run as the root user. If the daemon is started without root privileges, it will fail with an error. No user interaction is needed beyond ensuring the daemon is active and running correctly.","title":"USAGE"},{"location":"reference/himmelblaud_tasks/#examples","text":"Start the daemon: # systemctl start himmelblaud-tasks","title":"EXAMPLES"},{"location":"reference/himmelblaud_tasks/#verify-the-status-of-the-daemon","text":"# systemctl status himmelblaud-tasks","title":"Verify the status of the daemon:"},{"location":"reference/himmelblaud_tasks/#notes","text":"This daemon is a key component of Himmelblau, handling several critical tasks for user authentication. In addition to creating user home directories, it adds users to the configured local groups, executes the configured logon script, and manages the caching of Kerberos ccache files. These functions ensure that users have the necessary environment and access rights in place for a seamless login experience after authentication.","title":"NOTES"},{"location":"reference/himmelblaud_tasks/#see-also","text":"himmelblaud(8),","title":"SEE ALSO"},{"location":"reference/pam_himmelblau/","text":"NAME pam_himmelblau [em] enable Azure Entra\u202fID authentication via Himmelblau SYNOPSIS pam_himmelblau.so [debug] [use_first_pass] [ignore_unknown_user] [mfa_poll_prompt] [no_hello_pin] DESCRIPTION pam_himmelblau is a PAM module that authenticates users against Microsoft Azure Entra\u202fID using the Himmelblau daemon ( himmelblaud ). OPTIONS debug Enables verbose logging to stdout. use_first_pass Uses a password already provided by a previous PAM module as either a Linux Hello PIN or an Entra Id password, instead of prompting again. ignore_unknown_user Returns CR]PAM_IGNORER] for users not in Entra\u202fID, allowing fallback to local authentication via subsequent PAM modules. mfa_poll_prompt Workaround for OpenSSH Bug\u202f2876, which prevents PAM messages from being flushed to stdout until after sending a prompt for input. This workaround causes pam to prompt the user to `press enter to continue' when polling on another device for MFA. no_hello_pin Disables Linux Hello PIN login for this service (e.g., for sudo or ssh ), even if Hello is configured globally. PAM CONFIGURATION Configuring PAM ensures authentication requests go through Entra\u202fID when appropriate. Automatic setup On Ubuntu/Debian: sudo pam-auth-update Enable [lq]Azure authentication[rq] and verify PAM files. On openSUSE Tumbleweed or SLE: pam-config --add --himmelblau The aad-tool configure-pam command also inserts recommended directives (dry-run unless --really is used). Manual configuration In /etc/pam.d/common-auth , ensure that the pam_himmelblau.so module is placed after other authentication methods (such as pam_unix.so ). Ensure that other authentication modules are not set to required , as this could cause authentication to fail prior to PAM communicating with Entra ID. Include the ignore_unknown_user option for Himmelblau. Ensure pam_deny.so is placed after all modules, so that unknown users are not implicitly allowed. Note: If you intend to use Hello or Passwordless authentication, it[cq]s recommended that pam_himmelblau.so be placed before pam_unix.so in the pam auth stack (but always after pam_localuser.so ), otherwise pam_unix will unnecessarily prompt for a password. auth required pam_env.so auth [default=1 ignore=ignore success=ok] pam_localuser.so auth sufficient pam_unix.so nullok try_first_pass auth sufficient pam_himmelblau.so ignore_unknown_user auth required pam_deny.so Configure /etc/pam.d/common-account in a similar manner. account [default=1 ignore=ignore success=ok] pam_localuser.so account sufficient pam_unix.so account sufficient pam_himmelblau.so ignore_unknown_user account required pam_deny.so In /etc/pam.d/common-session , set pam_himmelblau.so as an optional module. session optional pam_systemd.so session required pam_limits.so session optional pam_unix.so try_first_pass session optional pam_umask.so session optional pam_himmelblau.so session optional pam_env.so In /etc/pam.d/common-password , set pam_himmelblau.so as sufficient. password sufficient pam_himmelblau.so ignore_unknown_user password optional pam_gnome_keyring.so use_authtok password sufficient pam_unix.so use_authtok nullok shadow try_first_pass password required pam_deny.so RETURN VALUES PAM_SUCCESS Authentication or Hello PIN update succeeded. PAM_AUTH_ERR Authentication failed. This may include incorrect credentials, rejected MFA, or other auth-layer failures. PAM_USER_UNKNOWN The user was not found in Entra\u202fID. This is bypassed if the ignore_unknown_user option is specified. PAM_IGNORE The module was instructed to skip processing (e.g., due to ignore_unknown_user ). This allows fallback to other PAM modules. PAM_SERVICE_ERR A configuration or initialization error occurred in the module, or a required daemon was unreachable. PAM_CRED_INSUFFICIENT The user did not meet the required credential policy. PAM_ABORT A critical, unrecoverable failure occurred[em]such as a panic inside the himmelblaud service. SEE ALSO himmelblaud(8) , aad-tool(1) , himmelblau.conf(5) , pam(8) AUTHOR David Mulder dmulder@himmelblau-idm.org, dmulder@samba.org","title":"Pam himmelblau"},{"location":"reference/pam_himmelblau/#name","text":"pam_himmelblau [em] enable Azure Entra\u202fID authentication via Himmelblau","title":"NAME"},{"location":"reference/pam_himmelblau/#synopsis","text":"pam_himmelblau.so [debug] [use_first_pass] [ignore_unknown_user] [mfa_poll_prompt] [no_hello_pin]","title":"SYNOPSIS"},{"location":"reference/pam_himmelblau/#description","text":"pam_himmelblau is a PAM module that authenticates users against Microsoft Azure Entra\u202fID using the Himmelblau daemon ( himmelblaud ).","title":"DESCRIPTION"},{"location":"reference/pam_himmelblau/#options","text":"debug Enables verbose logging to stdout. use_first_pass Uses a password already provided by a previous PAM module as either a Linux Hello PIN or an Entra Id password, instead of prompting again. ignore_unknown_user Returns CR]PAM_IGNORER] for users not in Entra\u202fID, allowing fallback to local authentication via subsequent PAM modules. mfa_poll_prompt Workaround for OpenSSH Bug\u202f2876, which prevents PAM messages from being flushed to stdout until after sending a prompt for input. This workaround causes pam to prompt the user to `press enter to continue' when polling on another device for MFA. no_hello_pin Disables Linux Hello PIN login for this service (e.g., for sudo or ssh ), even if Hello is configured globally.","title":"OPTIONS"},{"location":"reference/pam_himmelblau/#pam-configuration","text":"Configuring PAM ensures authentication requests go through Entra\u202fID when appropriate.","title":"PAM CONFIGURATION"},{"location":"reference/pam_himmelblau/#automatic-setup","text":"On Ubuntu/Debian: sudo pam-auth-update Enable [lq]Azure authentication[rq] and verify PAM files. On openSUSE Tumbleweed or SLE: pam-config --add --himmelblau The aad-tool configure-pam command also inserts recommended directives (dry-run unless --really is used).","title":"Automatic setup"},{"location":"reference/pam_himmelblau/#manual-configuration","text":"In /etc/pam.d/common-auth , ensure that the pam_himmelblau.so module is placed after other authentication methods (such as pam_unix.so ). Ensure that other authentication modules are not set to required , as this could cause authentication to fail prior to PAM communicating with Entra ID. Include the ignore_unknown_user option for Himmelblau. Ensure pam_deny.so is placed after all modules, so that unknown users are not implicitly allowed.","title":"Manual configuration"},{"location":"reference/pam_himmelblau/#note-if-you-intend-to-use-hello-or-passwordless-authentication-itcqs-recommended-that-pam_himmelblauso-be-placed-before-pam_unixso-in-the-pam-auth-stack-but-always-after-pam_localuserso-otherwise-pam_unix-will-unnecessarily-prompt-for-a-password","text":"auth required pam_env.so auth [default=1 ignore=ignore success=ok] pam_localuser.so auth sufficient pam_unix.so nullok try_first_pass auth sufficient pam_himmelblau.so ignore_unknown_user auth required pam_deny.so Configure /etc/pam.d/common-account in a similar manner. account [default=1 ignore=ignore success=ok] pam_localuser.so account sufficient pam_unix.so account sufficient pam_himmelblau.so ignore_unknown_user account required pam_deny.so In /etc/pam.d/common-session , set pam_himmelblau.so as an optional module. session optional pam_systemd.so session required pam_limits.so session optional pam_unix.so try_first_pass session optional pam_umask.so session optional pam_himmelblau.so session optional pam_env.so In /etc/pam.d/common-password , set pam_himmelblau.so as sufficient. password sufficient pam_himmelblau.so ignore_unknown_user password optional pam_gnome_keyring.so use_authtok password sufficient pam_unix.so use_authtok nullok shadow try_first_pass password required pam_deny.so","title":"Note: If you intend to use Hello or Passwordless authentication, it[cq]s recommended that pam_himmelblau.so be placed before pam_unix.so in the pam auth stack (but always after pam_localuser.so), otherwise pam_unix will unnecessarily prompt for a password."},{"location":"reference/pam_himmelblau/#return-values","text":"PAM_SUCCESS Authentication or Hello PIN update succeeded. PAM_AUTH_ERR Authentication failed. This may include incorrect credentials, rejected MFA, or other auth-layer failures. PAM_USER_UNKNOWN The user was not found in Entra\u202fID. This is bypassed if the ignore_unknown_user option is specified. PAM_IGNORE The module was instructed to skip processing (e.g., due to ignore_unknown_user ). This allows fallback to other PAM modules. PAM_SERVICE_ERR A configuration or initialization error occurred in the module, or a required daemon was unreachable. PAM_CRED_INSUFFICIENT The user did not meet the required credential policy. PAM_ABORT A critical, unrecoverable failure occurred[em]such as a panic inside the himmelblaud service.","title":"RETURN VALUES"},{"location":"reference/pam_himmelblau/#see-also","text":"himmelblaud(8) , aad-tool(1) , himmelblau.conf(5) , pam(8)","title":"SEE ALSO"},{"location":"reference/pam_himmelblau/#author","text":"David Mulder dmulder@himmelblau-idm.org, dmulder@samba.org","title":"AUTHOR"},{"location":"troubleshooting/Capturing-authentication-traffic-using-cirrus%E2%80%90scope/","text":"Capturing OAuth2 traffic when authenticating to Azure Entra ID is essential for debugging and resolving issues in the libhimmelblau library. By inspecting the detailed HTTP requests and responses exchanged during the authentication process, developers can identify discrepancies, such as malformed requests, unexpected status codes, or incorrect parameters. This comprehensive view helps pinpoint where errors occur, enabling targeted fixes and enhancements to improve the reliability and functionality of Himmelblau, ultimately leading to smoother integrations and user experiences. This guide walks you through how to capture and inspect authentication traffic using the cirrus-scope diagnostic tool along with mitmproxy . New: cirrus-scope now includes an obfuscate command to help automatically mask sensitive data from these captures before sharing them. Step-by-Step Instructions You\u2019ll learn how to capture traffic, then obfuscate sensitive details using cirrus-scope obfuscate . Download cirrus-scope : Prebuilt binaries are available from the official Himmelblau downloads page: \ud83d\udc49 https://himmelblau-idm.org/downloads.html Download mitmproxy : Download mitmproxy from their website , and extract the binaries. tar -xf mitmproxy-11.0.0-linux-x86_64.tar.gz Start mitmweb : Run the following command to start mitmweb : ./mitmweb This starts mitmweb and opens a web interface for monitoring HTTP and HTTPS traffic. Install the mitmproxy CA Certificate : On Ubuntu, sudo cp $HOME/.mitmproxy/mitmproxy-ca-cert.pem /usr/local/share/ca-certificates/mitmproxy.crt sudo update-ca-certificates Or on Fedora, sudo cp $HOME/.mitmproxy/mitmproxy-ca-cert.pem /etc/pki/ca-trust/source/anchors/ sudo update-ca-trust Or on openSUSE Leap, sudo cp $HOME/.mitmproxy/mitmproxy-ca-cert.pem /usr/share/pki/trust/anchors/mitmproxy.crt sudo update-ca-certificates Access the Web Interface : Open your web browser and go to: http://127.0.0.1:8081/ You should see the mitmweb dashboard for viewing captured traffic. Run cirrus-scope with Proxy Enabled : Run the desired test command from cirrus-scope , routing its traffic through mitmproxy by setting the HTTPS_PROXY environment variable. Example: HTTPS_PROXY=http://127.0.0.1:8080 cirrus-scope auth-test --name your_user@example.com You will be prompted to enter credentials interactively. You can add --debug for detailed logs: HTTPS_PROXY=http://127.0.0.1:8080 cirrus-scope auth-test --name your_user@example.com --debug Other available test commands include: enrollment-test : Simulates device enrollment refresh-token-acquire : Acquires new access tokens using a refresh token provision-hello-key-test : Tests Hello for Business key provisioning Capture and Save the HAR File : Go to the mitmweb dashboard in your web browser. Click on the \"File\" drop down menu, then \"Save\". Your browser will download a file called 'flows' Obfuscate the capture using cirrus-scope : To help protect sensitive information, run the built-in obfuscator on your captured flows file. This will automatically replace known tokens (like JWTs, Kerberos tickets, flow tokens, request blobs, and your tenant ID) with equal-length asterisk sequences so that the file remains structurally valid. Example: bash cirrus-scope obfuscate -i flows -o flows.obfuscated You can also specify explicit secrets to obfuscate using the --custom option, for example: ```bash cirrus-scope obfuscate -i flows -o flows.obfuscated \\ --custom \"your_user@example.com\" \\ --custom \"SuperSecretPassword\" ``` This ensures additional sensitive data like emails or passwords are masked. The resulting file flows.obfuscated will be safe to share for debugging, while still maintaining the exact format required for tools like mitmproxy. That's it! You have now captured, obfuscated, and saved HTTP(S) traffic as a HAR file. Important: Always use cirrus-scope obfuscate to sanitize your capture. Manually editing the file to remove secrets can corrupt the format, making it unreadable by mitmproxy or other tools. This tool replaces sensitive data with exact-length values to keep the file structurally valid. It remains your responsibility to review the file to ensure no secrets remain. Passwords and plaintext credentials are not detected automatically \u2014 always provide them explicitly via --custom if needed.","title":"Capturing authentication traffic using cirrus\u2010scope"},{"location":"troubleshooting/Capturing-authentication-traffic-using-cirrus%E2%80%90scope/#step-by-step-instructions","text":"You\u2019ll learn how to capture traffic, then obfuscate sensitive details using cirrus-scope obfuscate . Download cirrus-scope : Prebuilt binaries are available from the official Himmelblau downloads page: \ud83d\udc49 https://himmelblau-idm.org/downloads.html Download mitmproxy : Download mitmproxy from their website , and extract the binaries. tar -xf mitmproxy-11.0.0-linux-x86_64.tar.gz Start mitmweb : Run the following command to start mitmweb : ./mitmweb This starts mitmweb and opens a web interface for monitoring HTTP and HTTPS traffic. Install the mitmproxy CA Certificate : On Ubuntu, sudo cp $HOME/.mitmproxy/mitmproxy-ca-cert.pem /usr/local/share/ca-certificates/mitmproxy.crt sudo update-ca-certificates Or on Fedora, sudo cp $HOME/.mitmproxy/mitmproxy-ca-cert.pem /etc/pki/ca-trust/source/anchors/ sudo update-ca-trust Or on openSUSE Leap, sudo cp $HOME/.mitmproxy/mitmproxy-ca-cert.pem /usr/share/pki/trust/anchors/mitmproxy.crt sudo update-ca-certificates Access the Web Interface : Open your web browser and go to: http://127.0.0.1:8081/ You should see the mitmweb dashboard for viewing captured traffic. Run cirrus-scope with Proxy Enabled : Run the desired test command from cirrus-scope , routing its traffic through mitmproxy by setting the HTTPS_PROXY environment variable. Example: HTTPS_PROXY=http://127.0.0.1:8080 cirrus-scope auth-test --name your_user@example.com You will be prompted to enter credentials interactively. You can add --debug for detailed logs: HTTPS_PROXY=http://127.0.0.1:8080 cirrus-scope auth-test --name your_user@example.com --debug Other available test commands include: enrollment-test : Simulates device enrollment refresh-token-acquire : Acquires new access tokens using a refresh token provision-hello-key-test : Tests Hello for Business key provisioning Capture and Save the HAR File : Go to the mitmweb dashboard in your web browser. Click on the \"File\" drop down menu, then \"Save\". Your browser will download a file called 'flows' Obfuscate the capture using cirrus-scope : To help protect sensitive information, run the built-in obfuscator on your captured flows file. This will automatically replace known tokens (like JWTs, Kerberos tickets, flow tokens, request blobs, and your tenant ID) with equal-length asterisk sequences so that the file remains structurally valid. Example: bash cirrus-scope obfuscate -i flows -o flows.obfuscated You can also specify explicit secrets to obfuscate using the --custom option, for example: ```bash cirrus-scope obfuscate -i flows -o flows.obfuscated \\ --custom \"your_user@example.com\" \\ --custom \"SuperSecretPassword\" ``` This ensures additional sensitive data like emails or passwords are masked. The resulting file flows.obfuscated will be safe to share for debugging, while still maintaining the exact format required for tools like mitmproxy. That's it! You have now captured, obfuscated, and saved HTTP(S) traffic as a HAR file.","title":"Step-by-Step Instructions"},{"location":"troubleshooting/Capturing-authentication-traffic-using-cirrus%E2%80%90scope/#important","text":"Always use cirrus-scope obfuscate to sanitize your capture. Manually editing the file to remove secrets can corrupt the format, making it unreadable by mitmproxy or other tools. This tool replaces sensitive data with exact-length values to keep the file structurally valid. It remains your responsibility to review the file to ensure no secrets remain. Passwords and plaintext credentials are not detected automatically \u2014 always provide them explicitly via --custom if needed.","title":"Important:"},{"location":"troubleshooting/OpenSSH-Bug-2876-%E2%80%90--Unable-to-use-MFA-over-SSH-%E2%80%90-Workaround/","text":"Summary of Bug 2876 Bug 2876 in OpenSSH pertains to an issue with PAM info messages not being flushed to the console until further interaction is required. This leads to problems in scenarios where multiple authentication prompts are expected, such as with Microsoft Authenticator's Push MFA. Problem Behavior When attempting to authenticate via SSH with an account that requires Microsoft Authenticator (Push) MFA , the prompt displaying the number to enter into the app is delayed or not shown until after the initial authentication fails. This leads to confusion, as the user receives the MFA push notification on their device but cannot complete the authentication due to the missing prompt. Local Login (Working as Expected) When logging in locally (e.g., via su -l ), the password prompt and the MFA number prompt are displayed as expected, and the user is able to complete the login process: admin@dev01:~$ su -l user@domain.onmicrosoft.com Password: Open your Authenticator app, and enter the number '73' to sign in. user@domain.onmicrosoft.com@dev01:~$ whoami user@domain.onmicrosoft.com Remote SSH Login (Delayed MFA Prompt) When logging in remotely via SSH, only the password prompt is shown initially, and the MFA number prompt is delayed until the authentication fails: localuser@workstation:~$ ssh user@domain.onmicrosoft.com@dev01 (user@domain.onmicrosoft.com@dev01) Password: ## Note: The MFA push notification is received, but no number is shown to complete the authentication. (user@domain.onmicrosoft.com@dev01) Open your Authenticator app, and enter the number '59' to sign in. Password: ^C This behavior disrupts the MFA flow, as the number needed to complete the login is not shown to the user until the session has already failed. Upstream Status The fix for this issue has been proposed in Pull Request 452 on GitHub , but the upstream OpenSSH community has been slow to review and merge the patch. This means that users on most systems will continue to face this issue unless they apply the fix downstream. Downstream Fixes openSUSE and Ubuntu have both applied the patch in their respective distributions. Users running OpenSSH on these systems should be free of this bug on recent versions of the distributions. Working Around Bug 2876 in Himmelblau (introduced in Himmelblau 0.6.0) This bug can cause significant disruption to SSH-based logins. If you're using a system affected by Bug 2876 and the patch has not been applied upstream, you can work around the issue by configuring the pam_himmelblau.so module with the mfa_poll_prompt option. This forces the prompt to be shown to the user at the appropriate time. Step-by-Step Instructions Locate the PAM Configuration : See the Himmelblau instructions for configuring PAM . You could apply a targeted work around by modifying the file /etc/pam.d/sshd . Add the mfa_poll_prompt Option : To avoid the prompt delay caused by Bug 2876, modify the PAM configuration for Himmelblau by adding the mfa_poll_prompt option to the pam_himmelblau.so module. Example PAM configuration: auth required pam_himmelblau.so ignore_unknown_user mfa_poll_prompt Test the Setup : Attempt an SSH login using an account with Microsoft Authenticator Push MFA enabled and ensure that the MFA number prompt is displayed as expected. The mfa_poll_prompt option in the workaround introduces a \"Press enter to continue\" prompt during the MFA flow, which forces user interaction. This interaction triggers OpenSSH to flush its buffered output, causing the previously delayed MFA number prompt to be displayed. As a result, the user can view the MFA prompt and complete the authentication process without waiting for a failed login attempt. Here\u2019s an example of what the login process will look like to the user with the workaround in place: localuser@workstation:~$ ssh user@domain.onmicrosoft.com@dev01 (user@domain.onmicrosoft.com@dev01) Password: Open your Authenticator app, and enter the number '59' to sign in. Press enter to continue ## Note: The user must now press enter to continue the MFA authentication.","title":"OpenSSH Bug 2876 \u2010  Unable to use MFA over SSH \u2010 Workaround"},{"location":"troubleshooting/OpenSSH-Bug-2876-%E2%80%90--Unable-to-use-MFA-over-SSH-%E2%80%90-Workaround/#summary-of-bug-2876","text":"Bug 2876 in OpenSSH pertains to an issue with PAM info messages not being flushed to the console until further interaction is required. This leads to problems in scenarios where multiple authentication prompts are expected, such as with Microsoft Authenticator's Push MFA.","title":"Summary of Bug 2876"},{"location":"troubleshooting/OpenSSH-Bug-2876-%E2%80%90--Unable-to-use-MFA-over-SSH-%E2%80%90-Workaround/#problem-behavior","text":"When attempting to authenticate via SSH with an account that requires Microsoft Authenticator (Push) MFA , the prompt displaying the number to enter into the app is delayed or not shown until after the initial authentication fails. This leads to confusion, as the user receives the MFA push notification on their device but cannot complete the authentication due to the missing prompt.","title":"Problem Behavior"},{"location":"troubleshooting/OpenSSH-Bug-2876-%E2%80%90--Unable-to-use-MFA-over-SSH-%E2%80%90-Workaround/#local-login-working-as-expected","text":"When logging in locally (e.g., via su -l ), the password prompt and the MFA number prompt are displayed as expected, and the user is able to complete the login process: admin@dev01:~$ su -l user@domain.onmicrosoft.com Password: Open your Authenticator app, and enter the number '73' to sign in. user@domain.onmicrosoft.com@dev01:~$ whoami user@domain.onmicrosoft.com","title":"Local Login (Working as Expected)"},{"location":"troubleshooting/OpenSSH-Bug-2876-%E2%80%90--Unable-to-use-MFA-over-SSH-%E2%80%90-Workaround/#remote-ssh-login-delayed-mfa-prompt","text":"When logging in remotely via SSH, only the password prompt is shown initially, and the MFA number prompt is delayed until the authentication fails: localuser@workstation:~$ ssh user@domain.onmicrosoft.com@dev01 (user@domain.onmicrosoft.com@dev01) Password: ## Note: The MFA push notification is received, but no number is shown to complete the authentication. (user@domain.onmicrosoft.com@dev01) Open your Authenticator app, and enter the number '59' to sign in. Password: ^C This behavior disrupts the MFA flow, as the number needed to complete the login is not shown to the user until the session has already failed.","title":"Remote SSH Login (Delayed MFA Prompt)"},{"location":"troubleshooting/OpenSSH-Bug-2876-%E2%80%90--Unable-to-use-MFA-over-SSH-%E2%80%90-Workaround/#upstream-status","text":"The fix for this issue has been proposed in Pull Request 452 on GitHub , but the upstream OpenSSH community has been slow to review and merge the patch. This means that users on most systems will continue to face this issue unless they apply the fix downstream.","title":"Upstream Status"},{"location":"troubleshooting/OpenSSH-Bug-2876-%E2%80%90--Unable-to-use-MFA-over-SSH-%E2%80%90-Workaround/#downstream-fixes","text":"openSUSE and Ubuntu have both applied the patch in their respective distributions. Users running OpenSSH on these systems should be free of this bug on recent versions of the distributions.","title":"Downstream Fixes"},{"location":"troubleshooting/OpenSSH-Bug-2876-%E2%80%90--Unable-to-use-MFA-over-SSH-%E2%80%90-Workaround/#working-around-bug-2876-in-himmelblau-introduced-in-himmelblau-060","text":"This bug can cause significant disruption to SSH-based logins. If you're using a system affected by Bug 2876 and the patch has not been applied upstream, you can work around the issue by configuring the pam_himmelblau.so module with the mfa_poll_prompt option. This forces the prompt to be shown to the user at the appropriate time.","title":"Working Around Bug 2876 in Himmelblau (introduced in Himmelblau 0.6.0)"},{"location":"troubleshooting/OpenSSH-Bug-2876-%E2%80%90--Unable-to-use-MFA-over-SSH-%E2%80%90-Workaround/#step-by-step-instructions","text":"Locate the PAM Configuration : See the Himmelblau instructions for configuring PAM . You could apply a targeted work around by modifying the file /etc/pam.d/sshd . Add the mfa_poll_prompt Option : To avoid the prompt delay caused by Bug 2876, modify the PAM configuration for Himmelblau by adding the mfa_poll_prompt option to the pam_himmelblau.so module. Example PAM configuration: auth required pam_himmelblau.so ignore_unknown_user mfa_poll_prompt Test the Setup : Attempt an SSH login using an account with Microsoft Authenticator Push MFA enabled and ensure that the MFA number prompt is displayed as expected. The mfa_poll_prompt option in the workaround introduces a \"Press enter to continue\" prompt during the MFA flow, which forces user interaction. This interaction triggers OpenSSH to flush its buffered output, causing the previously delayed MFA number prompt to be displayed. As a result, the user can view the MFA prompt and complete the authentication process without waiting for a failed login attempt. Here\u2019s an example of what the login process will look like to the user with the workaround in place: localuser@workstation:~$ ssh user@domain.onmicrosoft.com@dev01 (user@domain.onmicrosoft.com@dev01) Password: Open your Authenticator app, and enter the number '59' to sign in. Press enter to continue ## Note: The user must now press enter to continue the MFA authentication.","title":"Step-by-Step Instructions"},{"location":"troubleshooting/Removing-all-Hello-PINs-%26-cached-PRTs-on-a-Himmelblau-host/","text":"Overview Hello PINs (and associated keys) for Himmelblau are stored in the SQLite database: /var/cache/himmelblaud/himmelblau.cache.db They are stored and encrypted as entries in the hsm_data_t table with keys like: <user>/hello <user>/hello_decoupled <user>/hello_prt Where <user> is the full UPN (e.g. alice@domain.com ). This guide provides a script to remove all Hello PINs (regular & decoupled) and cached PRTs, regardless of the user. What exactly gets deleted? Key pattern Meaning %/hello Hello PIN (normal, linked to Entra Id) %/hello_decoupled Hello PIN (offline / decoupled, for DAG MFA) %/hello_prt Cached PRT for offline login with SSO This ensures the host no longer has stored Hello PINs or cached tokens, forcing fresh authentication. The cleanup script Below is a simple shell script that will safely delete these keys using sqlite3 . It requires root privileges because /var/cache/himmelblaud/himmelblau.cache.db is owned by the himmelblaud user. \ud83d\udca1 Make sure the Himmelblau daemon is stopped while running this, to avoid database locking issues. sudo systemctl stop himmelblaud #!/usr/bin/env bash set -euo pipefail DB_PATH=\"/var/cache/himmelblaud/himmelblau.cache.db\" if [[ ! -f \"$DB_PATH\" ]]; then echo \"Error: Database not found at $DB_PATH\" exit 1 fi echo \"Removing all Hello PINs and cached PRTs from $DB_PATH ...\" sqlite3 \"$DB_PATH\" <<EOF DELETE FROM hsm_data_t WHERE key LIKE '%/hello'; DELETE FROM hsm_data_t WHERE key LIKE '%/hello_decoupled'; DELETE FROM hsm_data_t WHERE key LIKE '%/hello_prt'; EOF echo \"Cleanup completed.\" How to use Save the script to a file, e.g. remove_himmelblau_hello_pins.sh Make it executable: chmod +x remove_himmelblau_hello_pins.sh Stop Himmelblau daemon: sudo systemctl stop himmelblaud Run the script: sudo ./remove_himmelblau_hello_pins.sh Restart Himmelblau daemon: sudo systemctl start himmelblaud Notes for Himmelblau versions Himmelblau Version Key types present 0.9.x Only %/hello (regular PINs) >=1.0.x %/hello , %/hello_decoupled , %/hello_prt Done! The host is now wiped of all Hello PINs and cached PRTs. New PIN enrollments or sign-ins will need to occur on next use.","title":"Removing all Hello PINs & cached PRTs on a Himmelblau host"},{"location":"troubleshooting/Removing-all-Hello-PINs-%26-cached-PRTs-on-a-Himmelblau-host/#overview","text":"Hello PINs (and associated keys) for Himmelblau are stored in the SQLite database: /var/cache/himmelblaud/himmelblau.cache.db They are stored and encrypted as entries in the hsm_data_t table with keys like: <user>/hello <user>/hello_decoupled <user>/hello_prt Where <user> is the full UPN (e.g. alice@domain.com ). This guide provides a script to remove all Hello PINs (regular & decoupled) and cached PRTs, regardless of the user.","title":"Overview"},{"location":"troubleshooting/Removing-all-Hello-PINs-%26-cached-PRTs-on-a-Himmelblau-host/#what-exactly-gets-deleted","text":"Key pattern Meaning %/hello Hello PIN (normal, linked to Entra Id) %/hello_decoupled Hello PIN (offline / decoupled, for DAG MFA) %/hello_prt Cached PRT for offline login with SSO This ensures the host no longer has stored Hello PINs or cached tokens, forcing fresh authentication.","title":"What exactly gets deleted?"},{"location":"troubleshooting/Removing-all-Hello-PINs-%26-cached-PRTs-on-a-Himmelblau-host/#the-cleanup-script","text":"Below is a simple shell script that will safely delete these keys using sqlite3 . It requires root privileges because /var/cache/himmelblaud/himmelblau.cache.db is owned by the himmelblaud user. \ud83d\udca1 Make sure the Himmelblau daemon is stopped while running this, to avoid database locking issues. sudo systemctl stop himmelblaud #!/usr/bin/env bash set -euo pipefail DB_PATH=\"/var/cache/himmelblaud/himmelblau.cache.db\" if [[ ! -f \"$DB_PATH\" ]]; then echo \"Error: Database not found at $DB_PATH\" exit 1 fi echo \"Removing all Hello PINs and cached PRTs from $DB_PATH ...\" sqlite3 \"$DB_PATH\" <<EOF DELETE FROM hsm_data_t WHERE key LIKE '%/hello'; DELETE FROM hsm_data_t WHERE key LIKE '%/hello_decoupled'; DELETE FROM hsm_data_t WHERE key LIKE '%/hello_prt'; EOF echo \"Cleanup completed.\"","title":"The cleanup script"},{"location":"troubleshooting/Removing-all-Hello-PINs-%26-cached-PRTs-on-a-Himmelblau-host/#how-to-use","text":"Save the script to a file, e.g. remove_himmelblau_hello_pins.sh Make it executable: chmod +x remove_himmelblau_hello_pins.sh Stop Himmelblau daemon: sudo systemctl stop himmelblaud Run the script: sudo ./remove_himmelblau_hello_pins.sh Restart Himmelblau daemon: sudo systemctl start himmelblaud","title":"How to use"},{"location":"troubleshooting/Removing-all-Hello-PINs-%26-cached-PRTs-on-a-Himmelblau-host/#notes-for-himmelblau-versions","text":"Himmelblau Version Key types present 0.9.x Only %/hello (regular PINs) >=1.0.x %/hello , %/hello_decoupled , %/hello_prt Done! The host is now wiped of all Hello PINs and cached PRTs. New PIN enrollments or sign-ins will need to occur on next use.","title":"Notes for Himmelblau versions"},{"location":"troubleshooting/Testing-Himmelblau-Developer-Builds-with-Packet-Capture/","text":"A Himmelblau developer build allows you to proxy all communication between himmelblaud and Azure Entra ID. This is critical for diagnosing low-level authentication or policy issues. These instructions will walk you through setting up mitmproxy , ensuring your himmelblaud service is routed through it, installing the proxy certificate, and finally capturing and obfuscating the traffic. \ud83d\udea7 Developer Build Notice \u26a0\ufe0f IMPORTANT WARNING: This special Himmelblau developer build is strictly for debugging and diagnostics. It proxies authentication traffic through mitmproxy , exposing sensitive credentials and tokens. \u27a1\ufe0f Never run this in production. Use it only in controlled test environments to diagnose problems. \ud83d\udce8 How to get a developer build Developer builds are not public binaries. To obtain one: Contact David Mulder (project maintainer): \ud83d\udce7 Email: dmulder@himmelblau-idm.org \ud83d\udcac Matrix: #himmelblau\\:matrix.org 1. Verify your HTTPS_PROXY is set in the service file Open your himmelblaud systemd service file and confirm it is configured to use your local mitmproxy. On Ubuntu/Debian : sudo nano /etc/systemd/system/himmelblaud.service On RHEL/Fedora/openSUSE : sudo nano /usr/lib/systemd/system/himmelblaud.service Make sure it includes, and that the HTTPS_PROXY setting is correct for your mitmproxy instance: Environment=\"HTTPS_PROXY=http://127.0.0.1:8080\" Then reload systemd and restart himmelblaud : sudo systemctl daemon-reload sudo systemctl restart himmelblaud himmelblaud-tasks 2. Install and start mitmweb Download mitmproxy from https://mitmproxy.org/ , extract it, and run: ./mitmweb This launches a local web interface at http://127.0.0.1:8081/ . 3. Install the mitmproxy CA certificate This ensures your system trusts mitmproxy\u2019s TLS interception. Ubuntu/Debian: sudo cp ~/.mitmproxy/mitmproxy-ca-cert.pem /usr/local/share/ca-certificates/mitmproxy.crt sudo update-ca-certificates Fedora/RHEL: sudo cp ~/.mitmproxy/mitmproxy-ca-cert.pem /etc/pki/ca-trust/source/anchors/ sudo update-ca-trust openSUSE: sudo cp ~/.mitmproxy/mitmproxy-ca-cert.pem /usr/share/pki/trust/anchors/mitmproxy.crt sudo update-ca-certificates 4. Reproduce your Himmelblau issue At this point: himmelblaud is routing traffic through 127.0.0.1:8080 mitmweb is running to intercept traffic Trigger the behavior you\u2019re testing \u2014 e.g. SSH login, sudo , or any other process that hits pam_himmelblau . Watch the traffic appear in the mitmweb dashboard at http://127.0.0.1:8081/ . 5. Save the flow file In the mitmweb interface: Click File \u2192 Save . This downloads a file typically called flows . 6. Obfuscate sensitive data with cirrus-scope Before sharing your capture, sanitize it using: cirrus-scope obfuscate -i flows -o flows.obfuscated This automatically masks known sensitive data like JWTs, flow tokens, tenant IDs, etc. You can also specify explicit items to redact (emails, passwords, etc): cirrus-scope obfuscate -i flows -o flows.obfuscated \\ --custom \"admin@contoso.com\" \\ --custom \"SuperSecretPassword\" Done! You can now safely provide flows.obfuscated for debugging. It maintains the structure needed for tools like mitmproxy to replay or analyze, while protecting your secrets. \ud83d\udea8 Important Note Always run cirrus-scope obfuscate before sharing captures. Manually editing the file may break its format. This tool preserves lengths to ensure it remains valid for protocol testing.","title":"Testing Himmelblau Developer Builds with Packet Capture"},{"location":"troubleshooting/Testing-Himmelblau-Developer-Builds-with-Packet-Capture/#developer-build-notice","text":"\u26a0\ufe0f IMPORTANT WARNING: This special Himmelblau developer build is strictly for debugging and diagnostics. It proxies authentication traffic through mitmproxy , exposing sensitive credentials and tokens. \u27a1\ufe0f Never run this in production. Use it only in controlled test environments to diagnose problems.","title":"\ud83d\udea7 Developer Build Notice"},{"location":"troubleshooting/Testing-Himmelblau-Developer-Builds-with-Packet-Capture/#how-to-get-a-developer-build","text":"Developer builds are not public binaries. To obtain one: Contact David Mulder (project maintainer): \ud83d\udce7 Email: dmulder@himmelblau-idm.org \ud83d\udcac Matrix: #himmelblau\\:matrix.org","title":"\ud83d\udce8 How to get a developer build"},{"location":"troubleshooting/Testing-Himmelblau-Developer-Builds-with-Packet-Capture/#1-verify-your-https_proxy-is-set-in-the-service-file","text":"Open your himmelblaud systemd service file and confirm it is configured to use your local mitmproxy. On Ubuntu/Debian : sudo nano /etc/systemd/system/himmelblaud.service On RHEL/Fedora/openSUSE : sudo nano /usr/lib/systemd/system/himmelblaud.service Make sure it includes, and that the HTTPS_PROXY setting is correct for your mitmproxy instance: Environment=\"HTTPS_PROXY=http://127.0.0.1:8080\" Then reload systemd and restart himmelblaud : sudo systemctl daemon-reload sudo systemctl restart himmelblaud himmelblaud-tasks","title":"1. Verify your HTTPS_PROXY is set in the service file"},{"location":"troubleshooting/Testing-Himmelblau-Developer-Builds-with-Packet-Capture/#2-install-and-start-mitmweb","text":"Download mitmproxy from https://mitmproxy.org/ , extract it, and run: ./mitmweb This launches a local web interface at http://127.0.0.1:8081/ .","title":"2. Install and start mitmweb"},{"location":"troubleshooting/Testing-Himmelblau-Developer-Builds-with-Packet-Capture/#3-install-the-mitmproxy-ca-certificate","text":"This ensures your system trusts mitmproxy\u2019s TLS interception. Ubuntu/Debian: sudo cp ~/.mitmproxy/mitmproxy-ca-cert.pem /usr/local/share/ca-certificates/mitmproxy.crt sudo update-ca-certificates Fedora/RHEL: sudo cp ~/.mitmproxy/mitmproxy-ca-cert.pem /etc/pki/ca-trust/source/anchors/ sudo update-ca-trust openSUSE: sudo cp ~/.mitmproxy/mitmproxy-ca-cert.pem /usr/share/pki/trust/anchors/mitmproxy.crt sudo update-ca-certificates","title":"3. Install the mitmproxy CA certificate"},{"location":"troubleshooting/Testing-Himmelblau-Developer-Builds-with-Packet-Capture/#4-reproduce-your-himmelblau-issue","text":"At this point: himmelblaud is routing traffic through 127.0.0.1:8080 mitmweb is running to intercept traffic Trigger the behavior you\u2019re testing \u2014 e.g. SSH login, sudo , or any other process that hits pam_himmelblau . Watch the traffic appear in the mitmweb dashboard at http://127.0.0.1:8081/ .","title":"4. Reproduce your Himmelblau issue"},{"location":"troubleshooting/Testing-Himmelblau-Developer-Builds-with-Packet-Capture/#5-save-the-flow-file","text":"In the mitmweb interface: Click File \u2192 Save . This downloads a file typically called flows .","title":"5. Save the flow file"},{"location":"troubleshooting/Testing-Himmelblau-Developer-Builds-with-Packet-Capture/#6-obfuscate-sensitive-data-with-cirrus-scope","text":"Before sharing your capture, sanitize it using: cirrus-scope obfuscate -i flows -o flows.obfuscated This automatically masks known sensitive data like JWTs, flow tokens, tenant IDs, etc. You can also specify explicit items to redact (emails, passwords, etc): cirrus-scope obfuscate -i flows -o flows.obfuscated \\ --custom \"admin@contoso.com\" \\ --custom \"SuperSecretPassword\"","title":"6. Obfuscate sensitive data with cirrus-scope"},{"location":"troubleshooting/Testing-Himmelblau-Developer-Builds-with-Packet-Capture/#done","text":"You can now safely provide flows.obfuscated for debugging. It maintains the structure needed for tools like mitmproxy to replay or analyze, while protecting your secrets.","title":"Done!"},{"location":"troubleshooting/Testing-Himmelblau-Developer-Builds-with-Packet-Capture/#important-note","text":"Always run cirrus-scope obfuscate before sharing captures. Manually editing the file may break its format. This tool preserves lengths to ensure it remains valid for protocol testing.","title":"\ud83d\udea8 Important Note"},{"location":"troubleshooting/Troubleshooting%3A-%60The-user-%27...%27-already-exists%60-and-fake-users-listed-in-NSS/","text":"Overview When using Himmelblau, you might encounter the error: useradd: user 'test1' already exists or similar behavior when attempting to create local users. You might also notice that nss responds affirmatively to the existence of fake users: $ getent passwd fake_user1 fake_user1@example.com:x:955955525:955955525::/home/fake_user1:/bin/bash $ getent passwd fake_user2 fake_user2@example.com:x:1881368896:1881368896::/home/fake_user2:/bin/bash This problem occurs even for users that neither exist locally nor in your Azure Entra ID tenant. Additionally, this issue can lead to complications with package management tools (e.g., apt or dnf ) that need to create system users during installation. Root Cause This behavior arises from the cn_name_mapping parameter in your himmelblau.conf configuration file. By default, this parameter is enabled ( true ) unless explicitly set to false . When enabled, it automatically maps common names (CN) to user principal names (UPN). The issue appears to occur because user enumeration is disabled in Azure Entra ID . Azure Entra ID is responding to all user existence requests as if the user does exist , regardless of whether the user truly exists in the directory. It's unknown which setting in Azure Entra Id is causing this behavior, but it is assumed that Microsoft has implemented this behavior to ensure authentication does not fail for valid users. If the system always responded that users do not exist, authentication would fail even for legitimate accounts. It's assumed that the purpose of this behavior is to prevent the enumeration of valid UPN names from the directory. When an attacker is able to enumerate a list of valid UPN names, it can enable password spray attacks, brute force attacks, phishing attacks, and password reuse attacks. Impact Local User Management : System tools like useradd fail to create new users. Package Installation : Software installations that create system users for daemons may fail, causing package dependency issues. General User Queries : Tools like getent passwd may list users that do not exist. Solution: Disable cn_name_mapping To mitigate this issue, disable the cn_name_mapping parameter in your Himmelblau configuration file. Locate the Configuration File : The default configuration file is located at: /etc/himmelblau/himmelblau.conf Edit the File : Open the file in your preferred text editor: sudo nano /etc/himmelblau/himmelblau.conf Disable cn_name_mapping : Locate the [global] section and add or modify the following line: cn_name_mapping = false Restart Himmelblau Services : After saving the changes, restart the Himmelblau services to apply the new configuration: sudo systemctl restart himmelblaud sudo systemctl restart himmelblaud-tasks After disabling cn_name_mapping , all users will be required to authenticate to the host using their UPN. Verification Check user enumeration again: getent passwd test1 Ensure the user is not falsely listed. Retry adding a new user: sudo useradd test1 It should now succeed without errors. Notes Disabling cn_name_mapping prevents Himmelblau from making optimistic assumptions about user existence. This adjustment ensures compatibility with environments where Azure Entra ID has user enumeration disabled, aligning expected behavior with the tenant\u2019s security configuration. Additional References For more details about himmelblau.conf parameters, refer to the Himmelblau Configuration Guide or the himmelblau.conf man page . If you continue experiencing issues, consider clearing or invalidating the Himmelblau cache using the aad-tool utility: sudo aad-tool cache-clear","title":"Troubleshooting: `The user '...' already exists` and fake users listed in NSS"},{"location":"troubleshooting/Troubleshooting%3A-%60The-user-%27...%27-already-exists%60-and-fake-users-listed-in-NSS/#overview","text":"When using Himmelblau, you might encounter the error: useradd: user 'test1' already exists or similar behavior when attempting to create local users. You might also notice that nss responds affirmatively to the existence of fake users: $ getent passwd fake_user1 fake_user1@example.com:x:955955525:955955525::/home/fake_user1:/bin/bash $ getent passwd fake_user2 fake_user2@example.com:x:1881368896:1881368896::/home/fake_user2:/bin/bash This problem occurs even for users that neither exist locally nor in your Azure Entra ID tenant. Additionally, this issue can lead to complications with package management tools (e.g., apt or dnf ) that need to create system users during installation.","title":"Overview"},{"location":"troubleshooting/Troubleshooting%3A-%60The-user-%27...%27-already-exists%60-and-fake-users-listed-in-NSS/#root-cause","text":"This behavior arises from the cn_name_mapping parameter in your himmelblau.conf configuration file. By default, this parameter is enabled ( true ) unless explicitly set to false . When enabled, it automatically maps common names (CN) to user principal names (UPN). The issue appears to occur because user enumeration is disabled in Azure Entra ID . Azure Entra ID is responding to all user existence requests as if the user does exist , regardless of whether the user truly exists in the directory. It's unknown which setting in Azure Entra Id is causing this behavior, but it is assumed that Microsoft has implemented this behavior to ensure authentication does not fail for valid users. If the system always responded that users do not exist, authentication would fail even for legitimate accounts. It's assumed that the purpose of this behavior is to prevent the enumeration of valid UPN names from the directory. When an attacker is able to enumerate a list of valid UPN names, it can enable password spray attacks, brute force attacks, phishing attacks, and password reuse attacks.","title":"Root Cause"},{"location":"troubleshooting/Troubleshooting%3A-%60The-user-%27...%27-already-exists%60-and-fake-users-listed-in-NSS/#impact","text":"Local User Management : System tools like useradd fail to create new users. Package Installation : Software installations that create system users for daemons may fail, causing package dependency issues. General User Queries : Tools like getent passwd may list users that do not exist.","title":"Impact"},{"location":"troubleshooting/Troubleshooting%3A-%60The-user-%27...%27-already-exists%60-and-fake-users-listed-in-NSS/#solution-disable-cn_name_mapping","text":"To mitigate this issue, disable the cn_name_mapping parameter in your Himmelblau configuration file. Locate the Configuration File : The default configuration file is located at: /etc/himmelblau/himmelblau.conf Edit the File : Open the file in your preferred text editor: sudo nano /etc/himmelblau/himmelblau.conf Disable cn_name_mapping : Locate the [global] section and add or modify the following line: cn_name_mapping = false Restart Himmelblau Services : After saving the changes, restart the Himmelblau services to apply the new configuration: sudo systemctl restart himmelblaud sudo systemctl restart himmelblaud-tasks After disabling cn_name_mapping , all users will be required to authenticate to the host using their UPN.","title":"Solution: Disable cn_name_mapping"},{"location":"troubleshooting/Troubleshooting%3A-%60The-user-%27...%27-already-exists%60-and-fake-users-listed-in-NSS/#verification","text":"Check user enumeration again: getent passwd test1 Ensure the user is not falsely listed. Retry adding a new user: sudo useradd test1 It should now succeed without errors.","title":"Verification"},{"location":"troubleshooting/Troubleshooting%3A-%60The-user-%27...%27-already-exists%60-and-fake-users-listed-in-NSS/#notes","text":"Disabling cn_name_mapping prevents Himmelblau from making optimistic assumptions about user existence. This adjustment ensures compatibility with environments where Azure Entra ID has user enumeration disabled, aligning expected behavior with the tenant\u2019s security configuration.","title":"Notes"},{"location":"troubleshooting/Troubleshooting%3A-%60The-user-%27...%27-already-exists%60-and-fake-users-listed-in-NSS/#additional-references","text":"For more details about himmelblau.conf parameters, refer to the Himmelblau Configuration Guide or the himmelblau.conf man page . If you continue experiencing issues, consider clearing or invalidating the Himmelblau cache using the aad-tool utility: sudo aad-tool cache-clear","title":"Additional References"},{"location":"troubleshooting/Write-Permissions-for-the-%60logon_script%60-Parameter-in-Himmelblau/","text":"Overview In Himmelblau, the logon_script parameter in himmelblau.conf specifies a script that is executed by the himmelblaud-tasks service at logon time. To ensure the script has the appropriate write access, it may be necessary to modify the himmelblaud-tasks.service file to include specific directories in the ReadWritePaths directive. Steps to Modify the Service File for logon_script Locate the himmelblaud-tasks.service File On Rocky/SUSE Linux: sudo vim /usr/lib/systemd/system/himmelblaud-tasks.service On Debian/Ubuntu: sudo nano /etc/systemd/system/himmelblaud-tasks.service Edit the ReadWritePaths Directive Add the paths that need write access for the script specified by logon_script . For example, if the script logs output to /var/log , include /var/log in ReadWritePaths . Updated section of the service file: [Service] ReadWritePaths=/home /var/run/himmelblaud /var/log Save and Close the File Reload systemd and Restart the Service Reload systemd to apply the changes: sudo systemctl daemon-reload Restart the service: sudo systemctl restart himmelblaud-tasks Following these steps will ensure that the logon_script has the necessary permissions to write to the specified paths.","title":"Write Permissions for the `logon script` Parameter in Himmelblau"},{"location":"troubleshooting/Write-Permissions-for-the-%60logon_script%60-Parameter-in-Himmelblau/#overview","text":"In Himmelblau, the logon_script parameter in himmelblau.conf specifies a script that is executed by the himmelblaud-tasks service at logon time. To ensure the script has the appropriate write access, it may be necessary to modify the himmelblaud-tasks.service file to include specific directories in the ReadWritePaths directive.","title":"Overview"},{"location":"troubleshooting/Write-Permissions-for-the-%60logon_script%60-Parameter-in-Himmelblau/#steps-to-modify-the-service-file-for-logon_script","text":"Locate the himmelblaud-tasks.service File On Rocky/SUSE Linux: sudo vim /usr/lib/systemd/system/himmelblaud-tasks.service On Debian/Ubuntu: sudo nano /etc/systemd/system/himmelblaud-tasks.service Edit the ReadWritePaths Directive Add the paths that need write access for the script specified by logon_script . For example, if the script logs output to /var/log , include /var/log in ReadWritePaths . Updated section of the service file: [Service] ReadWritePaths=/home /var/run/himmelblaud /var/log Save and Close the File Reload systemd and Restart the Service Reload systemd to apply the changes: sudo systemctl daemon-reload Restart the service: sudo systemctl restart himmelblaud-tasks Following these steps will ensure that the logon_script has the necessary permissions to write to the specified paths.","title":"Steps to Modify the Service File for logon_script"}]}