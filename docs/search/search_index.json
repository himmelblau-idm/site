{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Quickstart Himmelblau is an open-source authentication framework that brings Microsoft Entra ID login, policy enforcement, and Hello PIN support to Linux systems. This documentation will guide you through installation, configuration, and best practices for integrating Himmelblau into your environment. Get Started \ud83d\udce5 Installation Guide \u2699\ufe0f Configuration Reference \ud83d\udd10 NSS and PAM Setup \ud83e\udde0 Understanding Hello PIN and Enrollment Supported Linux Distributions Loading supported distributions... The following distributions have packages upstream: Distribution Version openSUSE Tumbleweed SUSE Linux Enterprise 15 SP7 Installing Himmelblau Himmelblau provides the necessary tools and utilities to enable authentication with Azure Entra ID. Download the packages for your distribution , and install them using your flavor of package manager: Fedora and Rocky Linux: sudo dnf install ./himmelblau-0.8.0-1.x86_64-fedora41.rpm \\ ./himmelblau-sshd-config-0.8.0-1.x86_64-fedora41.rpm \\ ./himmelblau-sso-0.8.0-1.x86_64-fedora41.rpm \\ ./nss-himmelblau-0.8.0-1.x86_64-fedora41.rpm \\ ./pam-himmelblau-0.8.0-1.x86_64-fedora41.rpm openSUSE/SUSE Linux Enterprise: sudo zypper install ./himmelblau-0.8.0-1.x86_64-sle15sp6.rpm \\ ./himmelblau-sshd-config-0.8.0-1.x86_64-sle15sp6.rpm \\ ./himmelblau-sso-0.8.0-1.x86_64-sle15sp6.rpm \\ ./nss-himmelblau-0.8.0-1.x86_64-sle15sp6.rpm \\ ./pam-himmelblau-0.8.0-1.x86_64-sle15sp6.rpm Debian/Ubuntu: sudo apt install ./himmelblau_0.8.0-debian12_amd64.deb \\ ./himmelblau-sshd-config_0.8.0-debian12_amd64.deb \\ ./himmelblau-sso_0.8.0-debian12_amd64.deb \\ ./nss-himmelblau_0.8.0-debian12_amd64.deb \\ ./pam-himmelblau_0.8.0-debian12_amd64.deb Configuring Himmelblau To enable authentication, you must configure the domains option in the /etc/himmelblau/himmelblau.conf file. This setting determines which domains are permitted to authenticate to the host. You MUST only specify the primary domain from each tenant. All other configuration options are optional. [global] domains = contoso.onmicrosoft.com Note: Leaving the pam_allow_groups option unset in the /etc/himmelblau/himmelblau.conf file permits all users to authenticate . Note: On Ubuntu, you should additionally set use_etc_skel to true and configure home_attr and home_alias to match (I recommend using the CN attribute). These parameters are necessary, otherwise Ubuntu's snaps will fail to execute. These settings are set by default using the Himmelblau project Debian/Ubuntu packages. [global] home_attr = CN home_alias = CN use_etc_skel = true Run the daemon Enable and start the himmelblaud and himmelblaud-tasks daemons. The himmelblaud daemon communicates with Entra ID and facilitates device, Hello PIN enrollment, and authentication. The himmelblaud-tasks daemon is responsible for authenticated tasks, such as creating the users home directory. systemctl enable himmelblaud himmelblaud-tasks systemctl start himmelblaud himmelblaud-tasks Disable nscd It is recommended that the Name Service Cache daemon ( nscd ) be disabled. The nscd daemon caches name service lookups, including user and group information obtained from sources like /etc/passwd and /etc/group . When integrating with Azure Entra ID, it's important to ensure that the most up-to-date user and group information is consistently retrieved from the directory. Disabling nscd helps avoid potential inconsistencies that may arise from cached data not reflecting changes made in Azure Entra ID. systemctl stop nscd systemctl disable nscd systemctl mask nscd Setup NSS Configuring NSS (Name Service Switch) is essential in integrating Linux hosts with Azure Entra ID using Himmelblau. By configuring NSS to include himmelblau alongside sources such as compat , systemd , etc., the system knows to query Azure Entra ID for user and group information. The NSS configuration file is found at /etc/nsswitch.conf . The himmelblau NSS module name should be appended to the passwd , group and shadow entries. passwd: compat systemd himmelblau group: compat systemd himmelblau shadow: compat systemd himmelblau Setup PAM PAM enables flexible authentication mechanisms by allowing administrators to define authentication policies through modular components. Configuring PAM for Azure Entra ID that users can authenticate using their Azure Entra ID credentials. By configuring PAM to include the Himmelblau module, authentication requests are directed to Azure Entra ID. To configure Himmelblau for PAM on openSUSE Tumbleweed, simply use pam-config: pam-config --add --himmelblau To configure Himmelblau for PAM on Ubuntu/Debian distros: sudo pam-auth-update Then ensure the Azure authentication checkbox is set. Check the pam files afterward to ensure the configuration was successful. Otherwise configure pam manually: In /etc/pam.d/common-auth , ensure that the pam_himmelblau.so module is placed after other authentication methods (such as pam_unix.so ). Ensure that other authentication modules are not set to required , as this could cause authentication to fail prior to PAM communicating with Entra ID. Include the ignore_unknown_user option for Himmelblau. Ensure pam_deny.so is placed after all modules, so that unknown users are not implicitly allowed. Note: If you intend to use Hello or Passwordless authentication, it's recommended that pam_himmelblau.so be placed before pam_unix.so in the pam auth stack (but always after pam_localuser.so ), otherwise pam_unix will unnecessarily prompt for a password. auth required pam_env.so auth [default=1 ignore=ignore success=ok] pam_localuser.so auth sufficient pam_unix.so nullok try_first_pass auth sufficient pam_himmelblau.so ignore_unknown_user auth required pam_deny.so Configure /etc/pam.d/common-account in a similar manner. account [default=1 ignore=ignore success=ok] pam_localuser.so account sufficient pam_unix.so account sufficient pam_himmelblau.so ignore_unknown_user account required pam_deny.so In /etc/pam.d/common-session , set pam_himmelblau.so as an optional module. session optional pam_systemd.so session required pam_limits.so session optional pam_unix.so try_first_pass session optional pam_umask.so session optional pam_himmelblau.so session optional pam_env.so In /etc/pam.d/common-password , set pam_himmelblau.so as sufficient. password sufficient pam_himmelblau.so ignore_unknown_user password optional pam_gnome_keyring.so use_authtok password sufficient pam_unix.so use_authtok nullok shadow try_first_pass password required pam_deny.so Enrolling the Device and Hello PIN A Windows Hello PIN offers a secure and convenient authentication method by leveraging strong encryption, local authentication capabilities, and integration with Entra ID. By setting a PIN on a soft TPM object and unlocking it securely, users can authenticate to their devices and Azure services with confidence in the security of their credentials. If you're coming from using Active Directory, you're familiar with a device join. In Azure Entra ID, enrollment (device join) is performed by individual users who can enroll a maximum of 50 devices each (by default) . Instead of being performed as an administrative action, enrollment happens at authentication time, and the first user to authenticate to a device becomes the owner of the device in Entra ID. Subsequent users who are authorized may authenticate to the device, but will not own the device. In a workplace setting, administrators would be responsible for configuring the himmelblau.conf file, as well as pam and nss, but enrollment would be performed by the user when they receive the device. opensuse-himmelblau login: tux@contoso.onmicrosoft.com Password: Please type in the code displayed on your authenticator app from your device: Code: Set up a PIN A Hello PIN is a fast, secure way to signin to your device, apps, and services. New PIN: Confirm PIN: Have a lot of fun... tux@contoso.onmicrosoft.com@opensuse-himmelblau:~> To enroll your device in Entra ID: Login: At the login prompt, enter your username in the format tux@contoso.onmicrosoft.com. Enter your password when prompted. MFA: You'll be prompted to provide multi-factor authentication, using your prefered method. Your device is now enrolled in Entra ID. Set up a PIN: You'll be prompted to set up a PIN for Windows Hello. This PIN serves as a fast and secure way to sign in to your device, apps, and services. Your PIN must be between 6 and 32 characters in length. Enter a new PIN of your choice when prompted. Confirm the new PIN by entering it again. Completion: You are now enrolled in Windows Hello PIN authentication. Ensure that you choose a strong and memorable PIN to maintain the security of your device. Additionally, keep your PIN confidential and do not share it with others to prevent unauthorized access to your device and associated services. Your PIN is unique to this host, and will not effect authentication to other hosts and Azure services. You can now use your newly set up PIN to authenticate and access your device.","title":"Quickstart"},{"location":"#quickstart","text":"Himmelblau is an open-source authentication framework that brings Microsoft Entra ID login, policy enforcement, and Hello PIN support to Linux systems. This documentation will guide you through installation, configuration, and best practices for integrating Himmelblau into your environment.","title":"Quickstart"},{"location":"#get-started","text":"\ud83d\udce5 Installation Guide \u2699\ufe0f Configuration Reference \ud83d\udd10 NSS and PAM Setup \ud83e\udde0 Understanding Hello PIN and Enrollment","title":"Get Started"},{"location":"#supported-linux-distributions","text":"Loading supported distributions... The following distributions have packages upstream: Distribution Version openSUSE Tumbleweed SUSE Linux Enterprise 15 SP7","title":"Supported Linux Distributions"},{"location":"#installing-himmelblau","text":"Himmelblau provides the necessary tools and utilities to enable authentication with Azure Entra ID. Download the packages for your distribution , and install them using your flavor of package manager:","title":"Installing Himmelblau"},{"location":"#fedora-and-rocky-linux","text":"sudo dnf install ./himmelblau-0.8.0-1.x86_64-fedora41.rpm \\ ./himmelblau-sshd-config-0.8.0-1.x86_64-fedora41.rpm \\ ./himmelblau-sso-0.8.0-1.x86_64-fedora41.rpm \\ ./nss-himmelblau-0.8.0-1.x86_64-fedora41.rpm \\ ./pam-himmelblau-0.8.0-1.x86_64-fedora41.rpm","title":"Fedora and Rocky Linux:"},{"location":"#opensusesuse-linux-enterprise","text":"sudo zypper install ./himmelblau-0.8.0-1.x86_64-sle15sp6.rpm \\ ./himmelblau-sshd-config-0.8.0-1.x86_64-sle15sp6.rpm \\ ./himmelblau-sso-0.8.0-1.x86_64-sle15sp6.rpm \\ ./nss-himmelblau-0.8.0-1.x86_64-sle15sp6.rpm \\ ./pam-himmelblau-0.8.0-1.x86_64-sle15sp6.rpm","title":"openSUSE/SUSE Linux Enterprise:"},{"location":"#debianubuntu","text":"sudo apt install ./himmelblau_0.8.0-debian12_amd64.deb \\ ./himmelblau-sshd-config_0.8.0-debian12_amd64.deb \\ ./himmelblau-sso_0.8.0-debian12_amd64.deb \\ ./nss-himmelblau_0.8.0-debian12_amd64.deb \\ ./pam-himmelblau_0.8.0-debian12_amd64.deb","title":"Debian/Ubuntu:"},{"location":"#configuring-himmelblau","text":"To enable authentication, you must configure the domains option in the /etc/himmelblau/himmelblau.conf file. This setting determines which domains are permitted to authenticate to the host. You MUST only specify the primary domain from each tenant. All other configuration options are optional. [global] domains = contoso.onmicrosoft.com Note: Leaving the pam_allow_groups option unset in the /etc/himmelblau/himmelblau.conf file permits all users to authenticate . Note: On Ubuntu, you should additionally set use_etc_skel to true and configure home_attr and home_alias to match (I recommend using the CN attribute). These parameters are necessary, otherwise Ubuntu's snaps will fail to execute. These settings are set by default using the Himmelblau project Debian/Ubuntu packages. [global] home_attr = CN home_alias = CN use_etc_skel = true","title":"Configuring Himmelblau"},{"location":"#run-the-daemon","text":"Enable and start the himmelblaud and himmelblaud-tasks daemons. The himmelblaud daemon communicates with Entra ID and facilitates device, Hello PIN enrollment, and authentication. The himmelblaud-tasks daemon is responsible for authenticated tasks, such as creating the users home directory. systemctl enable himmelblaud himmelblaud-tasks systemctl start himmelblaud himmelblaud-tasks","title":"Run the daemon"},{"location":"#disable-nscd","text":"It is recommended that the Name Service Cache daemon ( nscd ) be disabled. The nscd daemon caches name service lookups, including user and group information obtained from sources like /etc/passwd and /etc/group . When integrating with Azure Entra ID, it's important to ensure that the most up-to-date user and group information is consistently retrieved from the directory. Disabling nscd helps avoid potential inconsistencies that may arise from cached data not reflecting changes made in Azure Entra ID. systemctl stop nscd systemctl disable nscd systemctl mask nscd","title":"Disable nscd"},{"location":"#setup-nss","text":"Configuring NSS (Name Service Switch) is essential in integrating Linux hosts with Azure Entra ID using Himmelblau. By configuring NSS to include himmelblau alongside sources such as compat , systemd , etc., the system knows to query Azure Entra ID for user and group information. The NSS configuration file is found at /etc/nsswitch.conf . The himmelblau NSS module name should be appended to the passwd , group and shadow entries. passwd: compat systemd himmelblau group: compat systemd himmelblau shadow: compat systemd himmelblau","title":"Setup NSS"},{"location":"#setup-pam","text":"PAM enables flexible authentication mechanisms by allowing administrators to define authentication policies through modular components. Configuring PAM for Azure Entra ID that users can authenticate using their Azure Entra ID credentials. By configuring PAM to include the Himmelblau module, authentication requests are directed to Azure Entra ID. To configure Himmelblau for PAM on openSUSE Tumbleweed, simply use pam-config: pam-config --add --himmelblau To configure Himmelblau for PAM on Ubuntu/Debian distros: sudo pam-auth-update Then ensure the Azure authentication checkbox is set. Check the pam files afterward to ensure the configuration was successful. Otherwise configure pam manually: In /etc/pam.d/common-auth , ensure that the pam_himmelblau.so module is placed after other authentication methods (such as pam_unix.so ). Ensure that other authentication modules are not set to required , as this could cause authentication to fail prior to PAM communicating with Entra ID. Include the ignore_unknown_user option for Himmelblau. Ensure pam_deny.so is placed after all modules, so that unknown users are not implicitly allowed. Note: If you intend to use Hello or Passwordless authentication, it's recommended that pam_himmelblau.so be placed before pam_unix.so in the pam auth stack (but always after pam_localuser.so ), otherwise pam_unix will unnecessarily prompt for a password. auth required pam_env.so auth [default=1 ignore=ignore success=ok] pam_localuser.so auth sufficient pam_unix.so nullok try_first_pass auth sufficient pam_himmelblau.so ignore_unknown_user auth required pam_deny.so Configure /etc/pam.d/common-account in a similar manner. account [default=1 ignore=ignore success=ok] pam_localuser.so account sufficient pam_unix.so account sufficient pam_himmelblau.so ignore_unknown_user account required pam_deny.so In /etc/pam.d/common-session , set pam_himmelblau.so as an optional module. session optional pam_systemd.so session required pam_limits.so session optional pam_unix.so try_first_pass session optional pam_umask.so session optional pam_himmelblau.so session optional pam_env.so In /etc/pam.d/common-password , set pam_himmelblau.so as sufficient. password sufficient pam_himmelblau.so ignore_unknown_user password optional pam_gnome_keyring.so use_authtok password sufficient pam_unix.so use_authtok nullok shadow try_first_pass password required pam_deny.so","title":"Setup PAM"},{"location":"#enrolling-the-device-and-hello-pin","text":"A Windows Hello PIN offers a secure and convenient authentication method by leveraging strong encryption, local authentication capabilities, and integration with Entra ID. By setting a PIN on a soft TPM object and unlocking it securely, users can authenticate to their devices and Azure services with confidence in the security of their credentials. If you're coming from using Active Directory, you're familiar with a device join. In Azure Entra ID, enrollment (device join) is performed by individual users who can enroll a maximum of 50 devices each (by default) . Instead of being performed as an administrative action, enrollment happens at authentication time, and the first user to authenticate to a device becomes the owner of the device in Entra ID. Subsequent users who are authorized may authenticate to the device, but will not own the device. In a workplace setting, administrators would be responsible for configuring the himmelblau.conf file, as well as pam and nss, but enrollment would be performed by the user when they receive the device. opensuse-himmelblau login: tux@contoso.onmicrosoft.com Password: Please type in the code displayed on your authenticator app from your device: Code: Set up a PIN A Hello PIN is a fast, secure way to signin to your device, apps, and services. New PIN: Confirm PIN: Have a lot of fun... tux@contoso.onmicrosoft.com@opensuse-himmelblau:~> To enroll your device in Entra ID: Login: At the login prompt, enter your username in the format tux@contoso.onmicrosoft.com. Enter your password when prompted. MFA: You'll be prompted to provide multi-factor authentication, using your prefered method. Your device is now enrolled in Entra ID. Set up a PIN: You'll be prompted to set up a PIN for Windows Hello. This PIN serves as a fast and secure way to sign in to your device, apps, and services. Your PIN must be between 6 and 32 characters in length. Enter a new PIN of your choice when prompted. Confirm the new PIN by entering it again. Completion: You are now enrolled in Windows Hello PIN authentication. Ensure that you choose a strong and memorable PIN to maintain the security of your device. Additionally, keep your PIN confidential and do not share it with others to prevent unauthorized access to your device and associated services. Your PIN is unique to this host, and will not effect authentication to other hosts and Azure services. You can now use your newly set up PIN to authenticate and access your device.","title":"Enrolling the Device and Hello PIN"},{"location":"about/","text":"About Himmelblau Himmelblau is an open-source authentication framework for Linux that integrates securely with Microsoft Entra ID (formerly Azure Active Directory). It bridges the long-standing gap between modern cloud identity and traditional Unix authentication (PAM/NSS), bringing MFA, device compliance, and policy enforcement to Linux \u2014 without proprietary agents or extra infrastructure. Himmelblau is German for \u201csky blue\u201d \u2014 a nod to Microsoft\u2019s Azure cloud and our mission to bring seamless cloud identity to Linux. Origins & Mission Himmelblau was conceived to address the growing need for seamless integration between Linux environments and Microsoft Entra ID . Originating as a fork of the Kanidm OAuth2 client led by William Brown (SUSE), Himmelblau tailors Kanidm\u2019s proven, security-focused foundations to the specifics of Entra ID, while pushing deeper into Intune policy enforcement, compliance reporting, and Hello for Business flows . Our mission is simple: Parity with Windows for authentication security and ease. First-class cloud identity on Linux \u2014 with open code, auditable flows, and a modern Rust codebase. Pragmatic interoperability with existing enterprise tooling. Key Features Microsoft Entra ID integration Native support for interactive and brokered OAuth 2.0 / OIDC flows, MFA, SSO, secure token management, and modern enterprise identity standards. (Optional / hybrid) Kerberos compatibility Extends Entra ID scenarios to Kerberos-backed environments for cloud and on-premises hybrid use cases. Intune policy & compliance Apply and report Linux Intune compliance results; cache and enforce password/PIN policies locally. Passwordless & FIDO2 Early support for passwordless authentication paths. Rust-first, modular architecture A DBus daemon ( himmelblaud ) plus PAM/NSS modules and CLI tooling \u2014 designed for reliability, memory safety, and maintainability. Open source & community-driven Built in the open, with transparent design, rigorous logging, and well-defined extension points. Supported Platforms Himmelblau targets a wide range of enterprise and community Linux distributions, including: SUSE / SLES Rocky Linux / RHEL Fedora Ubuntu Debian NixOS (We actively maintain cross-distro build pipelines and packaging; contributions for additional platforms are welcome.) Who\u2019s Behind It? Himmelblau is created and primarily maintained by David Mulder , with key early contributions from William Brown and support from SUSE engineers and a growing community of open-source contributors. Get Involved We welcome contributors of all kinds \u2014 code, docs, packaging, testing, and real-world deployment feedback: Source & issues : Github Discuss / report bugs / request features : Open a GitHub issue or PR Sponsorship / support : Reach out to discuss enterprise needs, or sponsor the project . License Himmelblau is released under the GPLv3 (or later) \u2014 ensuring the code remains free, auditable, and community-owned.","title":"About"},{"location":"about/#about-himmelblau","text":"Himmelblau is an open-source authentication framework for Linux that integrates securely with Microsoft Entra ID (formerly Azure Active Directory). It bridges the long-standing gap between modern cloud identity and traditional Unix authentication (PAM/NSS), bringing MFA, device compliance, and policy enforcement to Linux \u2014 without proprietary agents or extra infrastructure. Himmelblau is German for \u201csky blue\u201d \u2014 a nod to Microsoft\u2019s Azure cloud and our mission to bring seamless cloud identity to Linux.","title":"About Himmelblau"},{"location":"about/#origins-mission","text":"Himmelblau was conceived to address the growing need for seamless integration between Linux environments and Microsoft Entra ID . Originating as a fork of the Kanidm OAuth2 client led by William Brown (SUSE), Himmelblau tailors Kanidm\u2019s proven, security-focused foundations to the specifics of Entra ID, while pushing deeper into Intune policy enforcement, compliance reporting, and Hello for Business flows . Our mission is simple: Parity with Windows for authentication security and ease. First-class cloud identity on Linux \u2014 with open code, auditable flows, and a modern Rust codebase. Pragmatic interoperability with existing enterprise tooling.","title":"Origins &amp; Mission"},{"location":"about/#key-features","text":"Microsoft Entra ID integration Native support for interactive and brokered OAuth 2.0 / OIDC flows, MFA, SSO, secure token management, and modern enterprise identity standards. (Optional / hybrid) Kerberos compatibility Extends Entra ID scenarios to Kerberos-backed environments for cloud and on-premises hybrid use cases. Intune policy & compliance Apply and report Linux Intune compliance results; cache and enforce password/PIN policies locally. Passwordless & FIDO2 Early support for passwordless authentication paths. Rust-first, modular architecture A DBus daemon ( himmelblaud ) plus PAM/NSS modules and CLI tooling \u2014 designed for reliability, memory safety, and maintainability. Open source & community-driven Built in the open, with transparent design, rigorous logging, and well-defined extension points.","title":"Key Features"},{"location":"about/#supported-platforms","text":"Himmelblau targets a wide range of enterprise and community Linux distributions, including: SUSE / SLES Rocky Linux / RHEL Fedora Ubuntu Debian NixOS (We actively maintain cross-distro build pipelines and packaging; contributions for additional platforms are welcome.)","title":"Supported Platforms"},{"location":"about/#whos-behind-it","text":"Himmelblau is created and primarily maintained by David Mulder , with key early contributions from William Brown and support from SUSE engineers and a growing community of open-source contributors.","title":"Who\u2019s Behind It?"},{"location":"about/#get-involved","text":"We welcome contributors of all kinds \u2014 code, docs, packaging, testing, and real-world deployment feedback: Source & issues : Github Discuss / report bugs / request features : Open a GitHub issue or PR Sponsorship / support : Reach out to discuss enterprise needs, or sponsor the project .","title":"Get Involved"},{"location":"about/#license","text":"Himmelblau is released under the GPLv3 (or later) \u2014 ensuring the code remains free, auditable, and community-owned.","title":"License"},{"location":"architecture/","text":"Understanding Himmelblau Architecture Overview Himmelblau\u2019s architecture is modular, scalable, and designed to integrate deeply with both Linux system services and Microsoft Azure Entra ID. Its core components work together to authenticate users, manage tokens, provide session services, and bridge cloud-based identity with traditional POSIX environments. Key Components himmelblaud : Authentication Daemon The central daemon responsible for: Initiating and processing OAuth2 and Kerberos authentication flows Requesting Primary Refresh Tokens (PRTs) and access tokens Managing token lifecycles: storage, renewal, expiration Securely communicating with other services via UNIX sockets Integrating with: PAM (authentication/account/session/password stacks) NSS (for user/group resolution) All authentication events funnel through himmelblaud , whether invoked via login, SSH, or user switching. himmelblau-broker : SSO Interface A DBus-based service that: Exposes authentication tokens to applications and browser plugins Supports automatic token refresh for SSO continuity Bridges the gap between system-level login and application-level authentication Used primarily in desktop environments or with SSO-capable CLI tools. himmelblaud-tasks : Background Worker This helper service performs actions that are triggered post-authentication: Requests cloud-based Kerberos TGTs and stores them in krb5cc caches Creates and initializes user home directories Enforces Intune policies (if enabled). It runs as a system service alongside himmelblaud . /etc/himmelblau/himmelblau.conf : Configuration File Defines the global and per-domain settings used by Himmelblau: Entra ID domains (automatically associated with tenants) Logging and debugging options POSIX mapping preferences Allowed groups for login authorization Session environment behavior Example: [global] domains = example.com pam_allow_groups = 00000000-1111-2222-3333-444444444444 home_attr = CN use_etc_skel = true \ud83d\udcd8 See Also: The himmelblau.conf man page for detailed configuration options The aad-tool man page for command-line configuration and diagnostics","title":"Architecture"},{"location":"architecture/#understanding-himmelblau-architecture","text":"","title":"Understanding Himmelblau Architecture"},{"location":"architecture/#overview","text":"Himmelblau\u2019s architecture is modular, scalable, and designed to integrate deeply with both Linux system services and Microsoft Azure Entra ID. Its core components work together to authenticate users, manage tokens, provide session services, and bridge cloud-based identity with traditional POSIX environments.","title":"Overview"},{"location":"architecture/#key-components","text":"","title":"Key Components"},{"location":"architecture/#himmelblaud-authentication-daemon","text":"The central daemon responsible for: Initiating and processing OAuth2 and Kerberos authentication flows Requesting Primary Refresh Tokens (PRTs) and access tokens Managing token lifecycles: storage, renewal, expiration Securely communicating with other services via UNIX sockets Integrating with: PAM (authentication/account/session/password stacks) NSS (for user/group resolution) All authentication events funnel through himmelblaud , whether invoked via login, SSH, or user switching.","title":"himmelblaud: Authentication Daemon"},{"location":"architecture/#himmelblau-broker-sso-interface","text":"A DBus-based service that: Exposes authentication tokens to applications and browser plugins Supports automatic token refresh for SSO continuity Bridges the gap between system-level login and application-level authentication Used primarily in desktop environments or with SSO-capable CLI tools.","title":"himmelblau-broker: SSO Interface"},{"location":"architecture/#himmelblaud-tasks-background-worker","text":"This helper service performs actions that are triggered post-authentication: Requests cloud-based Kerberos TGTs and stores them in krb5cc caches Creates and initializes user home directories Enforces Intune policies (if enabled). It runs as a system service alongside himmelblaud .","title":"himmelblaud-tasks: Background Worker"},{"location":"architecture/#etchimmelblauhimmelblauconf-configuration-file","text":"Defines the global and per-domain settings used by Himmelblau: Entra ID domains (automatically associated with tenants) Logging and debugging options POSIX mapping preferences Allowed groups for login authorization Session environment behavior Example: [global] domains = example.com pam_allow_groups = 00000000-1111-2222-3333-444444444444 home_attr = CN use_etc_skel = true \ud83d\udcd8 See Also: The himmelblau.conf man page for detailed configuration options The aad-tool man page for command-line configuration and diagnostics","title":"/etc/himmelblau/himmelblau.conf: Configuration File"},{"location":"configuration/","text":"Configuration Overview Himmelblau is configured primarily through a single file: /etc/himmelblau/himmelblau.conf . This file controls authentication behavior, domain bindings, environment setup, policy enforcement, and more. This page also describes required system integration steps, including PAM and NSS configuration. Config File: /etc/himmelblau/himmelblau.conf Format The file uses an INI-like syntax with support for [global] and per-domain sections: [global] domains = example.com [example.com] app_id = 00000000-1111-2222-3333-444444444444 Key Options Key Description domains Comma-separated list of allowed Entra ID domains pam_allow_groups Group object IDs and user UPNs allowed to authenticate apply_policy Enables Intune policy enforcement enable_hello Enables Linux Hello PIN support Refer to the himmelblau.conf man page for a full list of options. PAM Configuration To allow users to authenticate with Azure Entra ID, Himmelblau must be integrated into your system\u2019s PAM (Pluggable Authentication Module) stack. This directs authentication requests to the pam_himmelblau.so module. Preferred Configuration Methods Use one of the following automated tools to insert Himmelblau into the appropriate PAM files. Ubuntu / Debian: sudo pam-auth-update Then check the box labeled Azure authentication . openSUSE / Tumbleweed: sudo pam-config --add --himmelblau All systems (manual file editing): sudo aad-tool configure-pam This directly modifies PAM config files such as: /etc/pam.d/common-auth (Debian/Ubuntu) /etc/pam.d/system-auth (RHEL/SUSE) \u2139\ufe0f This tool is safe to use as a starting point, and allows fine-grained control later if needed. Manual Configuration (Advanced) If the above tools don\u2019t produce the desired result or you require precise control over module ordering and behavior, you may manually edit your PAM stack. Guidelines: Place pam_himmelblau.so after pam_localuser.so If using Linux Hello or Passwordless, place Himmelblau before pam_unix.so to avoid password prompts Always include ignore_unknown_user Ensure pam_deny.so is placed last Example: /etc/pam.d/common-auth auth required pam_env.so auth [default=1 ignore=ignore success=ok] pam_localuser.so auth sufficient pam_unix.so nullok try_first_pass auth sufficient pam_himmelblau.so ignore_unknown_user auth required pam_deny.so \ud83d\udca1 For Passwordless login, move Himmelblau above pam_unix.so to avoid fallback password prompts. Example: /etc/pam.d/common-account account [default=1 ignore=ignore success=ok] pam_localuser.so account sufficient pam_unix.so account sufficient pam_himmelblau.so ignore_unknown_user account required pam_deny.so Example: /etc/pam.d/common-session session optional pam_systemd.so session required pam_limits.so session optional pam_unix.so try_first_pass session optional pam_umask.so session optional pam_himmelblau.so session optional pam_env.so Example: /etc/pam.d/common-password password sufficient pam_himmelblau.so ignore_unknown_user password optional pam_gnome_keyring.so use_authtok password sufficient pam_unix.so use_authtok nullok shadow try_first_pass password required pam_deny.so NSS Configuration To ensure system tools can resolve Entra ID users and groups: Edit /etc/nsswitch.conf Find the passwd and group lines and modify them to include himmelblau , for example: passwd: files himmelblau group: files himmelblau Using Multiple Tenants You can support multiple Azure Entra ID tenants by listing their primary domain names in the global domains key: [global] domains = example.com,contoso.com [example.com] home_attr = CN [contoso.com] app_id = 1111-2222-3333-4444 Only the primary domain need be listed in the domains key. Other domains associated with the same tenant will be configured automatically. Each domain block may override options like app_id , idmap_range , or shell . Refer to the himmelblau.conf man page for a full list of options. Disabling Linux Hello PIN Linux Hello authentication is enabled by default. To disable it: [global] enable_hello = false Debug Logging Enable debug logs for troubleshooting: [global] debug = true Logs are written to: journalctl -u himmelblaud -u himmelblaud-tasks","title":"Configuration"},{"location":"configuration/#configuration","text":"","title":"Configuration"},{"location":"configuration/#overview","text":"Himmelblau is configured primarily through a single file: /etc/himmelblau/himmelblau.conf . This file controls authentication behavior, domain bindings, environment setup, policy enforcement, and more. This page also describes required system integration steps, including PAM and NSS configuration.","title":"Overview"},{"location":"configuration/#config-file-etchimmelblauhimmelblauconf","text":"","title":"Config File: /etc/himmelblau/himmelblau.conf"},{"location":"configuration/#format","text":"The file uses an INI-like syntax with support for [global] and per-domain sections: [global] domains = example.com [example.com] app_id = 00000000-1111-2222-3333-444444444444","title":"Format"},{"location":"configuration/#key-options","text":"Key Description domains Comma-separated list of allowed Entra ID domains pam_allow_groups Group object IDs and user UPNs allowed to authenticate apply_policy Enables Intune policy enforcement enable_hello Enables Linux Hello PIN support Refer to the himmelblau.conf man page for a full list of options.","title":"Key Options"},{"location":"configuration/#pam-configuration","text":"To allow users to authenticate with Azure Entra ID, Himmelblau must be integrated into your system\u2019s PAM (Pluggable Authentication Module) stack. This directs authentication requests to the pam_himmelblau.so module.","title":"PAM Configuration"},{"location":"configuration/#preferred-configuration-methods","text":"Use one of the following automated tools to insert Himmelblau into the appropriate PAM files. Ubuntu / Debian: sudo pam-auth-update Then check the box labeled Azure authentication . openSUSE / Tumbleweed: sudo pam-config --add --himmelblau All systems (manual file editing): sudo aad-tool configure-pam This directly modifies PAM config files such as: /etc/pam.d/common-auth (Debian/Ubuntu) /etc/pam.d/system-auth (RHEL/SUSE) \u2139\ufe0f This tool is safe to use as a starting point, and allows fine-grained control later if needed.","title":"Preferred Configuration Methods"},{"location":"configuration/#manual-configuration-advanced","text":"If the above tools don\u2019t produce the desired result or you require precise control over module ordering and behavior, you may manually edit your PAM stack. Guidelines: Place pam_himmelblau.so after pam_localuser.so If using Linux Hello or Passwordless, place Himmelblau before pam_unix.so to avoid password prompts Always include ignore_unknown_user Ensure pam_deny.so is placed last","title":"Manual Configuration (Advanced)"},{"location":"configuration/#example-etcpamdcommon-auth","text":"auth required pam_env.so auth [default=1 ignore=ignore success=ok] pam_localuser.so auth sufficient pam_unix.so nullok try_first_pass auth sufficient pam_himmelblau.so ignore_unknown_user auth required pam_deny.so \ud83d\udca1 For Passwordless login, move Himmelblau above pam_unix.so to avoid fallback password prompts.","title":"Example: /etc/pam.d/common-auth"},{"location":"configuration/#example-etcpamdcommon-account","text":"account [default=1 ignore=ignore success=ok] pam_localuser.so account sufficient pam_unix.so account sufficient pam_himmelblau.so ignore_unknown_user account required pam_deny.so","title":"Example: /etc/pam.d/common-account"},{"location":"configuration/#example-etcpamdcommon-session","text":"session optional pam_systemd.so session required pam_limits.so session optional pam_unix.so try_first_pass session optional pam_umask.so session optional pam_himmelblau.so session optional pam_env.so","title":"Example: /etc/pam.d/common-session"},{"location":"configuration/#example-etcpamdcommon-password","text":"password sufficient pam_himmelblau.so ignore_unknown_user password optional pam_gnome_keyring.so use_authtok password sufficient pam_unix.so use_authtok nullok shadow try_first_pass password required pam_deny.so","title":"Example: /etc/pam.d/common-password"},{"location":"configuration/#nss-configuration","text":"To ensure system tools can resolve Entra ID users and groups: Edit /etc/nsswitch.conf Find the passwd and group lines and modify them to include himmelblau , for example: passwd: files himmelblau group: files himmelblau","title":"NSS Configuration"},{"location":"configuration/#using-multiple-tenants","text":"You can support multiple Azure Entra ID tenants by listing their primary domain names in the global domains key: [global] domains = example.com,contoso.com [example.com] home_attr = CN [contoso.com] app_id = 1111-2222-3333-4444 Only the primary domain need be listed in the domains key. Other domains associated with the same tenant will be configured automatically. Each domain block may override options like app_id , idmap_range , or shell . Refer to the himmelblau.conf man page for a full list of options.","title":"Using Multiple Tenants"},{"location":"configuration/#disabling-linux-hello-pin","text":"Linux Hello authentication is enabled by default. To disable it: [global] enable_hello = false","title":"Disabling Linux Hello PIN"},{"location":"configuration/#debug-logging","text":"Enable debug logs for troubleshooting: [global] debug = true Logs are written to: journalctl -u himmelblaud -u himmelblaud-tasks","title":"Debug Logging"},{"location":"ecosystem/","text":"The Himmelblau Ecosystem Overview Himmelblau is more than just a login module \u2014 it\u2019s a full ecosystem for managing identity integration between Azure Entra ID and Linux systems. Core Features and Benefits Azure Entra ID Integration Himmelblau supports modern Azure Entra ID authentication flows: OAuth2 authorization with MS-OAPX and OAPXBC extensions Primary Refresh Token (PRT) issuance and renewal Support for multi-factor authentication (MFA), including: Microsoft Authenticator FIDO2 hardware keys One-time passwords via SMS Temporary Access Pass Secure Token Storage and Device Registration All credentials and issued tokens are stored in encrypted, machine-bound storage SoftHSM and TPM backends are supported Seamless device registration with Azure Entra ID during first login Kerberos Support Himmelblau retrieves and caches Ticket Granting Tickets (TGTs) from Azure\u2019s cloud KDC, enabling: Secure SSO access to Kerberos-based applications Hybrid workflows that combine cloud and on-prem AD Kerberos services Single Sign-On (SSO) Via integration with Siemens' linux-entra-sso , Himmelblau enables: Firefox/Chrome Browser SSO for Microsoft 365 and Entra ID\u2013protected apps Secure, refreshable token storage for long-lived sessions Supported Linux Distributions Himmelblau supports a broad range of Linux distributions, including: Enterprise-focused: SUSE Linux Enterprise (SLE) Red Hat Enterprise Linux (RHEL) Rocky Linux Community-driven: Ubuntu Debian Fedora openSUSE NixOS Interoperability with Microsoft Services By emulating Windows authentication flows and integrating directly with Microsoft APIs, Himmelblau enables Linux clients to: Authenticate to Microsoft 365 services (Exchange, SharePoint, Teams) Access Azure-based applications protected by Entra ID Conditional Access Report device state and compliance to Microsoft Intune (optional) Function in hybrid environments with both on-prem and cloud resources","title":"Ecosystem"},{"location":"ecosystem/#the-himmelblau-ecosystem","text":"","title":"The Himmelblau Ecosystem"},{"location":"ecosystem/#overview","text":"Himmelblau is more than just a login module \u2014 it\u2019s a full ecosystem for managing identity integration between Azure Entra ID and Linux systems.","title":"Overview"},{"location":"ecosystem/#core-features-and-benefits","text":"","title":"Core Features and Benefits"},{"location":"ecosystem/#azure-entra-id-integration","text":"Himmelblau supports modern Azure Entra ID authentication flows: OAuth2 authorization with MS-OAPX and OAPXBC extensions Primary Refresh Token (PRT) issuance and renewal Support for multi-factor authentication (MFA), including: Microsoft Authenticator FIDO2 hardware keys One-time passwords via SMS Temporary Access Pass","title":"Azure Entra ID Integration"},{"location":"ecosystem/#secure-token-storage-and-device-registration","text":"All credentials and issued tokens are stored in encrypted, machine-bound storage SoftHSM and TPM backends are supported Seamless device registration with Azure Entra ID during first login","title":"Secure Token Storage and Device Registration"},{"location":"ecosystem/#kerberos-support","text":"Himmelblau retrieves and caches Ticket Granting Tickets (TGTs) from Azure\u2019s cloud KDC, enabling: Secure SSO access to Kerberos-based applications Hybrid workflows that combine cloud and on-prem AD Kerberos services","title":"Kerberos Support"},{"location":"ecosystem/#single-sign-on-sso","text":"Via integration with Siemens' linux-entra-sso , Himmelblau enables: Firefox/Chrome Browser SSO for Microsoft 365 and Entra ID\u2013protected apps Secure, refreshable token storage for long-lived sessions","title":"Single Sign-On (SSO)"},{"location":"ecosystem/#supported-linux-distributions","text":"Himmelblau supports a broad range of Linux distributions, including: Enterprise-focused: SUSE Linux Enterprise (SLE) Red Hat Enterprise Linux (RHEL) Rocky Linux Community-driven: Ubuntu Debian Fedora openSUSE NixOS","title":"Supported Linux Distributions"},{"location":"ecosystem/#interoperability-with-microsoft-services","text":"By emulating Windows authentication flows and integrating directly with Microsoft APIs, Himmelblau enables Linux clients to: Authenticate to Microsoft 365 services (Exchange, SharePoint, Teams) Access Azure-based applications protected by Entra ID Conditional Access Report device state and compliance to Microsoft Intune (optional) Function in hybrid environments with both on-prem and cloud resources","title":"Interoperability with Microsoft Services"},{"location":"installation/","text":"Installing Himmelblau Overview Himmelblau is packaged for a wide range of Linux distributions and supports multiple installation methods, including .deb and .rpm packages, container builds, and manual source compilation. This page covers how to install Himmelblau on Ubuntu, Debian, RHEL, Rocky, SUSE, and other distributions. Supported Distributions Loading supported distributions... Installation from Prebuilt Packages Debian & Ubuntu Download the .deb packages. Install: sudo apt install -y ./himmelblau_<version>-<distro>_amd64.deb ./himmelblau-sshd-config_<version>-<distro>_amd64.deb ./himmelblau-sso_<version>-<distro>_amd64.deb ./nss-himmelblau_<version>-<distro>_amd64.deb ./pam-himmelblau_<version>-<distro>_amd64.deb ./himmelblau-qr-greeter_<version>-<distro>_amd64.deb RHEL, Rocky, Fedora Download the .rpm packages. Install: sudo rpm --import https://himmelblau-idm.org/himmelblau.asc sudo dnf install ./himmelblau-<version>-1.x86_64-<distro>.rpm ./himmelblau-sshd-config-<version>-1.x86_64-<distro>.rpm ./himmelblau-sso-<version>-1.x86_64-<distro>.rpm ./nss-himmelblau-<version>-1.x86_64-<distro>.rpm ./pam-himmelblau-<version>-1.x86_64-<distro>.rpm ./himmelblau-qr-greeter-<version>-1.x86_64-<distro>.rpm SUSE Linux Enterprise (SLE) / openSUSE Download the .rpm packages. Install: sudo rpm --import https://himmelblau-idm.org/himmelblau.asc sudo zypper install ./himmelblau-<version>-1.x86_64-<distro>.rpm ./himmelblau-sshd-config-<version>-1.x86_64-<distro>.rpm ./himmelblau-sso-<version>-1.x86_64-<distro>.rpm ./nss-himmelblau-<version>-1.x86_64-<distro>.rpm ./pam-himmelblau-<version>-1.x86_64-<distro>.rpm ./himmelblau-qr-greeter-<version>-1.x86_64-<distro>.rpm From Source If you prefer to build Himmelblau from source, you can use the provided Makefile to produce native packages for your target distribution. Steps: Clone the repository: git clone https://github.com/himmelblau-idm/himmelblau cd himmelblau Build packages for your distro: make ubuntu24.04 # Replace with your target distro Available distro targets: ubuntu22.04 ubuntu24.04 debian12 rocky8 rocky9 rocky10 sle15sp6 sle15sp7 tumbleweed fedora41 fedora42 rawhide Find the resulting .deb or .rpm packages in: ./packages/ You can then install the generated package as normal using your system's package manager (e.g., dpkg , dnf , or zypper ). \ud83d\udca1 This method ensures proper packaging with dependencies and systemd service files \u2014 ideal for testing or contributing to Himmelblau.","title":"Installation"},{"location":"installation/#installing-himmelblau","text":"","title":"Installing Himmelblau"},{"location":"installation/#overview","text":"Himmelblau is packaged for a wide range of Linux distributions and supports multiple installation methods, including .deb and .rpm packages, container builds, and manual source compilation. This page covers how to install Himmelblau on Ubuntu, Debian, RHEL, Rocky, SUSE, and other distributions.","title":"Overview"},{"location":"installation/#supported-distributions","text":"Loading supported distributions...","title":"Supported Distributions"},{"location":"installation/#installation-from-prebuilt-packages","text":"","title":"Installation from Prebuilt Packages"},{"location":"installation/#debian-ubuntu","text":"Download the .deb packages. Install: sudo apt install -y ./himmelblau_<version>-<distro>_amd64.deb ./himmelblau-sshd-config_<version>-<distro>_amd64.deb ./himmelblau-sso_<version>-<distro>_amd64.deb ./nss-himmelblau_<version>-<distro>_amd64.deb ./pam-himmelblau_<version>-<distro>_amd64.deb ./himmelblau-qr-greeter_<version>-<distro>_amd64.deb","title":"Debian &amp; Ubuntu"},{"location":"installation/#rhel-rocky-fedora","text":"Download the .rpm packages. Install: sudo rpm --import https://himmelblau-idm.org/himmelblau.asc sudo dnf install ./himmelblau-<version>-1.x86_64-<distro>.rpm ./himmelblau-sshd-config-<version>-1.x86_64-<distro>.rpm ./himmelblau-sso-<version>-1.x86_64-<distro>.rpm ./nss-himmelblau-<version>-1.x86_64-<distro>.rpm ./pam-himmelblau-<version>-1.x86_64-<distro>.rpm ./himmelblau-qr-greeter-<version>-1.x86_64-<distro>.rpm","title":"RHEL, Rocky, Fedora"},{"location":"installation/#suse-linux-enterprise-sle-opensuse","text":"Download the .rpm packages. Install: sudo rpm --import https://himmelblau-idm.org/himmelblau.asc sudo zypper install ./himmelblau-<version>-1.x86_64-<distro>.rpm ./himmelblau-sshd-config-<version>-1.x86_64-<distro>.rpm ./himmelblau-sso-<version>-1.x86_64-<distro>.rpm ./nss-himmelblau-<version>-1.x86_64-<distro>.rpm ./pam-himmelblau-<version>-1.x86_64-<distro>.rpm ./himmelblau-qr-greeter-<version>-1.x86_64-<distro>.rpm","title":"SUSE Linux Enterprise (SLE) / openSUSE"},{"location":"installation/#from-source","text":"If you prefer to build Himmelblau from source, you can use the provided Makefile to produce native packages for your target distribution.","title":"From Source"},{"location":"installation/#steps","text":"Clone the repository: git clone https://github.com/himmelblau-idm/himmelblau cd himmelblau Build packages for your distro: make ubuntu24.04 # Replace with your target distro Available distro targets: ubuntu22.04 ubuntu24.04 debian12 rocky8 rocky9 rocky10 sle15sp6 sle15sp7 tumbleweed fedora41 fedora42 rawhide Find the resulting .deb or .rpm packages in: ./packages/ You can then install the generated package as normal using your system's package manager (e.g., dpkg , dnf , or zypper ). \ud83d\udca1 This method ensures proper packaging with dependencies and systemd service files \u2014 ideal for testing or contributing to Himmelblau.","title":"Steps:"},{"location":"integration/","text":"Transitioning from On-Prem AD to Azure Entra ID When migrating from traditional Active Directory (AD) to Azure Entra ID, preserving existing UID and GID values is crucial for Linux systems. Himmelblau 1.0 and newer provides support for POSIX attribute migration and identity mapping via the aad-tool utility. Migration Paths for UID/GID Preservation Himmelblau offers two strategies for UID/GID migration, depending on whether you want globally consistent attributes or host-specific mappings. 1. Sync POSIX Attributes to Entra ID (Recommended) Use aad-tool user set-posix-attrs and aad-tool group set-posix-attrs to store UID/GID values directly on Entra ID objects via directory schema extensions. These values are then consistently available across all Entra ID\u2013joined Linux systems. You have two options for getting POSIX attributes into Entra ID: Option A: If your users already have uidNumber , gidNumber , or unixHomeDirectory values in on-prem Active Directory, you can sync them to Entra ID using Entra Connect Sync . Option B: Manually register schema extensions and assign POSIX attributes using aad-tool . To manually register and assign: Add the schema extensions: aad-tool application add-schema-extensions \\ --client-id <SCHEMA_CLIENT_ID> \\ --schema-app-object-id <APPLICATION_OBJECT_ID> Set attributes on users or groups: aad-tool user set-posix-attrs \\ --schema-client-id <SCHEMA_CLIENT_ID> \\ --user-id <USER_OBJECT_ID> \\ --uid <UID> \\ --gid <GID> \\ --home /home/example \\ --shell /bin/bash \ud83d\udca1 POSIX attributes stored in Entra ID can be retrieved at login time, even before authentication completes \u2014 if Himmelblau is configured with Confidential Client Credentials. Using Confidential Client Credentials To enable early attribute lookup (e.g., uidNumber , gidNumber ) before login: Use aad-tool cred secret or aad-tool cred cert to configure confidential client authentication: # Using a client secret aad-tool cred secret \\ --client-id <APP_ID> \\ --domain <YOUR_DOMAIN> \\ --secret <SECRET_VALUE> # Or using a self-signed client certificate aad-tool cred cert \\ --client-id <APP_ID> \\ --domain <YOUR_DOMAIN> \\ --valid-days 365 \\ --cert-out /tmp/my-cert.pem These credentials allow Himmelblau to authenticate securely and perform Graph API lookups before any user logs in. Pre-Caching POSIX Attributes (Optional) If you haven\u2019t configured confidential client credentials, UID/GID attributes won\u2019t be available until after login. To avoid this, you can pre-cache attribute mappings using: aad-tool enumerate This command fetches all users and groups with POSIX attributes from Entra ID and stores them locally for use during authentication. \u26a0\ufe0f aad-tool enumerate only works on devices that are already Entra ID\u2013joined, and where the calling user has delegated Graph API access. 2. Use Static ID Mapping (Host-Specific) If UID/GID mappings vary by system or cannot be stored in Entra ID, use the static ID map cache instead: aad-tool idmap user-add --name user@domain --uid 10001 --gid 100 aad-tool idmap group-add --name group@domain --gid 100 These mappings are stored locally and applied consistently on the host during lookup. \u26a0\ufe0f This approach is best used when global consistency is not feasible.","title":"Integration"},{"location":"integration/#transitioning-from-on-prem-ad-to-azure-entra-id","text":"When migrating from traditional Active Directory (AD) to Azure Entra ID, preserving existing UID and GID values is crucial for Linux systems. Himmelblau 1.0 and newer provides support for POSIX attribute migration and identity mapping via the aad-tool utility.","title":"Transitioning from On-Prem AD to Azure Entra ID"},{"location":"integration/#migration-paths-for-uidgid-preservation","text":"Himmelblau offers two strategies for UID/GID migration, depending on whether you want globally consistent attributes or host-specific mappings.","title":"Migration Paths for UID/GID Preservation"},{"location":"integration/#1-sync-posix-attributes-to-entra-id-recommended","text":"Use aad-tool user set-posix-attrs and aad-tool group set-posix-attrs to store UID/GID values directly on Entra ID objects via directory schema extensions. These values are then consistently available across all Entra ID\u2013joined Linux systems. You have two options for getting POSIX attributes into Entra ID: Option A: If your users already have uidNumber , gidNumber , or unixHomeDirectory values in on-prem Active Directory, you can sync them to Entra ID using Entra Connect Sync . Option B: Manually register schema extensions and assign POSIX attributes using aad-tool . To manually register and assign: Add the schema extensions: aad-tool application add-schema-extensions \\ --client-id <SCHEMA_CLIENT_ID> \\ --schema-app-object-id <APPLICATION_OBJECT_ID> Set attributes on users or groups: aad-tool user set-posix-attrs \\ --schema-client-id <SCHEMA_CLIENT_ID> \\ --user-id <USER_OBJECT_ID> \\ --uid <UID> \\ --gid <GID> \\ --home /home/example \\ --shell /bin/bash \ud83d\udca1 POSIX attributes stored in Entra ID can be retrieved at login time, even before authentication completes \u2014 if Himmelblau is configured with Confidential Client Credentials.","title":"1. Sync POSIX Attributes to Entra ID (Recommended)"},{"location":"integration/#using-confidential-client-credentials","text":"To enable early attribute lookup (e.g., uidNumber , gidNumber ) before login: Use aad-tool cred secret or aad-tool cred cert to configure confidential client authentication: # Using a client secret aad-tool cred secret \\ --client-id <APP_ID> \\ --domain <YOUR_DOMAIN> \\ --secret <SECRET_VALUE> # Or using a self-signed client certificate aad-tool cred cert \\ --client-id <APP_ID> \\ --domain <YOUR_DOMAIN> \\ --valid-days 365 \\ --cert-out /tmp/my-cert.pem These credentials allow Himmelblau to authenticate securely and perform Graph API lookups before any user logs in.","title":"Using Confidential Client Credentials"},{"location":"integration/#pre-caching-posix-attributes-optional","text":"If you haven\u2019t configured confidential client credentials, UID/GID attributes won\u2019t be available until after login. To avoid this, you can pre-cache attribute mappings using: aad-tool enumerate This command fetches all users and groups with POSIX attributes from Entra ID and stores them locally for use during authentication. \u26a0\ufe0f aad-tool enumerate only works on devices that are already Entra ID\u2013joined, and where the calling user has delegated Graph API access.","title":"Pre-Caching POSIX Attributes (Optional)"},{"location":"integration/#2-use-static-id-mapping-host-specific","text":"If UID/GID mappings vary by system or cannot be stored in Entra ID, use the static ID map cache instead: aad-tool idmap user-add --name user@domain --uid 10001 --gid 100 aad-tool idmap group-add --name group@domain --gid 100 These mappings are stored locally and applied consistently on the host during lookup. \u26a0\ufe0f This approach is best used when global consistency is not feasible.","title":"2. Use Static ID Mapping (Host-Specific)"},{"location":"introduction/","text":"Introduction to Himmelblau What is Himmelblau? Himmelblau is an open-source project that brings Azure Entra ID (formerly Azure Active Directory) authentication to Linux systems. It enables: Single Sign-On (SSO) Multi-Factor Authentication (MFA) Secure token handling The project bridges the gap between Microsoft\u2019s identity solutions and Linux environments through modular components for authentication, registration, and identity management. \ud83d\udca1 Himmelblau means \"sky blue\" in German \u2014 a nod to Microsoft Azure. Why Integrate Azure Entra ID with Linux? Hybrid IT environments are increasingly common, and Entra ID is central to identity and access management in Microsoft ecosystems. Linux systems often lack first-class support. Himmelblau addresses this by: Providing unified credentials across Windows and Linux Enabling Azure MFA (FIDO2, SMS, Authenticator app) Supporting browser SSO (via Siemens\u2019 linux-entra-sso ) Meeting compliance requirements Scaling across small and large deployments Open Source Advantage As an open-source solution, Himmelblau offers: Customizable workflows Community-driven development No vendor lock-in","title":"Introduction to Himmelblau"},{"location":"introduction/#introduction-to-himmelblau","text":"","title":"Introduction to Himmelblau"},{"location":"introduction/#what-is-himmelblau","text":"Himmelblau is an open-source project that brings Azure Entra ID (formerly Azure Active Directory) authentication to Linux systems. It enables: Single Sign-On (SSO) Multi-Factor Authentication (MFA) Secure token handling The project bridges the gap between Microsoft\u2019s identity solutions and Linux environments through modular components for authentication, registration, and identity management. \ud83d\udca1 Himmelblau means \"sky blue\" in German \u2014 a nod to Microsoft Azure.","title":"What is Himmelblau?"},{"location":"introduction/#why-integrate-azure-entra-id-with-linux","text":"Hybrid IT environments are increasingly common, and Entra ID is central to identity and access management in Microsoft ecosystems. Linux systems often lack first-class support. Himmelblau addresses this by: Providing unified credentials across Windows and Linux Enabling Azure MFA (FIDO2, SMS, Authenticator app) Supporting browser SSO (via Siemens\u2019 linux-entra-sso ) Meeting compliance requirements Scaling across small and large deployments","title":"Why Integrate Azure Entra ID with Linux?"},{"location":"introduction/#open-source-advantage","text":"As an open-source solution, Himmelblau offers: Customizable workflows Community-driven development No vendor lock-in","title":"Open Source Advantage"},{"location":"registration/","text":"Device Registration with Azure Entra ID Overview Himmelblau supports automatic device registration with Azure Entra ID as part of its first-login flow. This enables conditional access, device-based compliance enforcement, and visibility in the Microsoft Entra admin center. Device registration is mandatory for: Intune integration Device-scoped Conditional Access policies When Registration Occurs Device registration is initiated automatically when: A user authenticates with a domain configured in himmelblau.conf The device has no cached registration or device identity This typically happens during the first successful login for each Entra ID\u2013enabled domain. You can enforce registration immediately by running aad-tool auth-test . Registration Workflow Step-by-Step Check for Existing Identity Himmelblau checks whether the device is already registered. This is done by: Looking for sealed credentials in the himmelblau cache. Checking configuration for a device_id Enroll Device If not already registered: Himmelblau contacts the Entra Id /device endpoint Uses device credentials (TPM-backed or SoftHSM-backed key) Associates the device with the Azure tenant and generates a device object in Microsoft Graph For more details, view the enrollment documentation . Store Device Identity Upon successful registration: The device ID and related certificate are stored securely Future token requests include device context Intune Enroll Device (Optional) Registering the device with Intune is a separate process: Himmelblau contacts the Intune /enroll endpoint Uses device credentials from Entra Id enrollment to authenticate For more details, view the Intune enrollment documentation . Store Intune Device Identity Upon successful registration: The device ID and related certificate are stored securely Intune and Conditional Access can now recognize the device Security Considerations Registration keys are sealed to the TPM when available Device identity is bound to the machine and cannot be reused elsewhere Managing Registered Devices Once registered, the device can be managed through the Entra admin portal or Microsoft Intune: View device metadata, compliance status, and last check-in Enforce policies Remove stale entries manually if a device is decommissioned","title":"Device Registration"},{"location":"registration/#device-registration-with-azure-entra-id","text":"","title":"Device Registration with Azure Entra ID"},{"location":"registration/#overview","text":"Himmelblau supports automatic device registration with Azure Entra ID as part of its first-login flow. This enables conditional access, device-based compliance enforcement, and visibility in the Microsoft Entra admin center. Device registration is mandatory for: Intune integration Device-scoped Conditional Access policies","title":"Overview"},{"location":"registration/#when-registration-occurs","text":"Device registration is initiated automatically when: A user authenticates with a domain configured in himmelblau.conf The device has no cached registration or device identity This typically happens during the first successful login for each Entra ID\u2013enabled domain. You can enforce registration immediately by running aad-tool auth-test .","title":"When Registration Occurs"},{"location":"registration/#registration-workflow","text":"","title":"Registration Workflow"},{"location":"registration/#step-by-step","text":"Check for Existing Identity Himmelblau checks whether the device is already registered. This is done by: Looking for sealed credentials in the himmelblau cache. Checking configuration for a device_id Enroll Device If not already registered: Himmelblau contacts the Entra Id /device endpoint Uses device credentials (TPM-backed or SoftHSM-backed key) Associates the device with the Azure tenant and generates a device object in Microsoft Graph For more details, view the enrollment documentation . Store Device Identity Upon successful registration: The device ID and related certificate are stored securely Future token requests include device context Intune Enroll Device (Optional) Registering the device with Intune is a separate process: Himmelblau contacts the Intune /enroll endpoint Uses device credentials from Entra Id enrollment to authenticate For more details, view the Intune enrollment documentation . Store Intune Device Identity Upon successful registration: The device ID and related certificate are stored securely Intune and Conditional Access can now recognize the device","title":"Step-by-Step"},{"location":"registration/#security-considerations","text":"Registration keys are sealed to the TPM when available Device identity is bound to the machine and cannot be reused elsewhere","title":"Security Considerations"},{"location":"registration/#managing-registered-devices","text":"Once registered, the device can be managed through the Entra admin portal or Microsoft Intune: View device metadata, compliance status, and last check-in Enforce policies Remove stale entries manually if a device is decommissioned","title":"Managing Registered Devices"},{"location":"advanced/Cloud-Kerberos-Trust-for-Linux/","text":"\u26a0\ufe0f Warning: This document is a work in progress. Cloud Kerberos Trust for Linux is also a work in progress and likely requires additional configuration and bug fixes to Himmelblau. Cloud Kerberos Trust Setup for Entra ID Joined Linux Devices This guide outlines the steps to configure Cloud Kerberos Trust between Microsoft Entra ID (formerly Azure AD) and an on-premises Active Directory (AD) for Linux devices joined to Entra ID using Himmelblau. Prerequisites Microsoft Entra ID is configured. On-premises Active Directory is operational. Entra Id Connect is installed and synchronizing users from on-premises AD to Entra ID. Linux client is joined to Entra ID via Himmelblau. Kerberos utilities (e.g., mit-krb5 ) are installed on the Linux client. Network connectivity between the Linux client and on-prem AD domain controllers. Administrative privileges in both on-prem AD and Entra ID. Step 1: Configure Microsoft Entra Kerberos Server Object Install the AzureADHybridAuthenticationManagement PowerShell module on a Windows machine with AD access: Install-Module -Name AzureADHybridAuthenticationManagement -AllowClobber Create the Kerberos server object: # Specify the on-premises Active Directory domain. A new Azure AD # Kerberos Server object will be created in this Active Directory domain. $domain = $env:USERDNSDOMAIN # Enter a UPN of an Azure Active Directory global administrator $userPrincipalName = \"administrator@contoso.onmicrosoft.com\" # Enter a domain administrator username and password. $domainCred = Get-Credential # Create the new Azure AD Kerberos Server object in Active Directory # and then publish it to Azure Active Directory. # Open an interactive sign-in prompt with given username to access the Azure AD. Set-AzureADKerberosServer -Domain $domain -UserPrincipalName $userPrincipalName -DomainCredential $domainCred Verify that the Kerberos server RODC object was created successfully. Get-AzureADKerberosServer -Domain $domain -UserPrincipalName $userPrincipalName Step 2: Configure Kerberos on the Linux Client Edit the Kerberos configuration file ( /etc/krb5.conf ): [libdefaults] default_realm = EXAMPLE.COM dns_lookup_realm = false dns_lookup_kdc = false [realms] EXAMPLE.COM = { kdc = dc1.example.com kdc = dc2.example.com admin_server = dc1.example.com } [domain_realm] .example.com = EXAMPLE.COM example.com = EXAMPLE.COM Replace EXAMPLE.COM with your AD domain in uppercase. Replace example.com with your AD domain in lowercase. Replace dc1.example.com and dc2.example.com with FQDNs of your domain controllers. Verify that time synchronization between the Linux client and the domain controllers is accurate. Step 3: Validate the Configuration on Linux Devices After configuring the policies, validate that Linux devices can obtain Kerberos tickets: Log Out and Log In : On the Linux device, log out and then log back in to initiate the authentication process. Check Kerberos Tickets : Open a terminal and run: klist You should see a valid Kerberos ticket listed, indicating successful authentication.","title":"Cloud Kerberos Trust for Linux"},{"location":"advanced/Cloud-Kerberos-Trust-for-Linux/#cloud-kerberos-trust-setup-for-entra-id-joined-linux-devices","text":"This guide outlines the steps to configure Cloud Kerberos Trust between Microsoft Entra ID (formerly Azure AD) and an on-premises Active Directory (AD) for Linux devices joined to Entra ID using Himmelblau.","title":"Cloud Kerberos Trust Setup for Entra ID Joined Linux Devices"},{"location":"advanced/Cloud-Kerberos-Trust-for-Linux/#prerequisites","text":"Microsoft Entra ID is configured. On-premises Active Directory is operational. Entra Id Connect is installed and synchronizing users from on-premises AD to Entra ID. Linux client is joined to Entra ID via Himmelblau. Kerberos utilities (e.g., mit-krb5 ) are installed on the Linux client. Network connectivity between the Linux client and on-prem AD domain controllers. Administrative privileges in both on-prem AD and Entra ID.","title":"Prerequisites"},{"location":"advanced/Cloud-Kerberos-Trust-for-Linux/#step-1-configure-microsoft-entra-kerberos-server-object","text":"Install the AzureADHybridAuthenticationManagement PowerShell module on a Windows machine with AD access: Install-Module -Name AzureADHybridAuthenticationManagement -AllowClobber Create the Kerberos server object: # Specify the on-premises Active Directory domain. A new Azure AD # Kerberos Server object will be created in this Active Directory domain. $domain = $env:USERDNSDOMAIN # Enter a UPN of an Azure Active Directory global administrator $userPrincipalName = \"administrator@contoso.onmicrosoft.com\" # Enter a domain administrator username and password. $domainCred = Get-Credential # Create the new Azure AD Kerberos Server object in Active Directory # and then publish it to Azure Active Directory. # Open an interactive sign-in prompt with given username to access the Azure AD. Set-AzureADKerberosServer -Domain $domain -UserPrincipalName $userPrincipalName -DomainCredential $domainCred Verify that the Kerberos server RODC object was created successfully. Get-AzureADKerberosServer -Domain $domain -UserPrincipalName $userPrincipalName","title":"Step 1: Configure Microsoft Entra Kerberos Server Object"},{"location":"advanced/Cloud-Kerberos-Trust-for-Linux/#step-2-configure-kerberos-on-the-linux-client","text":"Edit the Kerberos configuration file ( /etc/krb5.conf ): [libdefaults] default_realm = EXAMPLE.COM dns_lookup_realm = false dns_lookup_kdc = false [realms] EXAMPLE.COM = { kdc = dc1.example.com kdc = dc2.example.com admin_server = dc1.example.com } [domain_realm] .example.com = EXAMPLE.COM example.com = EXAMPLE.COM Replace EXAMPLE.COM with your AD domain in uppercase. Replace example.com with your AD domain in lowercase. Replace dc1.example.com and dc2.example.com with FQDNs of your domain controllers. Verify that time synchronization between the Linux client and the domain controllers is accurate.","title":"Step 2: Configure Kerberos on the Linux Client"},{"location":"advanced/Cloud-Kerberos-Trust-for-Linux/#step-3-validate-the-configuration-on-linux-devices","text":"After configuring the policies, validate that Linux devices can obtain Kerberos tickets: Log Out and Log In : On the Linux device, log out and then log back in to initiate the authentication process. Check Kerberos Tickets : Open a terminal and run: klist You should see a valid Kerberos ticket listed, indicating successful authentication.","title":"Step 3: Validate the Configuration on Linux Devices"},{"location":"advanced/Configuring-Unix-Attribute-Synchronization-with-Azure-Entra-ID-Using-Microsoft-Entra-Connect-Sync/","text":"Overview This guide explains how to configure Microsoft Entra Connect Sync to synchronize Unix attributes ( uidNumber , gidNumber , loginShell , unixHomeDirectory , etc.) from an on-premises Active Directory to an existing Azure Entra ID instance. This is essential for Linux authentication solutions like Himmelblau that rely on Unix attributes stored in AD. This guide assumes that Microsoft Entra Connect is already installed and configured. If not, follow the instructions in this wiki to configure Microsoft Entra Connect. Prerequisites A Windows Server with Active Directory Domain Services (AD DS) installed and configured. A configured Active Directory domain with Unix attributes ( uidNumber , gidNumber , unixHomeDirectory , loginShell , etc.) assigned to users and groups. An Azure Entra ID tenant. Microsoft Entra Connect Sync installed on a domain-joined Windows Server. Step-by-Step Configuration 1. Open Microsoft Entra Connect Sync Launch Microsoft Entra Connect Sync from the Start Menu . Click \"Configure\" to begin. 2. Customize Synchronization Options Select \"Customize synchronization options\" and click Next . 3. Connect to Microsoft Entra ID Enter your Azure Entra ID administrator credentials (Global Admin or Hybrid Identity Admin). Sign in when prompted. 4. Connect to Active Directory Verify that the on-premises Active Directory domain (forest) is connected. Click Next . 5. Configure Domain and OU Filtering Choose whether to sync all domains and OUs or only specific OUs. Click Next . 6. Enable Directory Extension Attribute Sync Ensure \"Directory extension attribute sync\" is checked . Click Next . 7. Select Unix Attributes for Synchronization In the Directory Extensions step, select the following attributes: uidNumber (user) gidNumber (user) (the user's primary group attribute) gidNumber (group) loginShell (user) unixHomeDirectory (user) gecos (user) (optional, for additional Unix user details) Click Next . 8. Configure and Apply Settings Click Next to save and apply the synchronization settings. Wait for the configuration to complete. 9. Verify Configuration Completion Once the setup is completed, you\u2019ll see a confirmation message. Click Exit . 10. Validate Synchronization After the setup: Open the Microsoft Entra Admin Center . Go to Hybrid Management \u2192 Microsoft Entra Connect . Check the sync status and ensure that users have their Unix attributes synchronized.","title":"Configuring Unix Attribute Synchronization with Azure Entra ID Using Microsoft Entra Connect Sync"},{"location":"advanced/Configuring-Unix-Attribute-Synchronization-with-Azure-Entra-ID-Using-Microsoft-Entra-Connect-Sync/#overview","text":"This guide explains how to configure Microsoft Entra Connect Sync to synchronize Unix attributes ( uidNumber , gidNumber , loginShell , unixHomeDirectory , etc.) from an on-premises Active Directory to an existing Azure Entra ID instance. This is essential for Linux authentication solutions like Himmelblau that rely on Unix attributes stored in AD. This guide assumes that Microsoft Entra Connect is already installed and configured. If not, follow the instructions in this wiki to configure Microsoft Entra Connect.","title":"Overview"},{"location":"advanced/Configuring-Unix-Attribute-Synchronization-with-Azure-Entra-ID-Using-Microsoft-Entra-Connect-Sync/#prerequisites","text":"A Windows Server with Active Directory Domain Services (AD DS) installed and configured. A configured Active Directory domain with Unix attributes ( uidNumber , gidNumber , unixHomeDirectory , loginShell , etc.) assigned to users and groups. An Azure Entra ID tenant. Microsoft Entra Connect Sync installed on a domain-joined Windows Server.","title":"Prerequisites"},{"location":"advanced/Configuring-Unix-Attribute-Synchronization-with-Azure-Entra-ID-Using-Microsoft-Entra-Connect-Sync/#step-by-step-configuration","text":"","title":"Step-by-Step Configuration"},{"location":"advanced/Configuring-Unix-Attribute-Synchronization-with-Azure-Entra-ID-Using-Microsoft-Entra-Connect-Sync/#1-open-microsoft-entra-connect-sync","text":"Launch Microsoft Entra Connect Sync from the Start Menu . Click \"Configure\" to begin.","title":"1. Open Microsoft Entra Connect Sync"},{"location":"advanced/Configuring-Unix-Attribute-Synchronization-with-Azure-Entra-ID-Using-Microsoft-Entra-Connect-Sync/#2-customize-synchronization-options","text":"Select \"Customize synchronization options\" and click Next .","title":"2. Customize Synchronization Options"},{"location":"advanced/Configuring-Unix-Attribute-Synchronization-with-Azure-Entra-ID-Using-Microsoft-Entra-Connect-Sync/#3-connect-to-microsoft-entra-id","text":"Enter your Azure Entra ID administrator credentials (Global Admin or Hybrid Identity Admin). Sign in when prompted.","title":"3. Connect to Microsoft Entra ID"},{"location":"advanced/Configuring-Unix-Attribute-Synchronization-with-Azure-Entra-ID-Using-Microsoft-Entra-Connect-Sync/#4-connect-to-active-directory","text":"Verify that the on-premises Active Directory domain (forest) is connected. Click Next .","title":"4. Connect to Active Directory"},{"location":"advanced/Configuring-Unix-Attribute-Synchronization-with-Azure-Entra-ID-Using-Microsoft-Entra-Connect-Sync/#5-configure-domain-and-ou-filtering","text":"Choose whether to sync all domains and OUs or only specific OUs. Click Next .","title":"5. Configure Domain and OU Filtering"},{"location":"advanced/Configuring-Unix-Attribute-Synchronization-with-Azure-Entra-ID-Using-Microsoft-Entra-Connect-Sync/#6-enable-directory-extension-attribute-sync","text":"Ensure \"Directory extension attribute sync\" is checked . Click Next .","title":"6. Enable Directory Extension Attribute Sync"},{"location":"advanced/Configuring-Unix-Attribute-Synchronization-with-Azure-Entra-ID-Using-Microsoft-Entra-Connect-Sync/#7-select-unix-attributes-for-synchronization","text":"In the Directory Extensions step, select the following attributes: uidNumber (user) gidNumber (user) (the user's primary group attribute) gidNumber (group) loginShell (user) unixHomeDirectory (user) gecos (user) (optional, for additional Unix user details) Click Next .","title":"7. Select Unix Attributes for Synchronization"},{"location":"advanced/Configuring-Unix-Attribute-Synchronization-with-Azure-Entra-ID-Using-Microsoft-Entra-Connect-Sync/#8-configure-and-apply-settings","text":"Click Next to save and apply the synchronization settings. Wait for the configuration to complete.","title":"8. Configure and Apply Settings"},{"location":"advanced/Configuring-Unix-Attribute-Synchronization-with-Azure-Entra-ID-Using-Microsoft-Entra-Connect-Sync/#9-verify-configuration-completion","text":"Once the setup is completed, you\u2019ll see a confirmation message. Click Exit .","title":"9. Verify Configuration Completion"},{"location":"advanced/Configuring-Unix-Attribute-Synchronization-with-Azure-Entra-ID-Using-Microsoft-Entra-Connect-Sync/#10-validate-synchronization","text":"After the setup: Open the Microsoft Entra Admin Center . Go to Hybrid Management \u2192 Microsoft Entra Connect . Check the sync status and ensure that users have their Unix attributes synchronized.","title":"10. Validate Synchronization"},{"location":"advanced/Creating-an-Entra-ID-Application-for-Himmelblau-GroupMember.Read.All-Permissions/","text":"Overview Himmelblau requires additional API permissions to read group names and extended attributes such as a groups' gidNumber (which is essential for RFC2307 attribute ID mapping). The following instructions guide you through registering an Azure Entra ID application, assigning it permissions, and configuring Himmelblau to use either delegated or confidential client authentication. With the default configuration, Himmelblau will attempt to resolve group memberships by masquerading as the Edge browser with delegated access , but this doesn't work in every tenant, and has the limitation of only resolving group memberships after each user has authenticated. Note: - If you set up confidential client credentials (client secret or certificate) using aad-tool cred , you do not need to specify an app_id in himmelblau.conf . - If you choose delegated access , you must set an app_id in your configuration. 1. Register a New Application in Azure Entra ID Navigate to the Azure Entra ID portal . In the left-hand menu, select App registrations . Click New registration . Enter a Name for the application (e.g., Himmelblau ). Under Supported account types , choose Accounts in this organizational directory only . Under Redirect URI , choose Public client/native (mobile & desktop) for the platform and enter himmelblau://Himmelblau.EntraId.BrokerPlugin for the URI. Click Register . 2. Assign API Permissions In the newly created application, navigate to API permissions . Click Add a permission . Select Microsoft Graph . If utilizing Confidential Client Credentials (Option A below) choose Application permissions , otherwise choose Delegated permissions (Option B). Search for GroupMember.Read.All and select it. Click Add permissions . Click Grant admin consent to approve these permissions for your tenant. 3. Obtain the Application ID Go to Overview in the application\u2019s page. Copy the Application (client) ID . This value will be used in Himmelblau\u2019s configuration. 4. Configure Authentication in Himmelblau You have two main options for enumerating users and group memberships: Option A: Using Confidential Client Credentials (Recommended) This method stores a client secret or client certificate securely in Himmelblau\u2019s encrypted cache and removes the need to specify an app_id in himmelblau.conf . Store a client secret aad-tool cred secret --client-id <CLIENT_ID> --domain <DOMAIN> --secret <SECRET_VALUE> In the Entra ID portal, under Certificates & secrets , create a new Client secret . Copy the Value immediately (you won\u2019t see it again) and use it with the above command. Or set up a client certificate aad-tool cred cert --client-id <CLIENT_ID> --domain <DOMAIN> --valid-days 365 --cert-out /tmp/my-cert.crt Upload /tmp/my-cert.crt in the Entra ID portal under Certificates & secrets > Certificates . The private key never leaves your TPM or software HSM. Note: These credentials expire, and you'll need to repeat these steps each time the credentials expire. Option B: Using Delegated Authentication If you do not configure confidential client credentials, add your application ID to himmelblau.conf for delegated authentication. [example.com] app_id = 98fa618b-e5d2-4697-b0fd-fe3ec5eecdd3 Replace with your actual Application (client) ID found in the app\u2019s Overview page. Note: This method prevents the enumeration of rfc2307 attributes and group memberships until after each user authenticates. Utilizing the aad-tool enumerate command can improve attribute resolution, but will need to be performed each time a new user is added to the directory (or whenever their posix attributes are added/modified). 5. Restart Himmelblau Services To apply changes, restart Himmelblau: sudo systemctl restart himmelblaud sudo systemctl restart himmelblaud-tasks 6. (Optional) Pre-cache UID/GID Mappings You can optionally pre-fetch all users and groups with RFC2307 attributes: aad-tool enumerate This avoids lookups being triggered on first login. 7. Managing Credentials List stored credentials: aad-tool cred list --domain <DOMAIN> Remove credentials if needed: aad-tool cred delete --domain <DOMAIN> Conclusion By following these steps, Himmelblau will be able to retrieve group information necessary for accurate ID mapping using Entra ID. Ensure that the application has the necessary permissions and is correctly configured in himmelblau.conf for seamless integration.","title":"Creating an Entra ID Application for Himmelblau GroupMember.Read.All Permissions"},{"location":"advanced/Creating-an-Entra-ID-Application-for-Himmelblau-GroupMember.Read.All-Permissions/#overview","text":"Himmelblau requires additional API permissions to read group names and extended attributes such as a groups' gidNumber (which is essential for RFC2307 attribute ID mapping). The following instructions guide you through registering an Azure Entra ID application, assigning it permissions, and configuring Himmelblau to use either delegated or confidential client authentication. With the default configuration, Himmelblau will attempt to resolve group memberships by masquerading as the Edge browser with delegated access , but this doesn't work in every tenant, and has the limitation of only resolving group memberships after each user has authenticated. Note: - If you set up confidential client credentials (client secret or certificate) using aad-tool cred , you do not need to specify an app_id in himmelblau.conf . - If you choose delegated access , you must set an app_id in your configuration.","title":"Overview"},{"location":"advanced/Creating-an-Entra-ID-Application-for-Himmelblau-GroupMember.Read.All-Permissions/#1-register-a-new-application-in-azure-entra-id","text":"Navigate to the Azure Entra ID portal . In the left-hand menu, select App registrations . Click New registration . Enter a Name for the application (e.g., Himmelblau ). Under Supported account types , choose Accounts in this organizational directory only . Under Redirect URI , choose Public client/native (mobile & desktop) for the platform and enter himmelblau://Himmelblau.EntraId.BrokerPlugin for the URI. Click Register .","title":"1. Register a New Application in Azure Entra ID"},{"location":"advanced/Creating-an-Entra-ID-Application-for-Himmelblau-GroupMember.Read.All-Permissions/#2-assign-api-permissions","text":"In the newly created application, navigate to API permissions . Click Add a permission . Select Microsoft Graph . If utilizing Confidential Client Credentials (Option A below) choose Application permissions , otherwise choose Delegated permissions (Option B). Search for GroupMember.Read.All and select it. Click Add permissions . Click Grant admin consent to approve these permissions for your tenant.","title":"2. Assign API Permissions"},{"location":"advanced/Creating-an-Entra-ID-Application-for-Himmelblau-GroupMember.Read.All-Permissions/#3-obtain-the-application-id","text":"Go to Overview in the application\u2019s page. Copy the Application (client) ID . This value will be used in Himmelblau\u2019s configuration.","title":"3. Obtain the Application ID"},{"location":"advanced/Creating-an-Entra-ID-Application-for-Himmelblau-GroupMember.Read.All-Permissions/#4-configure-authentication-in-himmelblau","text":"You have two main options for enumerating users and group memberships:","title":"4. Configure Authentication in Himmelblau"},{"location":"advanced/Creating-an-Entra-ID-Application-for-Himmelblau-GroupMember.Read.All-Permissions/#option-a-using-confidential-client-credentials-recommended","text":"This method stores a client secret or client certificate securely in Himmelblau\u2019s encrypted cache and removes the need to specify an app_id in himmelblau.conf .","title":"Option A: Using Confidential Client Credentials (Recommended)"},{"location":"advanced/Creating-an-Entra-ID-Application-for-Himmelblau-GroupMember.Read.All-Permissions/#store-a-client-secret","text":"aad-tool cred secret --client-id <CLIENT_ID> --domain <DOMAIN> --secret <SECRET_VALUE> In the Entra ID portal, under Certificates & secrets , create a new Client secret . Copy the Value immediately (you won\u2019t see it again) and use it with the above command.","title":"Store a client secret"},{"location":"advanced/Creating-an-Entra-ID-Application-for-Himmelblau-GroupMember.Read.All-Permissions/#or-set-up-a-client-certificate","text":"aad-tool cred cert --client-id <CLIENT_ID> --domain <DOMAIN> --valid-days 365 --cert-out /tmp/my-cert.crt Upload /tmp/my-cert.crt in the Entra ID portal under Certificates & secrets > Certificates . The private key never leaves your TPM or software HSM. Note: These credentials expire, and you'll need to repeat these steps each time the credentials expire.","title":"Or set up a client certificate"},{"location":"advanced/Creating-an-Entra-ID-Application-for-Himmelblau-GroupMember.Read.All-Permissions/#option-b-using-delegated-authentication","text":"If you do not configure confidential client credentials, add your application ID to himmelblau.conf for delegated authentication. [example.com] app_id = 98fa618b-e5d2-4697-b0fd-fe3ec5eecdd3 Replace with your actual Application (client) ID found in the app\u2019s Overview page. Note: This method prevents the enumeration of rfc2307 attributes and group memberships until after each user authenticates. Utilizing the aad-tool enumerate command can improve attribute resolution, but will need to be performed each time a new user is added to the directory (or whenever their posix attributes are added/modified).","title":"Option B: Using Delegated Authentication"},{"location":"advanced/Creating-an-Entra-ID-Application-for-Himmelblau-GroupMember.Read.All-Permissions/#5-restart-himmelblau-services","text":"To apply changes, restart Himmelblau: sudo systemctl restart himmelblaud sudo systemctl restart himmelblaud-tasks","title":"5. Restart Himmelblau Services"},{"location":"advanced/Creating-an-Entra-ID-Application-for-Himmelblau-GroupMember.Read.All-Permissions/#6-optional-pre-cache-uidgid-mappings","text":"You can optionally pre-fetch all users and groups with RFC2307 attributes: aad-tool enumerate This avoids lookups being triggered on first login.","title":"6. (Optional) Pre-cache UID/GID Mappings"},{"location":"advanced/Creating-an-Entra-ID-Application-for-Himmelblau-GroupMember.Read.All-Permissions/#7-managing-credentials","text":"List stored credentials: aad-tool cred list --domain <DOMAIN> Remove credentials if needed: aad-tool cred delete --domain <DOMAIN>","title":"7. Managing Credentials"},{"location":"advanced/Creating-an-Entra-ID-Application-for-Himmelblau-GroupMember.Read.All-Permissions/#conclusion","text":"By following these steps, Himmelblau will be able to retrieve group information necessary for accurate ID mapping using Entra ID. Ensure that the application has the necessary permissions and is correctly configured in himmelblau.conf for seamless integration.","title":"Conclusion"},{"location":"advanced/Enabling-the-Himmelblau-QR-Greeter-gnome%E2%80%90shell-Extension/","text":"Download and Install the Extension Package Download the appropriate package for your distribution The package is called himmelblau-qr-greeter . Follow your distribution\u2019s instructions for installing system packages. Enable the Extension for the GDM User Since the extension runs on the GDM (login) screen, you must enable it as the gdm user. Run the following commands: Open a shell as the gdm user: sudo machinectl shell gdm@ /bin/bash Enable the extension for GDM: gsettings set org.gnome.shell enabled-extensions \"['qr-greeter@himmelblau-idm.org']\" Exit the shell: exit Restart GDM To apply the changes, restart GDM: sudo systemctl restart gdm3 After these steps, the Himmelblau QR Greeter extension will be active on your login and lock screens.","title":"Enabling the Himmelblau QR Greeter gnome\u2010shell Extension"},{"location":"advanced/Syncing-Active-Directory-with-Azure-Entra-ID/","text":"3. Install and Configure Microsoft Entra Connect Download Microsoft Entra Connect from Microsoft: https://www.microsoft.com/en-us/download/details.aspx?id=47594 Run the installer on your AD domain controller or another dedicated server. Choose \"Custom installation\" (recommended for better control). Connect to Azure Entra ID using Global Admin credentials . Connect to Active Directory : Enter your AD DS credentials (Enterprise Admin). It should verify and list your domain. Choose Sync Options : If you want password hash synchronization (PHS), select it. If using Pass-through Authentication (PTA) or Federation, configure as needed. Select \"Start Synchronization\" and finish setup.","title":"Syncing Active Directory with Azure Entra ID"},{"location":"advanced/Syncing-Active-Directory-with-Azure-Entra-ID/#3-install-and-configure-microsoft-entra-connect","text":"Download Microsoft Entra Connect from Microsoft: https://www.microsoft.com/en-us/download/details.aspx?id=47594 Run the installer on your AD domain controller or another dedicated server. Choose \"Custom installation\" (recommended for better control). Connect to Azure Entra ID using Global Admin credentials . Connect to Active Directory : Enter your AD DS credentials (Enterprise Admin). It should verify and list your domain. Choose Sync Options : If you want password hash synchronization (PHS), select it. If using Pass-through Authentication (PTA) or Federation, configure as needed. Select \"Start Synchronization\" and finish setup.","title":"3. Install and Configure Microsoft Entra Connect"},{"location":"troubleshooting/Capturing-authentication-traffic-using-cirrus%E2%80%90scope/","text":"Capturing OAuth2 traffic when authenticating to Azure Entra ID is essential for debugging and resolving issues in the libhimmelblau library. By inspecting the detailed HTTP requests and responses exchanged during the authentication process, developers can identify discrepancies, such as malformed requests, unexpected status codes, or incorrect parameters. This comprehensive view helps pinpoint where errors occur, enabling targeted fixes and enhancements to improve the reliability and functionality of Himmelblau, ultimately leading to smoother integrations and user experiences. This guide walks you through how to capture and inspect authentication traffic using the cirrus-scope diagnostic tool along with mitmproxy . New: cirrus-scope now includes an obfuscate command to help automatically mask sensitive data from these captures before sharing them. Step-by-Step Instructions You\u2019ll learn how to capture traffic, then obfuscate sensitive details using cirrus-scope obfuscate . Download cirrus-scope : Prebuilt binaries are available from the official Himmelblau downloads page: \ud83d\udc49 https://himmelblau-idm.org/downloads.html Download mitmproxy : Download mitmproxy from their website , and extract the binaries. tar -xf mitmproxy-11.0.0-linux-x86_64.tar.gz Start mitmweb : Run the following command to start mitmweb : ./mitmweb This starts mitmweb and opens a web interface for monitoring HTTP and HTTPS traffic. Install the mitmproxy CA Certificate : On Ubuntu, sudo cp $HOME/.mitmproxy/mitmproxy-ca-cert.pem /usr/local/share/ca-certificates/mitmproxy.crt sudo update-ca-certificates Or on Fedora, sudo cp $HOME/.mitmproxy/mitmproxy-ca-cert.pem /etc/pki/ca-trust/source/anchors/ sudo update-ca-trust Or on openSUSE Leap, sudo cp $HOME/.mitmproxy/mitmproxy-ca-cert.pem /usr/share/pki/trust/anchors/mitmproxy.crt sudo update-ca-certificates Access the Web Interface : Open your web browser and go to: http://127.0.0.1:8081/ You should see the mitmweb dashboard for viewing captured traffic. Run cirrus-scope with Proxy Enabled : Run the desired test command from cirrus-scope , routing its traffic through mitmproxy by setting the HTTPS_PROXY environment variable. Example: HTTPS_PROXY=http://127.0.0.1:8080 cirrus-scope auth-test --name your_user@example.com You will be prompted to enter credentials interactively. You can add --debug for detailed logs: HTTPS_PROXY=http://127.0.0.1:8080 cirrus-scope auth-test --name your_user@example.com --debug Other available test commands include: enrollment-test : Simulates device enrollment refresh-token-acquire : Acquires new access tokens using a refresh token provision-hello-key-test : Tests Hello for Business key provisioning Capture and Save the HAR File : Go to the mitmweb dashboard in your web browser. Click on the \"File\" drop down menu, then \"Save\". Your browser will download a file called 'flows' Obfuscate the capture using cirrus-scope : To help protect sensitive information, run the built-in obfuscator on your captured flows file. This will automatically replace known tokens (like JWTs, Kerberos tickets, flow tokens, request blobs, and your tenant ID) with equal-length asterisk sequences so that the file remains structurally valid. Example: bash cirrus-scope obfuscate -i flows -o flows.obfuscated You can also specify explicit secrets to obfuscate using the --custom option, for example: ```bash cirrus-scope obfuscate -i flows -o flows.obfuscated \\ --custom \"your_user@example.com\" \\ --custom \"SuperSecretPassword\" ``` This ensures additional sensitive data like emails or passwords are masked. The resulting file flows.obfuscated will be safe to share for debugging, while still maintaining the exact format required for tools like mitmproxy. That's it! You have now captured, obfuscated, and saved HTTP(S) traffic as a HAR file. Important: Always use cirrus-scope obfuscate to sanitize your capture. Manually editing the file to remove secrets can corrupt the format, making it unreadable by mitmproxy or other tools. This tool replaces sensitive data with exact-length values to keep the file structurally valid. It remains your responsibility to review the file to ensure no secrets remain. Passwords and plaintext credentials are not detected automatically \u2014 always provide them explicitly via --custom if needed.","title":"Capturing authentication traffic using cirrus\u2010scope"},{"location":"troubleshooting/Capturing-authentication-traffic-using-cirrus%E2%80%90scope/#step-by-step-instructions","text":"You\u2019ll learn how to capture traffic, then obfuscate sensitive details using cirrus-scope obfuscate . Download cirrus-scope : Prebuilt binaries are available from the official Himmelblau downloads page: \ud83d\udc49 https://himmelblau-idm.org/downloads.html Download mitmproxy : Download mitmproxy from their website , and extract the binaries. tar -xf mitmproxy-11.0.0-linux-x86_64.tar.gz Start mitmweb : Run the following command to start mitmweb : ./mitmweb This starts mitmweb and opens a web interface for monitoring HTTP and HTTPS traffic. Install the mitmproxy CA Certificate : On Ubuntu, sudo cp $HOME/.mitmproxy/mitmproxy-ca-cert.pem /usr/local/share/ca-certificates/mitmproxy.crt sudo update-ca-certificates Or on Fedora, sudo cp $HOME/.mitmproxy/mitmproxy-ca-cert.pem /etc/pki/ca-trust/source/anchors/ sudo update-ca-trust Or on openSUSE Leap, sudo cp $HOME/.mitmproxy/mitmproxy-ca-cert.pem /usr/share/pki/trust/anchors/mitmproxy.crt sudo update-ca-certificates Access the Web Interface : Open your web browser and go to: http://127.0.0.1:8081/ You should see the mitmweb dashboard for viewing captured traffic. Run cirrus-scope with Proxy Enabled : Run the desired test command from cirrus-scope , routing its traffic through mitmproxy by setting the HTTPS_PROXY environment variable. Example: HTTPS_PROXY=http://127.0.0.1:8080 cirrus-scope auth-test --name your_user@example.com You will be prompted to enter credentials interactively. You can add --debug for detailed logs: HTTPS_PROXY=http://127.0.0.1:8080 cirrus-scope auth-test --name your_user@example.com --debug Other available test commands include: enrollment-test : Simulates device enrollment refresh-token-acquire : Acquires new access tokens using a refresh token provision-hello-key-test : Tests Hello for Business key provisioning Capture and Save the HAR File : Go to the mitmweb dashboard in your web browser. Click on the \"File\" drop down menu, then \"Save\". Your browser will download a file called 'flows' Obfuscate the capture using cirrus-scope : To help protect sensitive information, run the built-in obfuscator on your captured flows file. This will automatically replace known tokens (like JWTs, Kerberos tickets, flow tokens, request blobs, and your tenant ID) with equal-length asterisk sequences so that the file remains structurally valid. Example: bash cirrus-scope obfuscate -i flows -o flows.obfuscated You can also specify explicit secrets to obfuscate using the --custom option, for example: ```bash cirrus-scope obfuscate -i flows -o flows.obfuscated \\ --custom \"your_user@example.com\" \\ --custom \"SuperSecretPassword\" ``` This ensures additional sensitive data like emails or passwords are masked. The resulting file flows.obfuscated will be safe to share for debugging, while still maintaining the exact format required for tools like mitmproxy. That's it! You have now captured, obfuscated, and saved HTTP(S) traffic as a HAR file.","title":"Step-by-Step Instructions"},{"location":"troubleshooting/Capturing-authentication-traffic-using-cirrus%E2%80%90scope/#important","text":"Always use cirrus-scope obfuscate to sanitize your capture. Manually editing the file to remove secrets can corrupt the format, making it unreadable by mitmproxy or other tools. This tool replaces sensitive data with exact-length values to keep the file structurally valid. It remains your responsibility to review the file to ensure no secrets remain. Passwords and plaintext credentials are not detected automatically \u2014 always provide them explicitly via --custom if needed.","title":"Important:"},{"location":"troubleshooting/MS-specs-which-Himmelblau-uses/","text":"This page is intended as a place to gather all the MS specification documents that Himmelblau implements, as well as comments about the accuracy of the specs. [MS-OAPX] : OAuth 2.0 Protocol Extensions Used in the MSAL PublicClientApplication for general authentication. [MS-OAPXBC] : OAuth 2.0 Protocol Extensions for Broker Clients Used in the MSAL BrokerClientApplication for PRT requests. [MS-DVRJ] : Device Registration Join Protocol Sections 3.1.5.1.1.1 and 3.1.5.1.1.2 are mostly accurate and used in [MS-DRS] Section 2.1 . [MS-DVRE] : Device Registration Enrollment Protocol This protocol appears to be used by the DRS service in Azure to enroll the client device. Section 2.3.3 Alt-Security-Identities matches the device object which is created within the directory. The client does not use this protocol, but is useful as a reference. [MS-DVRD] : Device Registration Discovery Protocol Accurate, but missing many services, see [MS-DRS] Section 3.1 . [MS-KPP] : Key Provisioning Protocol This is used by MSAL to provision a Windows Hello for Business key. The process for requesting a PRT using that key does not appear to be document (although MSAL copies Windows behavior here to request the PRT).","title":"MS specs which Himmelblau uses"},{"location":"troubleshooting/OpenSSH-Bug-2876-%E2%80%90--Unable-to-use-MFA-over-SSH-%E2%80%90-Workaround/","text":"Summary of Bug 2876 Bug 2876 in OpenSSH pertains to an issue with PAM info messages not being flushed to the console until further interaction is required. This leads to problems in scenarios where multiple authentication prompts are expected, such as with Microsoft Authenticator's Push MFA. Problem Behavior When attempting to authenticate via SSH with an account that requires Microsoft Authenticator (Push) MFA , the prompt displaying the number to enter into the app is delayed or not shown until after the initial authentication fails. This leads to confusion, as the user receives the MFA push notification on their device but cannot complete the authentication due to the missing prompt. Local Login (Working as Expected) When logging in locally (e.g., via su -l ), the password prompt and the MFA number prompt are displayed as expected, and the user is able to complete the login process: admin@dev01:~$ su -l user@domain.onmicrosoft.com Password: Open your Authenticator app, and enter the number '73' to sign in. user@domain.onmicrosoft.com@dev01:~$ whoami user@domain.onmicrosoft.com Remote SSH Login (Delayed MFA Prompt) When logging in remotely via SSH, only the password prompt is shown initially, and the MFA number prompt is delayed until the authentication fails: localuser@workstation:~$ ssh user@domain.onmicrosoft.com@dev01 (user@domain.onmicrosoft.com@dev01) Password: ## Note: The MFA push notification is received, but no number is shown to complete the authentication. (user@domain.onmicrosoft.com@dev01) Open your Authenticator app, and enter the number '59' to sign in. Password: ^C This behavior disrupts the MFA flow, as the number needed to complete the login is not shown to the user until the session has already failed. Upstream Status The fix for this issue has been proposed in Pull Request 452 on GitHub , but the upstream OpenSSH community has been slow to review and merge the patch. This means that users on most systems will continue to face this issue unless they apply the fix downstream. Downstream Fixes openSUSE and Ubuntu have both applied the patch in their respective distributions. Users running OpenSSH on these systems should be free of this bug on recent versions of the distributions. Working Around Bug 2876 in Himmelblau (introduced in Himmelblau 0.6.0) This bug can cause significant disruption to SSH-based logins. If you're using a system affected by Bug 2876 and the patch has not been applied upstream, you can work around the issue by configuring the pam_himmelblau.so module with the mfa_poll_prompt option. This forces the prompt to be shown to the user at the appropriate time. Step-by-Step Instructions Locate the PAM Configuration : See the Himmelblau instructions for configuring PAM . You could apply a targeted work around by modifying the file /etc/pam.d/sshd . Add the mfa_poll_prompt Option : To avoid the prompt delay caused by Bug 2876, modify the PAM configuration for Himmelblau by adding the mfa_poll_prompt option to the pam_himmelblau.so module. Example PAM configuration: auth required pam_himmelblau.so ignore_unknown_user mfa_poll_prompt Test the Setup : Attempt an SSH login using an account with Microsoft Authenticator Push MFA enabled and ensure that the MFA number prompt is displayed as expected. The mfa_poll_prompt option in the workaround introduces a \"Press enter to continue\" prompt during the MFA flow, which forces user interaction. This interaction triggers OpenSSH to flush its buffered output, causing the previously delayed MFA number prompt to be displayed. As a result, the user can view the MFA prompt and complete the authentication process without waiting for a failed login attempt. Here\u2019s an example of what the login process will look like to the user with the workaround in place: localuser@workstation:~$ ssh user@domain.onmicrosoft.com@dev01 (user@domain.onmicrosoft.com@dev01) Password: Open your Authenticator app, and enter the number '59' to sign in. Press enter to continue ## Note: The user must now press enter to continue the MFA authentication.","title":"OpenSSH Bug 2876 \u2010  Unable to use MFA over SSH \u2010 Workaround"},{"location":"troubleshooting/OpenSSH-Bug-2876-%E2%80%90--Unable-to-use-MFA-over-SSH-%E2%80%90-Workaround/#summary-of-bug-2876","text":"Bug 2876 in OpenSSH pertains to an issue with PAM info messages not being flushed to the console until further interaction is required. This leads to problems in scenarios where multiple authentication prompts are expected, such as with Microsoft Authenticator's Push MFA.","title":"Summary of Bug 2876"},{"location":"troubleshooting/OpenSSH-Bug-2876-%E2%80%90--Unable-to-use-MFA-over-SSH-%E2%80%90-Workaround/#problem-behavior","text":"When attempting to authenticate via SSH with an account that requires Microsoft Authenticator (Push) MFA , the prompt displaying the number to enter into the app is delayed or not shown until after the initial authentication fails. This leads to confusion, as the user receives the MFA push notification on their device but cannot complete the authentication due to the missing prompt.","title":"Problem Behavior"},{"location":"troubleshooting/OpenSSH-Bug-2876-%E2%80%90--Unable-to-use-MFA-over-SSH-%E2%80%90-Workaround/#local-login-working-as-expected","text":"When logging in locally (e.g., via su -l ), the password prompt and the MFA number prompt are displayed as expected, and the user is able to complete the login process: admin@dev01:~$ su -l user@domain.onmicrosoft.com Password: Open your Authenticator app, and enter the number '73' to sign in. user@domain.onmicrosoft.com@dev01:~$ whoami user@domain.onmicrosoft.com","title":"Local Login (Working as Expected)"},{"location":"troubleshooting/OpenSSH-Bug-2876-%E2%80%90--Unable-to-use-MFA-over-SSH-%E2%80%90-Workaround/#remote-ssh-login-delayed-mfa-prompt","text":"When logging in remotely via SSH, only the password prompt is shown initially, and the MFA number prompt is delayed until the authentication fails: localuser@workstation:~$ ssh user@domain.onmicrosoft.com@dev01 (user@domain.onmicrosoft.com@dev01) Password: ## Note: The MFA push notification is received, but no number is shown to complete the authentication. (user@domain.onmicrosoft.com@dev01) Open your Authenticator app, and enter the number '59' to sign in. Password: ^C This behavior disrupts the MFA flow, as the number needed to complete the login is not shown to the user until the session has already failed.","title":"Remote SSH Login (Delayed MFA Prompt)"},{"location":"troubleshooting/OpenSSH-Bug-2876-%E2%80%90--Unable-to-use-MFA-over-SSH-%E2%80%90-Workaround/#upstream-status","text":"The fix for this issue has been proposed in Pull Request 452 on GitHub , but the upstream OpenSSH community has been slow to review and merge the patch. This means that users on most systems will continue to face this issue unless they apply the fix downstream.","title":"Upstream Status"},{"location":"troubleshooting/OpenSSH-Bug-2876-%E2%80%90--Unable-to-use-MFA-over-SSH-%E2%80%90-Workaround/#downstream-fixes","text":"openSUSE and Ubuntu have both applied the patch in their respective distributions. Users running OpenSSH on these systems should be free of this bug on recent versions of the distributions.","title":"Downstream Fixes"},{"location":"troubleshooting/OpenSSH-Bug-2876-%E2%80%90--Unable-to-use-MFA-over-SSH-%E2%80%90-Workaround/#working-around-bug-2876-in-himmelblau-introduced-in-himmelblau-060","text":"This bug can cause significant disruption to SSH-based logins. If you're using a system affected by Bug 2876 and the patch has not been applied upstream, you can work around the issue by configuring the pam_himmelblau.so module with the mfa_poll_prompt option. This forces the prompt to be shown to the user at the appropriate time.","title":"Working Around Bug 2876 in Himmelblau (introduced in Himmelblau 0.6.0)"},{"location":"troubleshooting/OpenSSH-Bug-2876-%E2%80%90--Unable-to-use-MFA-over-SSH-%E2%80%90-Workaround/#step-by-step-instructions","text":"Locate the PAM Configuration : See the Himmelblau instructions for configuring PAM . You could apply a targeted work around by modifying the file /etc/pam.d/sshd . Add the mfa_poll_prompt Option : To avoid the prompt delay caused by Bug 2876, modify the PAM configuration for Himmelblau by adding the mfa_poll_prompt option to the pam_himmelblau.so module. Example PAM configuration: auth required pam_himmelblau.so ignore_unknown_user mfa_poll_prompt Test the Setup : Attempt an SSH login using an account with Microsoft Authenticator Push MFA enabled and ensure that the MFA number prompt is displayed as expected. The mfa_poll_prompt option in the workaround introduces a \"Press enter to continue\" prompt during the MFA flow, which forces user interaction. This interaction triggers OpenSSH to flush its buffered output, causing the previously delayed MFA number prompt to be displayed. As a result, the user can view the MFA prompt and complete the authentication process without waiting for a failed login attempt. Here\u2019s an example of what the login process will look like to the user with the workaround in place: localuser@workstation:~$ ssh user@domain.onmicrosoft.com@dev01 (user@domain.onmicrosoft.com@dev01) Password: Open your Authenticator app, and enter the number '59' to sign in. Press enter to continue ## Note: The user must now press enter to continue the MFA authentication.","title":"Step-by-Step Instructions"},{"location":"troubleshooting/Removing-all-Hello-PINs-%26-cached-PRTs-on-a-Himmelblau-host/","text":"Overview Hello PINs (and associated keys) for Himmelblau are stored in the SQLite database: /var/cache/himmelblaud/himmelblau.cache.db They are stored and encrypted as entries in the hsm_data_t table with keys like: <user>/hello <user>/hello_decoupled <user>/hello_prt Where <user> is the full UPN (e.g. alice@domain.com ). This guide provides a script to remove all Hello PINs (regular & decoupled) and cached PRTs, regardless of the user. What exactly gets deleted? Key pattern Meaning %/hello Hello PIN (normal, linked to Entra Id) %/hello_decoupled Hello PIN (offline / decoupled, for DAG MFA) %/hello_prt Cached PRT for offline login with SSO This ensures the host no longer has stored Hello PINs or cached tokens, forcing fresh authentication. The cleanup script Below is a simple shell script that will safely delete these keys using sqlite3 . It requires root privileges because /var/cache/himmelblaud/himmelblau.cache.db is owned by the himmelblaud user. \ud83d\udca1 Make sure the Himmelblau daemon is stopped while running this, to avoid database locking issues. sudo systemctl stop himmelblaud #!/usr/bin/env bash set -euo pipefail DB_PATH=\"/var/cache/himmelblaud/himmelblau.cache.db\" if [[ ! -f \"$DB_PATH\" ]]; then echo \"Error: Database not found at $DB_PATH\" exit 1 fi echo \"Removing all Hello PINs and cached PRTs from $DB_PATH ...\" sqlite3 \"$DB_PATH\" <<EOF DELETE FROM hsm_data_t WHERE key LIKE '%/hello'; DELETE FROM hsm_data_t WHERE key LIKE '%/hello_decoupled'; DELETE FROM hsm_data_t WHERE key LIKE '%/hello_prt'; EOF echo \"Cleanup completed.\" How to use Save the script to a file, e.g. remove_himmelblau_hello_pins.sh Make it executable: chmod +x remove_himmelblau_hello_pins.sh Stop Himmelblau daemon: sudo systemctl stop himmelblaud Run the script: sudo ./remove_himmelblau_hello_pins.sh Restart Himmelblau daemon: sudo systemctl start himmelblaud Notes for Himmelblau versions Himmelblau Version Key types present 0.9.x Only %/hello (regular PINs) >=1.0.x %/hello , %/hello_decoupled , %/hello_prt Done! The host is now wiped of all Hello PINs and cached PRTs. New PIN enrollments or sign-ins will need to occur on next use.","title":"Removing all Hello PINs & cached PRTs on a Himmelblau host"},{"location":"troubleshooting/Removing-all-Hello-PINs-%26-cached-PRTs-on-a-Himmelblau-host/#overview","text":"Hello PINs (and associated keys) for Himmelblau are stored in the SQLite database: /var/cache/himmelblaud/himmelblau.cache.db They are stored and encrypted as entries in the hsm_data_t table with keys like: <user>/hello <user>/hello_decoupled <user>/hello_prt Where <user> is the full UPN (e.g. alice@domain.com ). This guide provides a script to remove all Hello PINs (regular & decoupled) and cached PRTs, regardless of the user.","title":"Overview"},{"location":"troubleshooting/Removing-all-Hello-PINs-%26-cached-PRTs-on-a-Himmelblau-host/#what-exactly-gets-deleted","text":"Key pattern Meaning %/hello Hello PIN (normal, linked to Entra Id) %/hello_decoupled Hello PIN (offline / decoupled, for DAG MFA) %/hello_prt Cached PRT for offline login with SSO This ensures the host no longer has stored Hello PINs or cached tokens, forcing fresh authentication.","title":"What exactly gets deleted?"},{"location":"troubleshooting/Removing-all-Hello-PINs-%26-cached-PRTs-on-a-Himmelblau-host/#the-cleanup-script","text":"Below is a simple shell script that will safely delete these keys using sqlite3 . It requires root privileges because /var/cache/himmelblaud/himmelblau.cache.db is owned by the himmelblaud user. \ud83d\udca1 Make sure the Himmelblau daemon is stopped while running this, to avoid database locking issues. sudo systemctl stop himmelblaud #!/usr/bin/env bash set -euo pipefail DB_PATH=\"/var/cache/himmelblaud/himmelblau.cache.db\" if [[ ! -f \"$DB_PATH\" ]]; then echo \"Error: Database not found at $DB_PATH\" exit 1 fi echo \"Removing all Hello PINs and cached PRTs from $DB_PATH ...\" sqlite3 \"$DB_PATH\" <<EOF DELETE FROM hsm_data_t WHERE key LIKE '%/hello'; DELETE FROM hsm_data_t WHERE key LIKE '%/hello_decoupled'; DELETE FROM hsm_data_t WHERE key LIKE '%/hello_prt'; EOF echo \"Cleanup completed.\"","title":"The cleanup script"},{"location":"troubleshooting/Removing-all-Hello-PINs-%26-cached-PRTs-on-a-Himmelblau-host/#how-to-use","text":"Save the script to a file, e.g. remove_himmelblau_hello_pins.sh Make it executable: chmod +x remove_himmelblau_hello_pins.sh Stop Himmelblau daemon: sudo systemctl stop himmelblaud Run the script: sudo ./remove_himmelblau_hello_pins.sh Restart Himmelblau daemon: sudo systemctl start himmelblaud","title":"How to use"},{"location":"troubleshooting/Removing-all-Hello-PINs-%26-cached-PRTs-on-a-Himmelblau-host/#notes-for-himmelblau-versions","text":"Himmelblau Version Key types present 0.9.x Only %/hello (regular PINs) >=1.0.x %/hello , %/hello_decoupled , %/hello_prt Done! The host is now wiped of all Hello PINs and cached PRTs. New PIN enrollments or sign-ins will need to occur on next use.","title":"Notes for Himmelblau versions"},{"location":"troubleshooting/Testing-Himmelblau-Developer-Builds-with-Packet-Capture/","text":"A Himmelblau developer build allows you to proxy all communication between himmelblaud and Azure Entra ID. This is critical for diagnosing low-level authentication or policy issues. These instructions will walk you through setting up mitmproxy , ensuring your himmelblaud service is routed through it, installing the proxy certificate, and finally capturing and obfuscating the traffic. \ud83d\udea7 Developer Build Notice \u26a0\ufe0f IMPORTANT WARNING: This special Himmelblau developer build is strictly for debugging and diagnostics. It proxies authentication traffic through mitmproxy , exposing sensitive credentials and tokens. \u27a1\ufe0f Never run this in production. Use it only in controlled test environments to diagnose problems. \ud83d\udce8 How to get a developer build Developer builds are not public binaries. To obtain one: Contact David Mulder (project maintainer): \ud83d\udce7 Email: dmulder@himmelblau-idm.org \ud83d\udcac Matrix: #himmelblau\\:matrix.org 1. Verify your HTTPS_PROXY is set in the service file Open your himmelblaud systemd service file and confirm it is configured to use your local mitmproxy. On Ubuntu/Debian : sudo nano /etc/systemd/system/himmelblaud.service On RHEL/Fedora/openSUSE : sudo nano /usr/lib/systemd/system/himmelblaud.service Make sure it includes, and that the HTTPS_PROXY setting is correct for your mitmproxy instance: Environment=\"HTTPS_PROXY=http://127.0.0.1:8080\" Then reload systemd and restart himmelblaud : sudo systemctl daemon-reload sudo systemctl restart himmelblaud himmelblaud-tasks 2. Install and start mitmweb Download mitmproxy from https://mitmproxy.org/ , extract it, and run: ./mitmweb This launches a local web interface at http://127.0.0.1:8081/ . 3. Install the mitmproxy CA certificate This ensures your system trusts mitmproxy\u2019s TLS interception. Ubuntu/Debian: sudo cp ~/.mitmproxy/mitmproxy-ca-cert.pem /usr/local/share/ca-certificates/mitmproxy.crt sudo update-ca-certificates Fedora/RHEL: sudo cp ~/.mitmproxy/mitmproxy-ca-cert.pem /etc/pki/ca-trust/source/anchors/ sudo update-ca-trust openSUSE: sudo cp ~/.mitmproxy/mitmproxy-ca-cert.pem /usr/share/pki/trust/anchors/mitmproxy.crt sudo update-ca-certificates 4. Reproduce your Himmelblau issue At this point: himmelblaud is routing traffic through 127.0.0.1:8080 mitmweb is running to intercept traffic Trigger the behavior you\u2019re testing \u2014 e.g. SSH login, sudo , or any other process that hits pam_himmelblau . Watch the traffic appear in the mitmweb dashboard at http://127.0.0.1:8081/ . 5. Save the flow file In the mitmweb interface: Click File \u2192 Save . This downloads a file typically called flows . 6. Obfuscate sensitive data with cirrus-scope Before sharing your capture, sanitize it using: cirrus-scope obfuscate -i flows -o flows.obfuscated This automatically masks known sensitive data like JWTs, flow tokens, tenant IDs, etc. You can also specify explicit items to redact (emails, passwords, etc): cirrus-scope obfuscate -i flows -o flows.obfuscated \\ --custom \"admin@contoso.com\" \\ --custom \"SuperSecretPassword\" Done! You can now safely provide flows.obfuscated for debugging. It maintains the structure needed for tools like mitmproxy to replay or analyze, while protecting your secrets. \ud83d\udea8 Important Note Always run cirrus-scope obfuscate before sharing captures. Manually editing the file may break its format. This tool preserves lengths to ensure it remains valid for protocol testing.","title":"Testing Himmelblau Developer Builds with Packet Capture"},{"location":"troubleshooting/Testing-Himmelblau-Developer-Builds-with-Packet-Capture/#developer-build-notice","text":"\u26a0\ufe0f IMPORTANT WARNING: This special Himmelblau developer build is strictly for debugging and diagnostics. It proxies authentication traffic through mitmproxy , exposing sensitive credentials and tokens. \u27a1\ufe0f Never run this in production. Use it only in controlled test environments to diagnose problems.","title":"\ud83d\udea7 Developer Build Notice"},{"location":"troubleshooting/Testing-Himmelblau-Developer-Builds-with-Packet-Capture/#how-to-get-a-developer-build","text":"Developer builds are not public binaries. To obtain one: Contact David Mulder (project maintainer): \ud83d\udce7 Email: dmulder@himmelblau-idm.org \ud83d\udcac Matrix: #himmelblau\\:matrix.org","title":"\ud83d\udce8 How to get a developer build"},{"location":"troubleshooting/Testing-Himmelblau-Developer-Builds-with-Packet-Capture/#1-verify-your-https_proxy-is-set-in-the-service-file","text":"Open your himmelblaud systemd service file and confirm it is configured to use your local mitmproxy. On Ubuntu/Debian : sudo nano /etc/systemd/system/himmelblaud.service On RHEL/Fedora/openSUSE : sudo nano /usr/lib/systemd/system/himmelblaud.service Make sure it includes, and that the HTTPS_PROXY setting is correct for your mitmproxy instance: Environment=\"HTTPS_PROXY=http://127.0.0.1:8080\" Then reload systemd and restart himmelblaud : sudo systemctl daemon-reload sudo systemctl restart himmelblaud himmelblaud-tasks","title":"1. Verify your HTTPS_PROXY is set in the service file"},{"location":"troubleshooting/Testing-Himmelblau-Developer-Builds-with-Packet-Capture/#2-install-and-start-mitmweb","text":"Download mitmproxy from https://mitmproxy.org/ , extract it, and run: ./mitmweb This launches a local web interface at http://127.0.0.1:8081/ .","title":"2. Install and start mitmweb"},{"location":"troubleshooting/Testing-Himmelblau-Developer-Builds-with-Packet-Capture/#3-install-the-mitmproxy-ca-certificate","text":"This ensures your system trusts mitmproxy\u2019s TLS interception. Ubuntu/Debian: sudo cp ~/.mitmproxy/mitmproxy-ca-cert.pem /usr/local/share/ca-certificates/mitmproxy.crt sudo update-ca-certificates Fedora/RHEL: sudo cp ~/.mitmproxy/mitmproxy-ca-cert.pem /etc/pki/ca-trust/source/anchors/ sudo update-ca-trust openSUSE: sudo cp ~/.mitmproxy/mitmproxy-ca-cert.pem /usr/share/pki/trust/anchors/mitmproxy.crt sudo update-ca-certificates","title":"3. Install the mitmproxy CA certificate"},{"location":"troubleshooting/Testing-Himmelblau-Developer-Builds-with-Packet-Capture/#4-reproduce-your-himmelblau-issue","text":"At this point: himmelblaud is routing traffic through 127.0.0.1:8080 mitmweb is running to intercept traffic Trigger the behavior you\u2019re testing \u2014 e.g. SSH login, sudo , or any other process that hits pam_himmelblau . Watch the traffic appear in the mitmweb dashboard at http://127.0.0.1:8081/ .","title":"4. Reproduce your Himmelblau issue"},{"location":"troubleshooting/Testing-Himmelblau-Developer-Builds-with-Packet-Capture/#5-save-the-flow-file","text":"In the mitmweb interface: Click File \u2192 Save . This downloads a file typically called flows .","title":"5. Save the flow file"},{"location":"troubleshooting/Testing-Himmelblau-Developer-Builds-with-Packet-Capture/#6-obfuscate-sensitive-data-with-cirrus-scope","text":"Before sharing your capture, sanitize it using: cirrus-scope obfuscate -i flows -o flows.obfuscated This automatically masks known sensitive data like JWTs, flow tokens, tenant IDs, etc. You can also specify explicit items to redact (emails, passwords, etc): cirrus-scope obfuscate -i flows -o flows.obfuscated \\ --custom \"admin@contoso.com\" \\ --custom \"SuperSecretPassword\"","title":"6. Obfuscate sensitive data with cirrus-scope"},{"location":"troubleshooting/Testing-Himmelblau-Developer-Builds-with-Packet-Capture/#done","text":"You can now safely provide flows.obfuscated for debugging. It maintains the structure needed for tools like mitmproxy to replay or analyze, while protecting your secrets.","title":"Done!"},{"location":"troubleshooting/Testing-Himmelblau-Developer-Builds-with-Packet-Capture/#important-note","text":"Always run cirrus-scope obfuscate before sharing captures. Manually editing the file may break its format. This tool preserves lengths to ensure it remains valid for protocol testing.","title":"\ud83d\udea8 Important Note"},{"location":"troubleshooting/Troubleshooting%3A-%60The-user-%27...%27-already-exists%60-and-fake-users-listed-in-NSS/","text":"Overview When using Himmelblau, you might encounter the error: useradd: user 'test1' already exists or similar behavior when attempting to create local users. You might also notice that nss responds affirmatively to the existence of fake users: $ getent passwd fake_user1 fake_user1@example.com:x:955955525:955955525::/home/fake_user1:/bin/bash $ getent passwd fake_user2 fake_user2@example.com:x:1881368896:1881368896::/home/fake_user2:/bin/bash This problem occurs even for users that neither exist locally nor in your Azure Entra ID tenant. Additionally, this issue can lead to complications with package management tools (e.g., apt or dnf ) that need to create system users during installation. Root Cause This behavior arises from the cn_name_mapping parameter in your himmelblau.conf configuration file. By default, this parameter is enabled ( true ) unless explicitly set to false . When enabled, it automatically maps common names (CN) to user principal names (UPN). The issue appears to occur because user enumeration is disabled in Azure Entra ID . Azure Entra ID is responding to all user existence requests as if the user does exist , regardless of whether the user truly exists in the directory. It's unknown which setting in Azure Entra Id is causing this behavior, but it is assumed that Microsoft has implemented this behavior to ensure authentication does not fail for valid users. If the system always responded that users do not exist, authentication would fail even for legitimate accounts. It's assumed that the purpose of this behavior is to prevent the enumeration of valid UPN names from the directory. When an attacker is able to enumerate a list of valid UPN names, it can enable password spray attacks, brute force attacks, phishing attacks, and password reuse attacks. Impact Local User Management : System tools like useradd fail to create new users. Package Installation : Software installations that create system users for daemons may fail, causing package dependency issues. General User Queries : Tools like getent passwd may list users that do not exist. Solution: Disable cn_name_mapping To mitigate this issue, disable the cn_name_mapping parameter in your Himmelblau configuration file. Locate the Configuration File : The default configuration file is located at: /etc/himmelblau/himmelblau.conf Edit the File : Open the file in your preferred text editor: sudo nano /etc/himmelblau/himmelblau.conf Disable cn_name_mapping : Locate the [global] section and add or modify the following line: cn_name_mapping = false Restart Himmelblau Services : After saving the changes, restart the Himmelblau services to apply the new configuration: sudo systemctl restart himmelblaud sudo systemctl restart himmelblaud-tasks After disabling cn_name_mapping , all users will be required to authenticate to the host using their UPN. Verification Check user enumeration again: getent passwd test1 Ensure the user is not falsely listed. Retry adding a new user: sudo useradd test1 It should now succeed without errors. Notes Disabling cn_name_mapping prevents Himmelblau from making optimistic assumptions about user existence. This adjustment ensures compatibility with environments where Azure Entra ID has user enumeration disabled, aligning expected behavior with the tenant\u2019s security configuration. Additional References For more details about himmelblau.conf parameters, refer to the Himmelblau Configuration Guide or the himmelblau.conf man page . If you continue experiencing issues, consider clearing or invalidating the Himmelblau cache using the aad-tool utility: sudo aad-tool cache-clear","title":"Troubleshooting: `The user '...' already exists` and fake users listed in NSS"},{"location":"troubleshooting/Troubleshooting%3A-%60The-user-%27...%27-already-exists%60-and-fake-users-listed-in-NSS/#overview","text":"When using Himmelblau, you might encounter the error: useradd: user 'test1' already exists or similar behavior when attempting to create local users. You might also notice that nss responds affirmatively to the existence of fake users: $ getent passwd fake_user1 fake_user1@example.com:x:955955525:955955525::/home/fake_user1:/bin/bash $ getent passwd fake_user2 fake_user2@example.com:x:1881368896:1881368896::/home/fake_user2:/bin/bash This problem occurs even for users that neither exist locally nor in your Azure Entra ID tenant. Additionally, this issue can lead to complications with package management tools (e.g., apt or dnf ) that need to create system users during installation.","title":"Overview"},{"location":"troubleshooting/Troubleshooting%3A-%60The-user-%27...%27-already-exists%60-and-fake-users-listed-in-NSS/#root-cause","text":"This behavior arises from the cn_name_mapping parameter in your himmelblau.conf configuration file. By default, this parameter is enabled ( true ) unless explicitly set to false . When enabled, it automatically maps common names (CN) to user principal names (UPN). The issue appears to occur because user enumeration is disabled in Azure Entra ID . Azure Entra ID is responding to all user existence requests as if the user does exist , regardless of whether the user truly exists in the directory. It's unknown which setting in Azure Entra Id is causing this behavior, but it is assumed that Microsoft has implemented this behavior to ensure authentication does not fail for valid users. If the system always responded that users do not exist, authentication would fail even for legitimate accounts. It's assumed that the purpose of this behavior is to prevent the enumeration of valid UPN names from the directory. When an attacker is able to enumerate a list of valid UPN names, it can enable password spray attacks, brute force attacks, phishing attacks, and password reuse attacks.","title":"Root Cause"},{"location":"troubleshooting/Troubleshooting%3A-%60The-user-%27...%27-already-exists%60-and-fake-users-listed-in-NSS/#impact","text":"Local User Management : System tools like useradd fail to create new users. Package Installation : Software installations that create system users for daemons may fail, causing package dependency issues. General User Queries : Tools like getent passwd may list users that do not exist.","title":"Impact"},{"location":"troubleshooting/Troubleshooting%3A-%60The-user-%27...%27-already-exists%60-and-fake-users-listed-in-NSS/#solution-disable-cn_name_mapping","text":"To mitigate this issue, disable the cn_name_mapping parameter in your Himmelblau configuration file. Locate the Configuration File : The default configuration file is located at: /etc/himmelblau/himmelblau.conf Edit the File : Open the file in your preferred text editor: sudo nano /etc/himmelblau/himmelblau.conf Disable cn_name_mapping : Locate the [global] section and add or modify the following line: cn_name_mapping = false Restart Himmelblau Services : After saving the changes, restart the Himmelblau services to apply the new configuration: sudo systemctl restart himmelblaud sudo systemctl restart himmelblaud-tasks After disabling cn_name_mapping , all users will be required to authenticate to the host using their UPN.","title":"Solution: Disable cn_name_mapping"},{"location":"troubleshooting/Troubleshooting%3A-%60The-user-%27...%27-already-exists%60-and-fake-users-listed-in-NSS/#verification","text":"Check user enumeration again: getent passwd test1 Ensure the user is not falsely listed. Retry adding a new user: sudo useradd test1 It should now succeed without errors.","title":"Verification"},{"location":"troubleshooting/Troubleshooting%3A-%60The-user-%27...%27-already-exists%60-and-fake-users-listed-in-NSS/#notes","text":"Disabling cn_name_mapping prevents Himmelblau from making optimistic assumptions about user existence. This adjustment ensures compatibility with environments where Azure Entra ID has user enumeration disabled, aligning expected behavior with the tenant\u2019s security configuration.","title":"Notes"},{"location":"troubleshooting/Troubleshooting%3A-%60The-user-%27...%27-already-exists%60-and-fake-users-listed-in-NSS/#additional-references","text":"For more details about himmelblau.conf parameters, refer to the Himmelblau Configuration Guide or the himmelblau.conf man page . If you continue experiencing issues, consider clearing or invalidating the Himmelblau cache using the aad-tool utility: sudo aad-tool cache-clear","title":"Additional References"},{"location":"troubleshooting/Write-Permissions-for-the-%60logon_script%60-Parameter-in-Himmelblau/","text":"Overview In Himmelblau, the logon_script parameter in himmelblau.conf specifies a script that is executed by the himmelblaud-tasks service at logon time. To ensure the script has the appropriate write access, it may be necessary to modify the himmelblaud-tasks.service file to include specific directories in the ReadWritePaths directive. Steps to Modify the Service File for logon_script Locate the himmelblaud-tasks.service File On Rocky/SUSE Linux: sudo vim /usr/lib/systemd/system/himmelblaud-tasks.service On Debian/Ubuntu: sudo nano /etc/systemd/system/himmelblaud-tasks.service Edit the ReadWritePaths Directive Add the paths that need write access for the script specified by logon_script . For example, if the script logs output to /var/log , include /var/log in ReadWritePaths . Updated section of the service file: [Service] ReadWritePaths=/home /var/run/himmelblaud /var/log Save and Close the File Reload systemd and Restart the Service Reload systemd to apply the changes: sudo systemctl daemon-reload Restart the service: sudo systemctl restart himmelblaud-tasks Following these steps will ensure that the logon_script has the necessary permissions to write to the specified paths.","title":"Write Permissions for the `logon script` Parameter in Himmelblau"},{"location":"troubleshooting/Write-Permissions-for-the-%60logon_script%60-Parameter-in-Himmelblau/#overview","text":"In Himmelblau, the logon_script parameter in himmelblau.conf specifies a script that is executed by the himmelblaud-tasks service at logon time. To ensure the script has the appropriate write access, it may be necessary to modify the himmelblaud-tasks.service file to include specific directories in the ReadWritePaths directive.","title":"Overview"},{"location":"troubleshooting/Write-Permissions-for-the-%60logon_script%60-Parameter-in-Himmelblau/#steps-to-modify-the-service-file-for-logon_script","text":"Locate the himmelblaud-tasks.service File On Rocky/SUSE Linux: sudo vim /usr/lib/systemd/system/himmelblaud-tasks.service On Debian/Ubuntu: sudo nano /etc/systemd/system/himmelblaud-tasks.service Edit the ReadWritePaths Directive Add the paths that need write access for the script specified by logon_script . For example, if the script logs output to /var/log , include /var/log in ReadWritePaths . Updated section of the service file: [Service] ReadWritePaths=/home /var/run/himmelblaud /var/log Save and Close the File Reload systemd and Restart the Service Reload systemd to apply the changes: sudo systemctl daemon-reload Restart the service: sudo systemctl restart himmelblaud-tasks Following these steps will ensure that the logon_script has the necessary permissions to write to the specified paths.","title":"Steps to Modify the Service File for logon_script"}]}